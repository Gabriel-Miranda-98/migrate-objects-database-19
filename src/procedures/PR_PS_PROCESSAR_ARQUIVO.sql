
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."PR_PS_PROCESSAR_ARQUIVO" (CODIGO_EMPRESA CHAR, IDENTIFICADOR_ARQUIVO CHAR, ANO_MES_REFERENCIA DATE, INDICADOR_TESTE CHAR) as

vRETORNO RETORNO_PROCESSAMENTO := RETORNO_PROCESSAMENTO(null,null,null);
REG_LOG LOG_PROCESSAMENTO;
vLISTA_LOG LISTA_LOG := LISTA_LOG(null,null,null);

  ARQUIVO_CONCESSOES      CONSTANT CHAR(4) := '0001';
  ARQUIVO_BENEFICIARIOS   CONSTANT CHAR(4) := '0002';
  ARQUIVO_MOVIMENTOS      CONSTANT CHAR(4) := '0003';
  ARQUIVO_MOVIMENTOS_DIRF CONSTANT CHAR(4) := '0004';
  
  EMPRESA_ATIVOS        CONSTANT CHAR(4) := '0001';
  EMPRESA_APOSENTADOS   CONSTANT CHAR(4) := '1700';
  EMPRESA_PENSIONISTAS  CONSTANT CHAR(4) := '0011';
    
  STATUS_CARREGADO    CONSTANT NUMBER := 0;
  STATUS_VALIDADO     CONSTANT NUMBER := 1;
  STATUS_INVALIDADO   CONSTANT NUMBER := 2;
  STATUS_PROCESSADO   CONSTANT NUMBER := 3;
  STATUS_EFETIVADO    CONSTANT NUMBER := 4;
  
  TIPO_LOG_SUCESSO      CONSTANT NUMBER := 0;
  TIPO_LOG_INFO         CONSTANT NUMBER := 2;
  TIPO_LOG_ALERTA       CONSTANT NUMBER := 2;
  TIPO_LOG_ERRO         CONSTANT NUMBER := 99;
  
  CATEGORIA_LOG_VALIDACAO CONSTANT NUMBER := 0;  
  CATEGORIA_LOG_EXECUCAO  CONSTANT NUMBER := 1;      
  
  LISTA_TIPO_BENEFICIO_PENSAO LISTA:=LISTA('0025','0026');
  LISTA_TIPO_BENEFICIO_GERAL  LISTA:=LISTA('0005','0006');
  
  LISTA_VERBAS_DIRF  LISTA:=LISTA('24I8','24I9','16I8');

  LISTA_TIPO_BENEFICIO LISTA;
    
  LISTA_FORNECEDORES CLOB;
  
  vLISTA_FORNECEDORES CLOB;
  vIDENTIFICADOR_FORNCEDOR VARCHAR2(15);
  vIDENTIFICADOR_BENEFICIO VARCHAR2(15); 
  vIDENTIFICADOR_VERBA VARCHAR2(4); 
  vCONTADOR NUMBER; 
  vTIPO_ARQUIVO CHAR(4);
  vDATA_PROCESSAMENTO DATE;
  vIS_TESTE BOOLEAN;
  vSITUACAO_PROCESSAMENTO NUMBER;
  vCODIGO_EMPRESA CHAR(4);
  vANO_MES_REFERENCIA DATE;
  vCATEGORIA_LOG NUMBER;
  vTIPO_LOG NUMBER;
  
PROCEDURE GRAVA_LOG(CodigoEmpresa IN CHAR, TipoArquivo IN CHAR, DataImportacao IN DATE, CategoriaLog IN NUMBER, TipoLog IN NUMBER, Numero_linha IN NUMBER, DescricaoLog IN VARCHAR2, DetalheLog IN VARCHAR2) AS
BEGIN

     INSERT INTO RHPBH_PS_IMPORTACAO_LOG(ID_LOG, DATA_LOG, CODIGO_EMPRESA, TIPO_ARQUIVO, DATA_IMPORTACAO, CATEGORIA, TIPO, LINHA, DESCRICAO, DETALHE)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CodigoEmpresa, TipoArquivo, DataImportacao, CategoriaLog, TipoLog, Numero_linha, DescricaoLog, DetalheLog);
     COMMIT;

END;
    
begin
    
    -- Verifica se o identificador de arquivo informado é válido
    IF IDENTIFICADOR_ARQUIVO NOT IN (ARQUIVO_CONCESSOES, ARQUIVO_BENEFICIARIOS, ARQUIVO_MOVIMENTOS, ARQUIVO_MOVIMENTOS_DIRF) THEN
      raise_application_error (-20001,'IDENTIFICADOR_ARQUIVO INVALIDO.');
    END IF;
        
    -- Verifica se a empresa informada é válida
    BEGIN
         vCODIGO_EMPRESA := null;
         select CODIGO into vCODIGO_EMPRESA from RHORGA_EMPRESA where CODIGO = CODIGO_EMPRESA;
         
         IF vCODIGO_EMPRESA IS NULL THEN
            raise_application_error (-20001,'EMPRESA INVALIDA.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20001,'EMPRESA INVALIDA.');
    END;    
    
    IF vCODIGO_EMPRESA = EMPRESA_PENSIONISTAS THEN                                      
      LISTA_TIPO_BENEFICIO := LISTA_TIPO_BENEFICIO_PENSAO;  
    ELSE                                                                                                                      
      LISTA_TIPO_BENEFICIO := LISTA_TIPO_BENEFICIO_GERAL;
    END IF;
      
    -- Verifica se o indicador de teste informado é válido
    IF UPPER(INDICADOR_TESTE) NOT IN ('S','N') THEN
      raise_application_error (-20001,'INDICADOR DE TESTE INVALIDO. VALORES VÁLIDOS S ou N.');
    END IF;
    
    IF INDICADOR_TESTE = 'N' THEN
      vIS_TESTE := FALSE;
      vCATEGORIA_LOG := CATEGORIA_LOG_EXECUCAO;
    ELSE
      vIS_TESTE := TRUE;
      vCATEGORIA_LOG := CATEGORIA_LOG_VALIDACAO;
    END IF;
    
    IF ANO_MES_REFERENCIA > sysdate THEN
      raise_application_error (-20001,'ANO MES REFERENCIA INVALIDO. NAO PERMITIDA DATA FUTURA.');
    END IF;
    
    IF IDENTIFICADOR_ARQUIVO = ARQUIVO_MOVIMENTOS THEN
      IF TO_CHAR(ANO_MES_REFERENCIA, 'YYYYMM') <> TO_CHAR(sysdate, 'YYYYMM') THEN
        raise_application_error (-20001,'ANO MES REFERENCIA INVALIDO. DATA TEM QUE SER DE MESMO MÊS E ANO DA DATA CORRENTE.');
      END IF;    
    END IF;
    
    vANO_MES_REFERENCIA := TO_DATE('01' || '/' || TO_CHAR(ANO_MES_REFERENCIA,'MM') || '/' || TO_CHAR(ANO_MES_REFERENCIA,'YYYY') ,'DD/MM/YYYY');
     
    CASE WHEN IDENTIFICADOR_ARQUIVO = ARQUIVO_BENEFICIARIOS THEN
         NULL;
         WHEN IDENTIFICADOR_ARQUIVO = ARQUIVO_CONCESSOES THEN
            begin
            for c1 in(
            select F.REGISTRO_ANS as IDENTIFICADOR_FORNCEDOR, BB.CODIGO AS IDENTIFICADOR_BENEFICIO
              from RHORGA_FORNECEDOR F, RHBENF_BENEFICIO BB, RHBENF_TIPO_BENEF BT
             where F.CODIGO = BB.ENTIDADE_FORNECED
               and BB.COD_TIPO_BENEFICIO = BT.CODIGO
               and BB.DATA_FIM_VIGENCIA IS NULL
               and BT.CODIGO member (LISTA_TIPO_BENEFICIO)
               group by F.REGISTRO_ANS, BB.CODIGO
               )
               loop
                   vIDENTIFICADOR_FORNCEDOR := c1.IDENTIFICADOR_FORNCEDOR;
                   vIDENTIFICADOR_BENEFICIO := c1.IDENTIFICADOR_BENEFICIO;   
                   IF vLISTA_FORNECEDORES is NULL THEN
                      vLISTA_FORNECEDORES := 'F' || vIDENTIFICADOR_FORNCEDOR || 'B' || vIDENTIFICADOR_BENEFICIO;
                   ELSE
                      vLISTA_FORNECEDORES := vLISTA_FORNECEDORES || ' ' || 'F' || vIDENTIFICADOR_FORNCEDOR || 'B' || vIDENTIFICADOR_BENEFICIO;
                   END IF;
               end loop;
            end; 
             
        LISTA_FORNECEDORES := vLISTA_FORNECEDORES;

         WHEN IDENTIFICADOR_ARQUIVO = ARQUIVO_MOVIMENTOS THEN
         NULL;
      
         ELSE
         NULL;
    END CASE;  

  dbms_output.put_line(LISTA_FORNECEDORES);
  vCONTADOR := 0;
  vTIPO_ARQUIVO := IDENTIFICADOR_ARQUIVO;
  vDATA_PROCESSAMENTO := sysdate;
  
for C1 in (

select CODIGO_EMPRESA, TIPO_ARQUIVO, DATA_IMPORTACAO, NUMERO_LINHA, LINHA_ARQUIVO, SITUACAO
  from RHPBH_PS_IMPORTACAO_ARQUIVO 
 where TIPO_ARQUIVO = IDENTIFICADOR_ARQUIVO
   and SITUACAO in (STATUS_CARREGADO, STATUS_VALIDADO )
   and CODIGO_EMPRESA = vCODIGO_EMPRESA
   --and CODIGO_CONTRATO = '000000001050980'
   --and NUMERO_LINHA = 1299
   --and rownum <= 1000
 order by TIPO_ARQUIVO, DATA_IMPORTACAO, NUMERO_LINHA
             
          )
loop
    vSITUACAO_PROCESSAMENTO := C1.SITUACAO;
    vDATA_PROCESSAMENTO := C1.DATA_IMPORTACAO;
    
    vCONTADOR := vCONTADOR +1;
    CASE WHEN IDENTIFICADOR_ARQUIVO = ARQUIVO_CONCESSOES THEN
              vRETORNO := FU_PS_PROCESSAR_REG_CONCESSAO(C1.NUMERO_LINHA, C1.LINHA_ARQUIVO, C1.TIPO_ARQUIVO, C1.DATA_IMPORTACAO, LISTA_FORNECEDORES, vIS_TESTE);
         WHEN IDENTIFICADOR_ARQUIVO = ARQUIVO_BENEFICIARIOS THEN
              vRETORNO := FU_PS_PROCESSAR_REG_BENEFIC(C1.NUMERO_LINHA, C1.LINHA_ARQUIVO, C1.TIPO_ARQUIVO, C1.DATA_IMPORTACAO, LISTA_FORNECEDORES, vIS_TESTE);
         WHEN IDENTIFICADOR_ARQUIVO in (ARQUIVO_MOVIMENTOS, ARQUIVO_MOVIMENTOS_DIRF) THEN
              vRETORNO := FU_PS_PROCESSAR_REG_MOVIMENTO(C1.NUMERO_LINHA, C1.LINHA_ARQUIVO, C1.TIPO_ARQUIVO, C1.DATA_IMPORTACAO, vANO_MES_REFERENCIA, LISTA_TIPO_BENEFICIO, LISTA_VERBAS_DIRF, vIS_TESTE);              
         ELSE
              raise_application_error (-20001,'IDENTIFICADOR_ARQUIVO INVALIDO.');
    END CASE; 
       
    --dbms_output.put_line(vRETORNO.CODIGO_RETORNO);
    --dbms_output.put_line(vRETORNO.DESCRICAO_RETORNO);
    SAVEPOINT SAVE_PROCESSAMENTO;
    
 
    IF vIS_TESTE THEN
       vCATEGORIA_LOG := CATEGORIA_LOG_VALIDACAO;
       ROLLBACK TO SAVE_PROCESSAMENTO;
       
       IF vRETORNO.CODIGO_RETORNO = TIPO_LOG_ERRO THEN
         vSITUACAO_PROCESSAMENTO := STATUS_INVALIDADO;
      ELSE
         vSITUACAO_PROCESSAMENTO := STATUS_VALIDADO;
      END IF;
      --dbms_output.put_line('TESTE = TRUE - ROLLBACK - ' || vRETORNO.CODIGO_RETORNO || ' - vSITUACAO_PROCESSAMENTO = ' || vSITUACAO_PROCESSAMENTO );
    ELSE
      vCATEGORIA_LOG := CATEGORIA_LOG_EXECUCAO;
      IF vRETORNO.CODIGO_RETORNO = TIPO_LOG_ERRO THEN
         ROLLBACK TO SAVE_PROCESSAMENTO;
         vSITUACAO_PROCESSAMENTO := STATUS_PROCESSADO;
      ELSE
         COMMIT;
         vSITUACAO_PROCESSAMENTO := STATUS_EFETIVADO;
      END IF;
      --dbms_output.put_line('TESTE = FALSO - ' || vRETORNO.CODIGO_RETORNO || ' - vSITUACAO_PROCESSAMENTO = ' || vSITUACAO_PROCESSAMENTO );
    END IF;
    
    GRAVA_LOG(C1.CODIGO_EMPRESA, C1.TIPO_ARQUIVO, C1.DATA_IMPORTACAO, vCATEGORIA_LOG, TIPO_LOG_INFO, C1.NUMERO_LINHA, 'RETORNO', vRETORNO.CODIGO_RETORNO || ' - ' || vRETORNO.DESCRICAO_RETORNO);
   
    vLISTA_LOG := LISTA_LOG();       
    vLISTA_LOG := vRETORNO.LISTA_LOG_RETORNO;
    --dbms_output.put_line(vLISTA_LOG.count);
    
    for i in 1..vLISTA_LOG.count loop
        REG_LOG := vLISTA_LOG(i);
        --dbms_output.put_line(REG_LOG.TIPO_LOG);
        --dbms_output.put_line(REG_LOG.DESCRICAO_LOG);
        GRAVA_LOG(C1.CODIGO_EMPRESA, C1.TIPO_ARQUIVO, C1.DATA_IMPORTACAO, vCATEGORIA_LOG, REG_LOG.TIPO_LOG, C1.NUMERO_LINHA, REG_LOG.DESCRICAO_LOG, REG_LOG.DETALHE_LOG);
    end loop;
    
    update RHPBH_PS_IMPORTACAO_ARQUIVO 
       set SITUACAO = vSITUACAO_PROCESSAMENTO
     where CODIGO_EMPRESA = C1.CODIGO_EMPRESA
       and TIPO_ARQUIVO = C1.TIPO_ARQUIVO
       and DATA_IMPORTACAO = C1.DATA_IMPORTACAO
       and NUMERO_LINHA = C1.NUMERO_LINHA
       and SITUACAO = C1.SITUACAO;
       
    COMMIT;  
            
end loop;

IF vCONTADOR = 0 THEN
   GRAVA_LOG(vCODIGO_EMPRESA, vTIPO_ARQUIVO, vDATA_PROCESSAMENTO, vCATEGORIA_LOG, TIPO_LOG_INFO, 0, 'NENHUM REGISTRO A SER PROCESSADO FOI ENCONTRADO. EMPRESA ' || vCODIGO_EMPRESA || ', TIPO DE ARQUIVO ' || vTIPO_ARQUIVO || '. ', 'REGISTROS PROCESSADOS = ' || vCONTADOR);
   raise_application_error (-20001,'NENHUM REGISTRO A SER PROCESSADO FOI ENCONTRADO. EMPRESA ' || vCODIGO_EMPRESA || ', TIPO DE ARQUIVO ' || vTIPO_ARQUIVO || '. ');
END IF;

GRAVA_LOG(vCODIGO_EMPRESA, vTIPO_ARQUIVO, vDATA_PROCESSAMENTO, vCATEGORIA_LOG, TIPO_LOG_INFO, 0, 'PROCESSAMENTO FINALIZADO.', 'REGISTROS PROCESSADOS = ' || vCONTADOR);

--dbms_output.put_line('PROCESSAMENTO FINALIZADO.');
--dbms_output.put_line('REGISTROS PROCESSADOS = ' || vCONTADOR);
end;