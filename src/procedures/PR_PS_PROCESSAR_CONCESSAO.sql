
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."PR_PS_PROCESSAR_CONCESSAO" (PCODIGO_EMPRESA CHAR, PID_ARQUIVO NUMBER, PACAO NUMBER ) as

  vRETORNO RETORNO_PROCESSAMENTO := RETORNO_PROCESSAMENTO(null,null,null);
  REG_LOG LOG_PROCESSAMENTO;
  vLISTA_LOG LISTA_LOG := LISTA_LOG(null,null,null);

  REG_PBH_CS RHPBH_PS_CONCESSAO%ROWTYPE;
  vQTDE_LINHAS_AFETADAS NUMBER;

  V_DETALHE_0001 VARCHAR2(4000);
  V_DETALHE_0002 VARCHAR2(4000);
  ARQUIVO_CONCESSOES      CONSTANT CHAR(4) := '0001';
  ARQUIVO_BENEFICIARIOS   CONSTANT CHAR(4) := '0002';
  ARQUIVO_MOVIMENTOS      CONSTANT CHAR(4) := '0003';
  ARQUIVO_MOVIMENTOS_DIRF CONSTANT CHAR(4) := '0004';

  EMPRESA_ATIVOS        CONSTANT CHAR(4) := '0001';
  EMPRESA_APOSENTADOS   CONSTANT CHAR(4) := '1700';
  EMPRESA_PENSIONISTAS  CONSTANT CHAR(4) := '0011';

  STATUS_CARREGADO    CONSTANT NUMBER := 0;
  STATUS_VALIDADO     CONSTANT NUMBER := 1;
  STATUS_INVALIDADO   CONSTANT NUMBER := 2;
  STATUS_PROCESSADO   CONSTANT NUMBER := 3;
  STATUS_EFETIVADO    CONSTANT NUMBER := 4;
  /*
  SITUACAO_CARREGADO    CONSTANT CHAR(2) := 0;
  SITUACAO_VALIDADO     CONSTANT CHAR(2) := 1;
  SITUACAO_INVALIDADO   CONSTANT CHAR(2) := 2;
  SITUACAO_PROCESSADO   CONSTANT CHAR(2) := 3;
  SITUACAO_EFETIVADO    CONSTANT CHAR(2) := 4;
*/
  TIPO_LOG_SUCESSO       CONSTANT NUMBER := 0;
  TIPO_LOG_INFO          CONSTANT NUMBER := 1;
  TIPO_LOG_ALERTA        CONSTANT NUMBER := 2;
  TIPO_LOG_ERRO          CONSTANT NUMBER := 99;
  TIPO_LOG_PROCESSAMENTO CONSTANT NUMBER := 50;

  CODIGO_LOG_PROCESSAMENTO_02 CONSTANT CHAR(4) := 'P002';
  CODIGO_LOG_PROCESSAMENTO_03 CONSTANT CHAR(4) := 'P003';
  CODIGO_LOG_PROCESSAMENTO_04 CONSTANT CHAR(4) := 'P004';
  CODIGO_LOG_PROCESSAMENTO_05 CONSTANT CHAR(4) := 'P005';
  CODIGO_LOG_PROCESSAMENTO_06 CONSTANT CHAR(4) := 'P006';
  CODIGO_LOG_PROCESSAMENTO_07 CONSTANT CHAR(4) := 'P007';
  CODIGO_LOG_PROCESSAMENTO_50 CONSTANT CHAR(4) := 'P050';

  CATEGORIA_LOG_VALIDACAO  CONSTANT NUMBER := 0;
  CATEGORIA_LOG_EXECUCAO   CONSTANT NUMBER := 1;
  CATEGORIA_LOG_LEIAUTE    CONSTANT NUMBER := 2;
  CATEGORIA_LOG_REGRAS     CONSTANT NUMBER := 3;
  CATEGORIA_LOG_EFETIVACAO CONSTANT NUMBER := 4;

  NAO_EXISTE_TP_RELACIONAMENTO  EXCEPTION;
  MAIS_DE_UM_TP_RELACIONAMENTO  EXCEPTION;
  BENEFICIO_NAO_ENCONTRADO      EXCEPTION;
  MAIS_DE_UM_BENEFICIO          EXCEPTION;
  ERRO_AO_TENTAR_RECUPERAR_DADO EXCEPTION;
  ERRO_GENERICO                 EXCEPTION;


  RET_ENCONTRADO CONSTANT NUMBER := 0;
  RET_NAO_ENCONTRADO CONSTANT NUMBER := 97;
  RET_MAIS_DE_UM_REGISTRO CONSTANT NUMBER := 98;
  RET_ERRO CONSTANT NUMBER := 99;
  vUSUARIO VARCHAR2(40):= 'IMPORT_PS';

  LISTA_VERBAS_DIRF  LISTA:=LISTA('24I8','24I9','16I8', '16I5', '24I5');
  LISTA_MUNICIPALIZADOS  LISTA:=LISTA('000000000000699','000000000011747', '000000000011399');

  vCONTADOR NUMBER;
  vTIPO_ARQUIVO CHAR(4);
  vDATA_PROCESSAMENTO DATE;
  vIS_TESTE BOOLEAN;
  vSITUACAO_PROCESSAMENTO CHAR(2);
  vCODIGO_EMPRESA CHAR(4);
  vID_ARQUIVO NUMBER;
  vSITUACAO_ARQUIVO CHAR(2);
  vANO_MES_REFERENCIA DATE;
  vCATEGORIA_LOG NUMBER;
  vTIPO_LOG NUMBER;
  vADE_NUMERO_MAP NUMBER;
  vCPF_VALIDO BOOLEAN;
  VCPF_EXISTENTE NUMBER;
  NENHUM_ARQUIVO_PROCESSAR EXCEPTION;

  vCODIGO_PESSOA_BENEFICIARIO CHAR(15);
  vTIPO_RELACIONAMENTO CHAR(4);
  vCODIGO_BENEFICIO VARCHAR2(15);
  VCPF_TITULAR CHAR(11);
  vIDENTIFICADOR_REGRA VARCHAR2(30);

  vTIPO_BENEFICIO CHAR(2);
  vVALOR_REMUNERACAO_BASE_PS NUMBER(15,2);

  vCONC_CODIGO_BENEFICIARIO CHAR(15);
  vCONC_CPF_BENEFICIARIO CHAR(11);
  vCONC_DATA_NASC_BENEFICIARIO DATE;
  vCONC_IDADE_BENEFICIARIO NUMBER;
  vCONC_CODIGO_CONTRATO CHAR(15);
  vCONC_CODIGO_BENEFICIO CHAR(15);
  vCONC_DATA_CONCESSAO DATE;
  vCONC_DATA_CANCELAMENTO DATE;
  vCONC_NUMERO_CARTEIRA VARCHAR2(4000);
  vCONC_CATEGORIA_BENEFICIARIO CHAR(4);
  vCONC_VALOR_MENSALIDADE NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_MO NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_ME NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_OD NUMBER(15,2);
  vCONC_REMUNERACAO_BASE_PS NUMBER(15,2);

  vJA_POSSUI_PLANO_SAUDE NUMBER;

  vSOL_MOVI_DATA_SOLICITACAO DATE;
  vSOL_MOVI_DATA_INI_VIGENCIA DATE;
  vSOL_MOVI_DATA_FIM_VIGENCIA DATE;

  vQTDE_REG_EXCLUSAO_INCLUSAO NUMBER;

   vCODIGO_CATEGORIA_BENEFICIARIO VARCHAR2(4);
   vCONC_ORDEM_DEPENDENCIA  CHAR(2);
   vCONC_EXCECAO_DEPENDENCIA  CHAR(1);
   vCONC_DATA_FIM_EXCECAO_DEPEND  DATE;
   vHOUVE_ALTERACAO_DADOS BOOLEAN;

/*
123456789012345678901234567890
*/
LOG_CODIGO_EMPRESA_INVALIDO    CONSTANT CHAR(4) := 'E001';
LOG_CODIGO_CONTRATO_INVALIDO   CONSTANT CHAR(4) := 'E002';
LOG_CODIGO_FORNECEDOR_INVALIDO CONSTANT CHAR(4) := 'E003';
LOG_CODIGO_VERBA_INVALIDO      CONSTANT CHAR(4) := 'E004';
LOG_VALOR_VERBA_INVALIDO       CONSTANT CHAR(4) := 'E005';
LOG_VALOR_ZERADO               CONSTANT CHAR(4) := 'E006';
LOG_ANO_MES_REF_INVALIDO       CONSTANT CHAR(4) := 'E007';
LOG_ANO_MES_REF_NAO_RELAC      CONSTANT CHAR(4) := 'E008';
LOG_NUM_CARTEIRA_INVALIDO      CONSTANT CHAR(4) := 'E009';
LOG_NUM_CARTEIRA_NAO_VIGENTE   CONSTANT CHAR(4) := 'E010';
LOG_CONCESSAO_NAO_ENCONTRADA   CONSTANT CHAR(4) := 'E011';
LOG_CPF_NAO_ENCONTRADO         CONSTANT CHAR(4) := 'E012';
LOG_CPF_INVALIDO               CONSTANT CHAR(4) := 'E013';
LOG_DUPLICIDADE_REGISTRO       CONSTANT CHAR(4) := 'E014';
LOG_TP_RELAC_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E015';
LOG_TP_RELAC_MAIS_DE_UM        CONSTANT CHAR(4) := 'E016';
LOG_TP_RELAC_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E017';
LOG_BENEFICIO_NAO_ENCONTRADO   CONSTANT CHAR(4) := 'E018';
LOG_CARTEIRA_OUTRO_CONTRATO    CONSTANT CHAR(4) := 'E019';
LOG_CARTEIRA_OUTRO_CPF         CONSTANT CHAR(4) := 'E020';
LOG_REGISTRO_ANTES_CONCESSAO   CONSTANT CHAR(4) := 'E021';
LOG_REGISTRO_APOS_CANCEL       CONSTANT CHAR(4) := 'E022';
LOG_CONCESSAO_DUPLICADA        CONSTANT CHAR(4) := 'E023';
LOG_CONCESSAO_ERRO_RECUPERACAO CONSTANT CHAR(4) := 'E024';
LOG_REGISTRO_JA_EXISTENTE      CONSTANT CHAR(4) := 'E025';
LOG_TIPO_BENEFICIO_INVALIDO    CONSTANT CHAR(4) := 'E026';
LOG_CNPJ_NAO_ENCONTRADO        CONSTANT CHAR(4) := 'E027';
LOG_CNPJ_INVALIDO              CONSTANT CHAR(4) := 'E028';
LOG_TP_RELAC_NAO_CONFORME      CONSTANT CHAR(4) := 'E029';
LOG_TP_RELAC_DEP_NAO_INFORMADO CONSTANT CHAR(4) := 'E030';
LOG_CODIGO_VERBA_NAO_CONFORME  CONSTANT CHAR(4) := 'E031';
LOG_TIPO_RELAC_INVALIDO        CONSTANT CHAR(4) := 'E032';

LOG_OPERACAO_INVALIDA          CONSTANT CHAR(4) := 'E033';
LOG_DATA_INICIAL_MENOR_PERMIT  CONSTANT CHAR(4) := 'E034';
LOG_DATA_FUTURA                CONSTANT CHAR(4) := 'E035';
LOG_CONTRATO_MUNICIPALIZADO    CONSTANT CHAR(4) := 'E036';

LOG_SOL_MOVI_NAO_ENCONTRADA    CONSTANT CHAR(4) := 'E037';
LOG_SOL_MOVI_DUPLICADA         CONSTANT CHAR(4) := 'E038';
LOG_SOL_MOVI_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E039';
LOG_DUPLICIDADE_ADE_NUMERO     CONSTANT CHAR(4) := 'E040';
LOG_VERBA_NAO_PERMITE_ALTERAR  CONSTANT CHAR(4) := 'E041';
LOG_SOL_MOVI_NAO_VIGENTE       CONSTANT CHAR(4) := 'E042';
LOG_SOL_MOVI_OUTRA_DATA_SOLIC  CONSTANT CHAR(4) := 'E043';
LOG_SOL_MOVI_JA_EXISTENTE      CONSTANT CHAR(4) := 'E044';
LOG_PS_MENSALIDADE_VALOR_DIF   CONSTANT CHAR(4) := 'E045';
LOG_PS_SUBSIDIO_VALOR_DIF      CONSTANT CHAR(4) := 'E046';
LOG_PS_VALOR_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E047';

LOG_PS_TITULAR_NAO_ENCONTRADO  CONSTANT CHAR(4) := 'E048';
LOG_PS_ALTER_REG_NAO_EXISTE    CONSTANT CHAR(4) := 'E049';

LOG_JA_POSSUI_PLANO_SAUDE      CONSTANT CHAR(4) := 'E050';
LOG_CARTEIRA_OUTRO_BENEFICIO   CONSTANT CHAR(4) := 'E051';
LOG_CARTEIRA_OUTRA_DATA        CONSTANT CHAR(4) := 'E052';
LOG_CONCESSAO_JA_CANCELADA     CONSTANT CHAR(4) := 'E053';
LOG_DIVERGENCIA_BENEFICIO_ANS  CONSTANT CHAR(4) := 'E054';
LOG_SEXO_INVALIDO              CONSTANT CHAR(4) := 'E055';
LOG_MUNICIPIO_INVALIDO         CONSTANT CHAR(4) := 'E056';
LOG_ESTADO_CIVIL_INVALIDO      CONSTANT CHAR(4) := 'E057';
LOG_TIPO_LOGRADOURO_INVALIDO   CONSTANT CHAR(4) := 'E058';
LOG_UF_ENDERECO_INVALIDO       CONSTANT CHAR(4) := 'E059';
LOG_CPF_JA_EXISTENTE           CONSTANT CHAR(4) := 'E060';

LOG_EXCECAO_DEPEND_INVALIDA    CONSTANT CHAR(4) := 'E061';
LOG_MOT_CANCEL_NAO_INFORMADO   CONSTANT CHAR(4) := 'E062';
LOG_DATA_CANCEL_NAO_INFORMADO  CONSTANT CHAR(4) := 'E063';
LOG_DATA_CANCEL_SUP_360        CONSTANT CHAR(4) := 'E064';

LOG_DATA_EXCECAO_MENOR         CONSTANT CHAR(4) := 'E065';
LOG_DATA_EXCECAO_SUP_360       CONSTANT CHAR(4) := 'E066';

LOG_ORDEM_DEPENDENCIA_INVALIDA CONSTANT CHAR(4) := 'E067';
LOG_EXCECAO_DEP_NAO_INFORMADA  CONSTANT CHAR(4) := 'E068';
LOG_DATA_EXCECAO_NAO_INFORMADA CONSTANT CHAR(4) := 'E069';
LOG_CODIGO_BENEFICIO_INVALIDO  CONSTANT CHAR(4) := 'E070';

LOG_IDENT_ARQUIVO_INVALIDO     CONSTANT CHAR(4) := 'E071';
LOG_SEQUENCIAL_REG_INVALIDO    CONSTANT CHAR(4) := 'E072';
LOG_GERACAO_ARQUIVO_DIVERGENTE CONSTANT CHAR(4) := 'E073';
LOG_NUM_CARTEIRA_JA_EXISTENTE  CONSTANT CHAR(4) := 'E074';

LOG_ALTERACAO_INFORMACAO       CONSTANT CHAR(4) := 'E100';

LOG_ALT_PESSOA_NOME            CONSTANT CHAR(4) := 'E101';
LOG_ALT_PESSOA_IDENTIDADE      CONSTANT CHAR(4) := 'E102';
LOG_ALT_PESSOA_DT_NASCIMENTO   CONSTANT CHAR(4) := 'E103';
LOG_ALT_PESSOA_SEXO            CONSTANT CHAR(4) := 'E104';
LOG_ALT_PESSOA_ESTADO_CIVIL    CONSTANT CHAR(4) := 'E105';
LOG_ALT_PESSOA_NOME_MAE        CONSTANT CHAR(4) := 'E106';
LOG_ALT_ENDERECO_TP_LOGRADOURO CONSTANT CHAR(4) := 'E107';
LOG_ALT_ENDERECO_ENDERECO      CONSTANT CHAR(4) := 'E108';
LOG_ALT_ENDERECO_NUMERO        CONSTANT CHAR(4) := 'E109';
LOG_ALT_ENDERECO_COMPLEMENTO   CONSTANT CHAR(4) := 'E110';
LOG_ALT_ENDERECO_BAIRRO        CONSTANT CHAR(4) := 'E111';
LOG_ALT_ENDERECO_MUNICIPIO     CONSTANT CHAR(4) := 'E112';
LOG_ALT_ENDERECO_UF            CONSTANT CHAR(4) := 'E113';
LOG_ALT_ENDERECO_CEP           CONSTANT CHAR(4) := 'E114';

LOG_ALT_CONCESSAO_EXCECAO_DEP  CONSTANT CHAR(4) := 'E115';
LOG_ALT_CONCESSAO_DT_EXCE_DEP  CONSTANT CHAR(4) := 'E116';
LOG_ALT_CONCESSAO_ORDEM_DEP    CONSTANT CHAR(4) := 'E117';
LOG_ALT_CONCESSAO_CATEG_BENEF  CONSTANT CHAR(4) := 'E118';
LOG_ALT_CONCESSAO_OBSERVACAO   CONSTANT CHAR(4) := 'E119';

LOG_SUCESSO_INCLUSAO           CONSTANT CHAR(4) := 'S001';
LOG_SUCESSO_ALTERACAO          CONSTANT CHAR(4) := 'S002';
LOG_SUCESSO_EXCLUSAO           CONSTANT CHAR(4) := 'S003';

-- Mapeamento
TYPE LISTA_CAMPOS is RECORD (
    CONTEUDO    VARCHAR2(1000)
    );

   TYPE LISTA_EXCECOES IS VARRAY(10000) OF LISTA_CAMPOS;
   LISTA_MAPEAMENTOS_INVALIDOS LISTA_EXCECOES;

  COD_CONVER_TIPO_RELACIONAMENTO CONSTANT CHAR(4) := 'PS01';
  COD_CONVER_TIPO_LOGRADOURO     CONSTANT CHAR(4) := 'PS02';
  COD_CONVER_ESTADO_CIVIL        CONSTANT CHAR(4) := 'PS03';
  COD_CONVER_TIPO_BENEFICIO      CONSTANT CHAR(4) := 'PS04';
  COD_CONVER_MOTIVO_CONCESSAO    CONSTANT CHAR(4) := 'PS05';
  COD_CONVER_BENEFICIO           CONSTANT CHAR(4) := 'PS06';
  COD_CONVER_MOTIVO_CANCELAMENTO CONSTANT CHAR(4) := 'PS07';
  COD_CONVER_CATEGORIA_PESSOA    CONSTANT CHAR(4) := 'PS08';
  COD_CONVER_SEXO                CONSTANT CHAR(4) := 'PS09';

  COD_STATUS_SOLIC_INCLUSAO      CONSTANT CHAR(4) := 'CS01';
  COD_STATUS_SOLIC_EXCLUSAO      CONSTANT CHAR(4) := 'CS02';
  COD_STATUS_SOLIC_ALTERACAO_OLD CONSTANT CHAR(4) := 'CS03';
  COD_STATUS_SOLIC_ALTERACAO_NEW CONSTANT CHAR(4) := 'CS04';


  -- Mapeamentos
  LISTA_MAPEA_SEXO LISTA;
  LISTA_MAPEA_TIPO_RELACI LISTA;
  LISTA_MAPEA_ESTADO_CIVIL LISTA;
  LISTA_MAPEA_TIPO_LOGRADOURO LISTA;

  LISTA_MAPEA_TIPO_BENEFICIO LISTA;
  LISTA_MAPEA_MOTIVO_CONCESSAO LISTA;
  LISTA_MAPEA_MOTIVO_CANCEL LISTA;
  LISTA_MAPEA_BENEFICIO LISTA;
  LISTA_MAPEA_CATEGORIA_PESSOA LISTA;

  LISTA_SERVIDORES_VERBAS_PS LISTA;
  LISTA_VERBAS_MENSALIDADE LISTA;
  LISTA_VERBAS_SUBSIDIO LISTA;

  -- Lista de valores validos esperados na Interface de Software (IS)
  -- Sexo
  LISTA_SEXO_IS LISTA:= LISTA('0001','0002');

 LISTA_TIPO_RELACI_IS LISTA;
LISTA_ESTADO_CIVIL_IS LISTA;
LISTA_TIPO_LOGRADOURO_IS LISTA;
LISTA_TIPO_BENEFICIO_IS LISTA;
LISTA_MOTIVO_CONCESSSAO_IS LISTA;
LISTA_MOTIVO_CANCEL_IS LISTA;
LISTA_BENEFICIO_IS LISTA;
LISTA_CATEGORIA_PESSOA_IS lista;

  -- Categoria de pessoa

  TEXTO_MENSAGEM_MAPEA_INVALIDO VARCHAR2(4000);
  vCONTADOR_MAPEAMENTO_INVALIDO NUMBER;
  MAPEAMENTO_EXCEPTION EXCEPTION;

  FUNCTION MONTA_LISTA( pcodigo_conversao CHAR)

    RETURN lista
  IS

    CURSOR cdado_destino
    IS
      SELECT dado_ORIGEM
      FROM RHINTE_ED_IT_CONV
      WHERE CODIGO_CONVERSAO =pcodigo_conversao;
    V lista;
    vdado VARCHAR2 (400);
    I PLS_INTEGER;
    vcontador NUMBER;
  BEGIN
  DBMS_Output.PUT_LINE(pcodigo_conversao);
    FOR c1 IN
    (SELECT COUNT (1)AS quantidade
    FROM RHINTE_ED_IT_CONV
    WHERE CODIGO_CONVERSAO =pcodigo_conversao
    )
    LOOP
      vcontador:=c1.quantidade;
    END LOOP;
    V:=lista();
    V.EXTEND(vcontador);
    I:=1;
    OPEN cdado_destino;
    LOOP
      FETCH cdado_destino
      INTO vdado;
      EXIT
    WHEN cdado_destino%notfound;
      V(I) := vdado;
      I    := I+1;
    END LOOP;
    CLOSE cdado_destino;
    RETURN v;
  END;

FUNCTION MAPEAR_VALORES(plista LISTA, pcodigo_conversao CHAR) return LISTA as
lista_map LISTA;
vDADO_DESTINO VARCHAR2(4000);
vCONTADOR_NAO_ENCONTRADO NUMBER;

BEGIN
  lista_map := plista;
  vCONTADOR_NAO_ENCONTRADO := 0;
  DBMS_Output.PUT_LINE('MAPEAMENTO. pcodigo_conversao = ' || pcodigo_conversao || ';');
  for i in 1..plista.count()
    loop
       begin
          vDADO_DESTINO := NULL;
          select DADO_DESTINO
            into vDADO_DESTINO
            from RHINTE_ED_IT_CONV
           where CODIGO_CONVERSAO = pcodigo_conversao
             and DADO_ORIGEM = plista(i)
             ;
       exception
       when NO_DATA_FOUND then
         vCONTADOR_NAO_ENCONTRADO := vCONTADOR_NAO_ENCONTRADO + 1;
         vDADO_DESTINO := NULL;
         DBMS_Output.PUT_LINE('VALOR_NAO_ENCONTRADO. pcodigo_conversao = ' || pcodigo_conversao || '; DADO_ORIGEM = ' || plista(i));
       end;

       lista_map(i) := vDADO_DESTINO;
   end loop;

   IF vCONTADOR_NAO_ENCONTRADO > 0 THEN
      RAISE MAPEAMENTO_EXCEPTION;
   END IF;

   return lista_map;

END;

PROCEDURE IMPRIMIR_VALORES_MAPEADOS(descricao_lista varchar2, lista LISTA, lista_mapeada LISTA) as
vCONTEUDO VARCHAR2(4);
BEGIN
      DBMS_Output.PUT_LINE('IMPRIMINDO LISTA MAPEADA' || ' - ' || descricao_lista);
       for i in 1..lista.count()
         loop
             DBMS_Output.PUT_LINE(RPAD('lista('||i||')',10,' ') || ' = ' || lista(i) || ' -> ' || lista_mapeada(i));
         end loop;
END;

PROCEDURE REGISTRA_LOG(TipoLog IN NUMBER, Numero_linha IN NUMBER, DescricaoLog IN VARCHAR2, DetalheLog IN VARCHAR2) AS
BEGIN

REG_LOG.TIPO_LOG := TipoLog;
REG_LOG.DESCRICAO_LOG := DescricaoLog;
REG_LOG.DETALHE_LOG := DetalheLog;

vLISTA_LOG.Extend;
vLISTA_LOG(vLISTA_LOG.count) := REG_LOG;
END;

PROCEDURE GRAVA_LOG(CodigoEmpresa IN CHAR, CategoriaLog IN NUMBER, TipoLog IN NUMBER, IdArquivo IN NUMBER, Numero_linha IN NUMBER, CodigoLog IN CHAR, DetalheLog IN VARCHAR2) AS
BEGIN

     BEGIN

     INSERT INTO RHPBH_ARQUIVO_LOG(ID_LOG, DATA_LOG, CATEGORIA, TIPO, ID_ARQUIVO, NUMERO_LINHA, CODIGO_LOG, DETALHE, CODIGO_EMPRESA)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CategoriaLog, TipoLog, IdArquivo, Numero_linha, CodigoLog, DetalheLog, CodigoEmpresa);
     COMMIT;
     EXCEPTION
     WHEN OTHERS THEN
       dbms_output.put_line('[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR GRAVAR LOG. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);

     END;

END;

PROCEDURE PR_CONTROLE_PROCESSAMENTO(CODIGO_EMPRESA IN CHAR, ID_ARQUIVO IN NUMBER, SITUACAO_PROCESSAMENTO IN CHAR, POBSERVACAO IN VARCHAR2 DEFAULT NULL) AS
BEGIN
    PR_GRAVA_LOG_PROCESSA_ARQUIVO(CODIGO_EMPRESA, ID_ARQUIVO, SITUACAO_PROCESSAMENTO, POBSERVACAO);
END;

PROCEDURE PR_SET_SITUACAO_PROCESSAMENTO(PSITUACAO_PROCESSAMENTO IN CHAR) AS
BEGIN
    IF PSITUACAO_PROCESSAMENTO IS NULL THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO NULA.');
    END IF;

    IF PSITUACAO_PROCESSAMENTO NOT IN ('00','01','02','03','04','05','06','07') THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO INVALIDA.');
    END IF;

    vSITUACAO_PROCESSAMENTO := PSITUACAO_PROCESSAMENTO;
END;

PROCEDURE PR_ATUALIZAR_SITUACAO_REGISTR0 AS
BEGIN
   BEGIN
      update RHPBH_ARQUIVO_LINHA AL
         set SITUACAO = 99
       where ID_ARQUIVO = PID_ARQUIVO
         and exists(
      select *
        from RHPBH_ARQUIVO_LOG
       where ID_ARQUIVO = AL.ID_ARQUIVO
         and NUMERO_LINHA = AL.NUMERO_LINHA
         and TIPO = 99
      );

      commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
END;

FUNCTION CANCELAR_CONCESSAO(vCODIGO_EMPRESA IN CHAR, vTIPO_CONTRATO IN CHAR, vCODIGO_CONTRATO IN CHAR, vCODIGO_PESSOA_BENEFICIARIO IN CHAR,
                            vCODIGO_BENEFICIO IN CHAR, vNUMERO_CARTEIRA IN CHAR, vDATA_CANCELAMENTO IN DATE, vMOTIVO_CANCELAMENTO IN CHAR,
                            vOBSERVACAO IN VARCHAR2) RETURN NUMBER IS
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
     vQTDE_LINHAS_AFETADAS := 0;
     BEGIN

        -- CANCELAMENTO DE BENEFICIO
        update RHBENF_CONCESSOES set DATA_CANCELAMENTO = vDATA_CANCELAMENTO,
                                     CODIGO_MOT_CANCEL = vMOTIVO_CANCELAMENTO,
                                     TEXTO_ASSOCIADO = CASE WHEN vOBSERVACAO IS NOT NULL AND TEXTO_ASSOCIADO IS NULL THEN TO_CHAR(sysdate, 'DD/MM/YYYY') || ' - ATUALIZAÇÃO IMPORTADA - ' || vOBSERVACAO
                                                            WHEN vOBSERVACAO IS NOT NULL AND TEXTO_ASSOCIADO IS NOT NULL THEN TEXTO_ASSOCIADO || ' ' ||  TO_CHAR(sysdate, 'DD/MM/YYYY') || ' - ATUALIZAÇÃO IMPORTADA - ' || vOBSERVACAO
                                                            ELSE TEXTO_ASSOCIADO
                                                       END,
                                     LOGIN_USUARIO = vUSUARIO,
                                     DT_ULT_ALTER_USUA = sysdate
         where CODIGO_EMPRESA = vCODIGO_EMPRESA
           and TIPO_CONTRATO = vTIPO_CONTRATO
           and CODIGO_CONTRATO = vCODIGO_CONTRATO
           and CODIGO_BENEFIC = vCODIGO_PESSOA_BENEFICIARIO
           and CODIGO_BENEFICIO = vCODIGO_BENEFICIO
           and C_LIVRE_DESCR08 = vNUMERO_CARTEIRA;

           vQTDE_LINHAS_AFETADAS := sql%rowcount;

     EXCEPTION
     WHEN OTHERS THEN
          raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM
          || vCODIGO_EMPRESA || vTIPO_CONTRATO || vCODIGO_CONTRATO || vCODIGO_PESSOA_BENEFICIARIO || vCODIGO_BENEFICIO || vNUMERO_CARTEIRA
          );
     END;
     RETURN vQTDE_LINHAS_AFETADAS;
END;

FUNCTION ALTERAR_CONCESSAO(var RHPBH_PS_CONCESSAO%ROWTYPE) RETURN NUMBER IS
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
     vQTDE_LINHAS_AFETADAS := 0;
     BEGIN

         -- Se for o tipo de operação de alteração, tem que existir concessão de benefício vigente, de mesmo tipo de benefício, para o mesmo contrato e de mesmo número de carteira
         -- Confere se há concessão de benefício para o número de carteira informado.
         BEGIN


          vCONC_CODIGO_BENEFICIARIO := NULL;
          vCONC_CODIGO_BENEFICIO := NULL;
          vCONC_CATEGORIA_BENEFICIARIO := NULL;
          vCONC_DATA_CANCELAMENTO := NULL;
          vCONC_ORDEM_DEPENDENCIA := NULL;
          vCONC_EXCECAO_DEPENDENCIA := NULL;
          vCONC_DATA_FIM_EXCECAO_DEPEND := NULL;

          select CONC.CODIGO_BENEFIC, CONC.CODIGO_BENEFICIO, CONC.CATEGORIA_BENEF, CONC.C_LIVRE_SELEC01, CONC.C_LIVRE_SELEC03, CONC.C_LIVRE_DATA11
            into vCONC_CODIGO_BENEFICIARIO,
                 vCONC_CODIGO_BENEFICIO,
                 vCONC_CATEGORIA_BENEFICIARIO,
                 vCONC_ORDEM_DEPENDENCIA,
                 vCONC_EXCECAO_DEPENDENCIA,
                 vCONC_DATA_FIM_EXCECAO_DEPEND
            from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF
           where CONC.CODIGO_EMPRESA = var.CODIGO_EMPRESA
             and CONC.TIPO_CONTRATO = var.TIPO_CONTRATO
             and CONC.CODIGO_CONTRATO = var.CODIGO_CONTRATO
             and CONC.DATA_CANCELAMENTO IS NULL
             and CONC.CODIGO_BENEFICIO = BENF.CODIGO
             and BENF.COD_TIPO_BENEFICIO member LISTA_MAPEA_TIPO_BENEFICIO
             and CONC.CODIGO_BENEFICIO = var.CODIGO_BENEFICIO
             and CONC.C_LIVRE_DESCR08 = var.NUMERO_CARTEIRA;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
             NULL;--GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'CONCESSAO DE BENEFICIO NAO ENCONTRADA. NÃO FOI ENCONTRADO PLANO DE SAÚDE COM ESSE NÚMERO DE CARTEIRA.', REGISTRO_CONCESSAO.CODIGO_EMPRESA||vTIPO_CONTRATO||REGISTRO_CONCESSAO.CODIGO_CONTRATO||vCODIGO_PESSOA||REGISTRO_CONCESSAO.CODIGO_BENEFICIO||REGISTRO_CONCESSAO.NUMERO_CARTEIRA || REGISTRO_CONCESSAO.CPF);
             GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALTERACAO_INFORMACAO, 'CONCESSAO DE BENEFICIO NAO ENCONTRADA. NÃO FOI ENCONTRADO PLANO DE SAÚDE COM ESSE NÚMERO DE CARTEIRA.' || var.CODIGO_EMPRESA||var.TIPO_CONTRATO||var.CODIGO_CONTRATO||var.CODIGO_PESSOA_BENEFICIARIO||var.CODIGO_BENEFICIO||var.NUMERO_CARTEIRA || var.CPF);
        WHEN OTHERS THEN
             NULL;
        END;

    IF vCODIGO_CATEGORIA_BENEFICIARIO = '0001' THEN
       NULL;--GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'CONCESSAO DE BENEFICIO NAO PODE SER ALTERADA POIS A MESMA ESTÁ RLACIONADA AO BENEFICIARIO TITULAR. ALTERAÇÃO PERMITIDA APENAS PARA BENEFICIÁRIOS DE CATEGORIA DEPENDENTE OU AGREGADO', null);
    ELSE
        IF vCONC_CODIGO_BENEFICIARIO IS NOT NULL THEN
          vHOUVE_ALTERACAO_DADOS := FALSE;
          dbms_output.put_line('vCONC_EXCECAO_DEPENDENCIA = ' || vCONC_EXCECAO_DEPENDENCIA || ' var.EXCECAO_DEPENDENCIA = ' || var.EXCECAO_DEPENDENCIA);
          IF (var.EXCECAO_DEPENDENCIA IS NOT NULL AND (( vCONC_EXCECAO_DEPENDENCIA IS NOT NULL AND (var.EXCECAO_DEPENDENCIA  <> vCONC_EXCECAO_DEPENDENCIA) ) OR (vCONC_EXCECAO_DEPENDENCIA IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_CONCESSAO_EXCECAO_DEP, 'ATUALIZAÇÃO DE DADOS DE CONCESSAO - EXCEÇÃO DE DEPENDÊNCIA.' || ' VALOR ANTERIOR: ' || NVL(vCONC_EXCECAO_DEPENDENCIA, 'NULO') || ' VALOR_ATUAL: ' || NVL(var.EXCECAO_DEPENDENCIA, 'NULO'));
            dbms_output.put_line('passou grava log');
            vCONC_EXCECAO_DEPENDENCIA := var.EXCECAO_DEPENDENCIA;
            vHOUVE_ALTERACAO_DADOS := TRUE;
          END IF;
          dbms_output.put_line('vCONC_DATA_FIM_EXCECAO_DEPEND = ' || vCONC_DATA_FIM_EXCECAO_DEPEND || 'var.DATA_FIM_EXCECAO_DEPENDENCIA = ' || var.DATA_FIM_EXCECAO_DEPENDENCIA);
          IF (var.DATA_FIM_EXCECAO_DEPENDENCIA IS NOT NULL AND (( vCONC_DATA_FIM_EXCECAO_DEPEND IS NOT NULL AND (var.DATA_FIM_EXCECAO_DEPENDENCIA <> vCONC_DATA_FIM_EXCECAO_DEPEND) ) OR (vCONC_DATA_FIM_EXCECAO_DEPEND IS NULL))) THEN
            dbms_output.put_line('antes grava log');
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_CONCESSAO_DT_EXCE_DEP, 'ATUALIZAÇÃO DE DADOS DE CONCESSAO - DATA FIM DE EXCEÇÃO DE DEPENDÊNCIA.' || ' VALOR ANTERIOR: ' || NVL(TO_CHAR(vCONC_DATA_FIM_EXCECAO_DEPEND,'DD/MM/YYYY'), 'NULO') || ' VALOR_ATUAL: ' || NVL(TO_CHAR(var.DATA_FIM_EXCECAO_DEPENDENCIA,'DD/MM/YYYY'), 'NULO'));
            dbms_output.put_line('passou grava log');
            vCONC_DATA_FIM_EXCECAO_DEPEND := var.DATA_FIM_EXCECAO_DEPENDENCIA;
            vHOUVE_ALTERACAO_DADOS := TRUE;
          END IF;
          dbms_output.put_line('vCONC_ORDEM_DEPENDENCIA = ' || vCONC_ORDEM_DEPENDENCIA);
          IF (var.ORDEM_DEPENDENTE IS NOT NULL AND (( vCONC_ORDEM_DEPENDENCIA IS NOT NULL AND (TO_NUMBER(var.ORDEM_DEPENDENTE) <> vCONC_ORDEM_DEPENDENCIA) ) OR (vCONC_ORDEM_DEPENDENCIA IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_CONCESSAO_ORDEM_DEP, 'ATUALIZAÇÃO DE DADOS DE CONCESSAO - ORDEM DE DEPENDÊNCIA.' || ' VALOR ANTERIOR: ' || NVL(vCONC_ORDEM_DEPENDENCIA, 'NULO') || ' VALOR_ATUAL: ' || NVL(var.ORDEM_DEPENDENTE, 'NULO'));
            dbms_output.put_line('passou grava log');
            vCONC_ORDEM_DEPENDENCIA := var.ORDEM_DEPENDENTE;
            vHOUVE_ALTERACAO_DADOS := TRUE;
          END IF;
          dbms_output.put_line('vCONC_CATEGORIA_BENEFICIARIO = ' || vCONC_CATEGORIA_BENEFICIARIO);
          IF (var.CATEGORIA_BENEFICIARIO IS NOT NULL AND (( vCONC_CATEGORIA_BENEFICIARIO IS NOT NULL AND (var.CATEGORIA_BENEFICIARIO <> vCONC_CATEGORIA_BENEFICIARIO) ) OR (vCONC_CATEGORIA_BENEFICIARIO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_CONCESSAO_CATEG_BENEF, 'ATUALIZAÇÃO DE DADOS DE CONCESSAO - CATEGORIA DE BENEFICIÁRIO.' || ' VALOR ANTERIOR: ' || NVL(vCONC_CATEGORIA_BENEFICIARIO, 'NULO') || ' VALOR_ATUAL: ' || NVL(var.CATEGORIA_BENEFICIARIO, 'NULO'));
            dbms_output.put_line('passou grava log');
            vCONC_CATEGORIA_BENEFICIARIO := var.CATEGORIA_BENEFICIARIO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
          END IF;

          IF (var.OBSERVACAO IS NOT NULL) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_CONCESSAO_OBSERVACAO, 'ATUALIZAÇÃO DE DADOS DE CONCESSAO - OBSERVACAO (APENSSADO NO TEXTO_ASSOCIADO).' || ' ADICIONADO AO VALOR_ANTERIOR O VALOR_ATUAL: ' || var.OBSERVACAO);
            vHOUVE_ALTERACAO_DADOS := TRUE;
          END IF;

          IF vHOUVE_ALTERACAO_DADOS THEN
                  -- ATUALIZAÇÃO DE BENEFICIO
                  dbms_output.put_line('passou vHOUVE_ALTERACAO_DADOS');
                  update RHBENF_CONCESSOES set CATEGORIA_BENEF = vCONC_CATEGORIA_BENEFICIARIO,
                                               TEXTO_ASSOCIADO = CASE WHEN var.OBSERVACAO IS NOT NULL AND TEXTO_ASSOCIADO IS NULL THEN TO_CHAR(sysdate, 'DD/MM/YYYY') || ' - ATUALIZAÇÃO IMPORTADA - ' || var.OBSERVACAO
                                                                      WHEN var.OBSERVACAO IS NOT NULL AND TEXTO_ASSOCIADO IS NOT NULL THEN TEXTO_ASSOCIADO || ' ' ||  TO_CHAR(sysdate, 'DD/MM/YYYY') || ' - ATUALIZAÇÃO IMPORTADA - ' || var.OBSERVACAO
                                                                      ELSE TEXTO_ASSOCIADO
                                                                 END,
                                               C_LIVRE_DATA11 = vCONC_DATA_FIM_EXCECAO_DEPEND,
                                               C_LIVRE_SELEC03 = vCONC_EXCECAO_DEPENDENCIA,
                                               C_LIVRE_SELEC01 = vCONC_ORDEM_DEPENDENCIA,
                                               LOGIN_USUARIO = vUSUARIO,
                                               DT_ULT_ALTER_USUA = sysdate
                   where CODIGO_EMPRESA = var.CODIGO_EMPRESA
                     and TIPO_CONTRATO = var.TIPO_CONTRATO
                     and CODIGO_CONTRATO = var.CODIGO_CONTRATO
                     and CODIGO_BENEFIC = var.Codigo_Pessoa_Beneficiario
                     and CODIGO_BENEFICIO = var.CODIGO_BENEFICIO
                     and C_LIVRE_DESCR08 = var.NUMERO_CARTEIRA;

             vQTDE_LINHAS_AFETADAS := sql%rowcount;
           END IF;
           END IF;

         END IF;
     EXCEPTION
     WHEN OTHERS THEN
          dbms_output.put_line('var.codigo_contrato = ' || '|' ||  var.codigo_contrato || '|');
          dbms_output.put_line('var.cpf = ' || '|' ||  var.cpf || '|');
          dbms_output.put_line('var.ordem_dependente = ' || '|' || var.ordem_dependente || '|');
          dbms_output.put_line('var.data_fim_excecao_dependencia = ' || '|' ||  var.data_fim_excecao_dependencia || '|');
          dbms_output.put_line('var.excecao_dependencia = ' || '|' ||  var.excecao_dependencia || '|');
          dbms_output.put_line('var.observacao = ' || '|' ||  var.observacao || '|');
          dbms_output.put_line('[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);

          raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
     END;
     RETURN vQTDE_LINHAS_AFETADAS;
END;


FUNCTION INCLUIR_CONCESSAO(var RHPBH_PS_CONCESSAO%ROWTYPE) RETURN NUMBER IS
reg_cs RHBENF_CONCESSOES%ROWTYPE;
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
    vQTDE_LINHAS_AFETADAS := 0;

  reg_cs.CODIGO_EMPRESA      := var.CODIGO_EMPRESA;
  reg_cs.TIPO_CONTRATO       := var.TIPO_CONTRATO;
  reg_cs.CODIGO_CONTRATO     := var.CODIGO_CONTRATO;
  reg_cs.CODIGO_BENEFIC      := var.Codigo_Pessoa_Beneficiario;
  reg_cs.DATA_CONCESSAO      := var.data_concessao;
  reg_cs.OCORRENCIA          := var.Codigo_Empresa;
  reg_cs.CODIGO_BENEFICIO    := var.Codigo_Beneficio;
  reg_cs.CATEGORIA_BENEF     := var.Categoria_Beneficiario;
  reg_cs.C_LIVRE_DESCR08     := var.Numero_Carteira;

  reg_cs.MOTIVO_CONCESSAO    := var.Motivo_Concessao;
  reg_cs.DATA_CANCELAMENTO   := var.data_cancelamento;
  reg_cs.CODIGO_MOT_CANCEL   := var.MOTIVO_CANCELAMENTO;
  reg_cs.TEXTO_ASSOCIADO     := var.OBSERVACAO;
  reg_cs.C_LIVRE_SELEC01     := var.Ordem_Dependente;
  reg_cs.C_LIVRE_SELEC03     := var.excecao_dependencia;
  reg_cs.C_LIVRE_DATA11      := var.Data_Fim_Excecao_Dependencia;

  reg_cs.LOGIN_USUARIO       := vUSUARIO;
  reg_cs.DT_ULT_ALTER_USUA   := sysdate;

  reg_cs.C_LIVRE_SELEC02     := 0;
  reg_cs.C_LIVRE_VALOR04     := null;
  reg_cs.C_LIVRE_VALOR05     := null;
  reg_cs.C_LIVRE_VALOR06     := null;
  reg_cs.C_LIVRE_DESCR07     := null;
  reg_cs.C_LIVRE_DESCR09     := null;
  reg_cs.C_LIVRE_DATA10      := null;
  reg_cs.C_LIVRE_DATA12      := null;
  reg_cs.PERCENT_PARTICIPAC  := 0.0;
  reg_cs.VALOR_BENEFICIO     := 0.0;
  reg_cs.DATA_PAGTO_FOLHA    := null;
  reg_cs.DATA_DEPOSITO       := null;
  reg_cs.ASSINATURA_01       := null;
  reg_cs.ASSINATURA_02       := null;
  reg_cs.ASSINATURA_03       := null;
  reg_cs.ASSINATURA_04       := null;
  reg_cs.C_LIVRE_OPCAO01     := 'N';
  reg_cs.C_LIVRE_OPCAO02     := 'N';
  reg_cs.C_LIVRE_OPCAO03     := 'N';
  reg_cs.NUMERO_PARCELA      := 0;

  reg_cs.CODIGO_DOENCA       := null;
  reg_cs.ID_AGRUP            := null;
  reg_cs.ID_DIMENSAO         := null;
  reg_cs.DT_REF_CONCEC_RETR  := null;
  reg_cs.DT_REF_CANCEL_RETR  := null;
  reg_cs.CODIGO_FORNECEDOR   := null;
  reg_cs.MUNICIPIO_ORIGEM    := null;
  reg_cs.MUNICIPIO_DESTINO   := null;
  reg_cs.IND_SUSPENSAO  := 'N';
  reg_cs.IND_DECISAO_JUD:= 'N';

    BEGIN
         select max(OCORRENCIA)
           into reg_cs.OCORRENCIA
           from RHBENF_CONCESSOES
          where RHBENF_CONCESSOES.CODIGO_EMPRESA = reg_cs.CODIGO_EMPRESA
            and RHBENF_CONCESSOES.TIPO_CONTRATO = reg_cs.TIPO_CONTRATO
            and RHBENF_CONCESSOES.CODIGO_CONTRATO = reg_cs.CODIGO_CONTRATO
            and RHBENF_CONCESSOES.CODIGO_BENEFIC = reg_cs.CODIGO_BENEFIC
            and RHBENF_CONCESSOES.DATA_CONCESSAO = reg_cs.DATA_CONCESSAO;

            IF reg_cs.OCORRENCIA IS NOT NULL THEN
               reg_cs.OCORRENCIA := reg_cs.OCORRENCIA + 1;
            ELSE
               reg_cs.OCORRENCIA := 1;
            END IF;
    EXCEPTION
    WHEN OTHERS THEN
         reg_cs.OCORRENCIA := 1;
    END;

    BEGIN
         Insert into RHBENF_CONCESSOES values reg_cs;
         vQTDE_LINHAS_AFETADAS := sql%rowcount;
         commit;

    EXCEPTION
    WHEN OTHERS THEN
         raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    RETURN vQTDE_LINHAS_AFETADAS;

END;

begin

    vLISTA_LOG := LISTA_LOG();
    REG_LOG := LOG_PROCESSAMENTO(null, null,null, null);
    vRETORNO := RETORNO_PROCESSAMENTO(null,null,null);


------------------------------------------
-- INICIO MAPEAMENTO

BEGIN
LISTA_TIPO_RELACI_IS := MONTA_LISTA(COD_CONVER_TIPO_RELACIONAMENTO);
LISTA_ESTADO_CIVIL_IS := MONTA_LISTA(COD_CONVER_ESTADO_CIVIL);
LISTA_TIPO_LOGRADOURO_IS:= MONTA_LISTA(COD_CONVER_TIPO_LOGRADOURO);
LISTA_TIPO_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_TIPO_BENEFICIO);
LISTA_MOTIVO_CONCESSSAO_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CONCESSAO);
LISTA_MOTIVO_CANCEL_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CANCELAMENTO);
LISTA_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_BENEFICIO);
LISTA_CATEGORIA_PESSOA_IS := MONTA_LISTA(COD_CONVER_CATEGORIA_PESSOA);
END;

  BEGIN

  LISTA_MAPEAMENTOS_INVALIDOS := LISTA_EXCECOES();

  /*
  -- Mapeamento valores - Sexo
  BEGIN
       LISTA_MAPEA_SEXO := MAPEAR_VALORES(LISTA_SEXO_IS, COD_CONVER_SEXO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'SEXO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
  END;
  */

  -- Mapeamento valores - Tipo de Relacionamento
  BEGIN
       LISTA_MAPEA_TIPO_RELACI := MAPEAR_VALORES(LISTA_TIPO_RELACI_IS, COD_CONVER_TIPO_RELACIONAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE RELACIONAMENTO.');
  END;
  -- Mapeamento valores - Estado Civil
  BEGIN
       LISTA_MAPEA_ESTADO_CIVIL := MAPEAR_VALORES(LISTA_ESTADO_CIVIL_IS, COD_CONVER_ESTADO_CIVIL);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE ESTADO CIVIL.');
  END;
  -- Mapeamento valores - Tipo de Logradouro
  BEGIN
       LISTA_MAPEA_TIPO_LOGRADOURO := MAPEAR_VALORES(LISTA_TIPO_LOGRADOURO_IS, COD_CONVER_TIPO_LOGRADOURO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;

  -- Mapeamento valores - Tipo de Beneficio
  BEGIN
       LISTA_MAPEA_TIPO_BENEFICIO := MAPEAR_VALORES(LISTA_TIPO_BENEFICIO_IS, COD_CONVER_TIPO_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
  END;
  -- Mapeamento valores - Motivo Concessao
  BEGIN
       LISTA_MAPEA_MOTIVO_CONCESSAO := MAPEAR_VALORES(LISTA_MOTIVO_CONCESSSAO_IS, COD_CONVER_MOTIVO_CONCESSAO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE RELACIONAMENTO.');
  END;
  -- Mapeamento valores - Motivo Cancelamento
  BEGIN
       LISTA_MAPEA_MOTIVO_CANCEL := MAPEAR_VALORES(LISTA_MOTIVO_CANCEL_IS, COD_CONVER_MOTIVO_CANCELAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE ESTADO CIVIL.');
  END;
  -- Mapeamento valores - Beneficio
  BEGIN
       LISTA_MAPEA_BENEFICIO := MAPEAR_VALORES(LISTA_BENEFICIO_IS, COD_CONVER_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;
  -- Mapeamento valores - Categoria de Beneficiario
  BEGIN
       LISTA_MAPEA_CATEGORIA_PESSOA := MAPEAR_VALORES(LISTA_CATEGORIA_PESSOA_IS, COD_CONVER_CATEGORIA_PESSOA);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT > 0 THEN
     RAISE MAPEAMENTO_EXCEPTION;
  END IF;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT = 0 THEN
  -- Verifica se os cÃ³digos mapeados existem na base de dados
  BEGIN
    -- Tipo de Relacionamento
    vCONTADOR_MAPEAMENTO_INVALIDO := 0;
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_TIPO_RELAC.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_TIPO_RELAC
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_RELACIONAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_TIPO_RELAC.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
    END IF;

    -- Estado Civil
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_EST_CIVIL.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_EST_CIVIL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_ESTADO_CIVIL
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_EST_CIVIL.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
    END IF;

    -- Tipo de Logradouro
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_TP_LOGRAD.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_TP_LOGRAD
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_LOGRADOURO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_TP_LOGRAD.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
    END IF;

    -- Tipo de Beneficio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_TIPO_BENEF.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_TIPO_BENEF
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_TIPO_BENEF.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
    END IF;

    -- Motivo Concessao
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CONCES.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CONCES
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CONCESSAO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CONCES.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
    END IF;

    -- Motivo de Cancelamento
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CANCEL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CANCELAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
    END IF;

    -- Beneficio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_BENEFICIO.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_BENEFICIO
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_BENEFICIO.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
    END IF;

    -- Categoria de Pessoa
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_CAT_PESSOA.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_CAT_PESSOA
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_CATEGORIA_PESSOA
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_CAT_PESSOA.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
    END IF;

    IF LISTA_MAPEAMENTOS_INVALIDOS.count() > 0 THEN
       for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
       loop
           IF i = 1 THEN
              TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           ELSE
              TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           END IF;
       end loop;

       raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. HA PRESENÃ¿A DE CODIGO INEXISTENTES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
     END IF;
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;
  END IF;

  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN

     for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
     loop
         IF i = 1 THEN
            TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         ELSE
            TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         END IF;
     end loop;

     raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
  WHEN OTHERS THEN
     raise_application_error (-20001,'ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES.' ||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
  END;

-- FIM MAPEAMENTO
------------------------------------------

    -- Verifica se o codigo de empresa informado e valido
    IF PCODIGO_EMPRESA IS NULL THEN
       raise_application_error (-20001,'CODIGO_EMPRESA NAO INFORMADO.');
    END IF;

    BEGIN
         vCODIGO_EMPRESA := null;
         select CODIGO into vCODIGO_EMPRESA from RHORGA_EMPRESA where CODIGO = PCODIGO_EMPRESA;

         IF vCODIGO_EMPRESA IS NULL THEN
            raise_application_error (-20001,'CODIGO_EMPRESA INVALIDO.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O CODIGO_EMPRESA');
    END;

    BEGIN
         vID_ARQUIVO := null;
         select ID_ARQUIVO, SITUACAO into vID_ARQUIVO, vSITUACAO_ARQUIVO from RHPBH_ARQUIVO where ID_ARQUIVO = PID_ARQUIVO;

         IF vID_ARQUIVO IS NULL THEN
            raise_application_error (-20001,'ID ARQUIVO INVALIDO.');
         END IF;

         IF vSITUACAO_ARQUIVO NOT IN ('00','01','02','03','04','05','06','07') THEN
            raise_application_error (-20001,'O ARQUIVO INFORMADO ESTA COM SITUACAO INVALIDA. ENTRE EM CONTATO COM O SUPORTE TECNICO DA PBH.');
         END IF;

         CASE WHEN vSITUACAO_ARQUIVO = '07' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA COM PROCESSAMENTO JÃ¿ CONCLUIDO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO = '01' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA CANCELADO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO in ('02','04','06') THEN raise_application_error (-20002,'O ARQUIVO INFORMADO JÃ¿ ESTÃ¿ EM PROCESSAMENTO E NAO PODE HAVER PROCESSAMENTOS COMCOMITANTES PARA O MESMO ARQUIVO.');
              WHEN vSITUACAO_ARQUIVO = '00' THEN
                   IF PACAO NOT IN (1,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO E COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO CARREGADO E AS ACOES PERMITIDA SAO 1 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '03' THEN
                   IF PACAO NOT IN (2,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO E COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO VALIDACAO DE LEIAUTE PROCESSADA E AS ACOES PERMITIDA SAO 2 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '05' THEN
                   IF PACAO NOT IN (3,4,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO E COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO PROCESSADO E AS ACOES PERMITIDA SAO 3 ou 10.');
                   END IF;
              ELSE
                  NULL;
         END CASE;

         PR_SET_SITUACAO_PROCESSAMENTO(vSITUACAO_ARQUIVO);
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O ARQUIVO COM O ID_ARQUIVO INFORMADO.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '70');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '71');
/*
    -- Verifica se a data de referência informada e valida
    IF PANO_MES_REFERENCIA IS NULL THEN
      raise_application_error (-20001,'ANO_MES_REFERENCIA NAO INFORMADO.');
    END IF;

    -- Verifica se a data de corte informada e valida
    -- A data de corte deve ser menor que data corrente
    IF PDATA_CORTE IS NULL THEN
      raise_application_error (-20001,'DATA DE CORTE NAO INFORMADA.');
    ELSE
        IF PDATA_CORTE > TRUNC(sysdate) THEN
           raise_application_error (-20001,'DATA DE CORTE NAO PODE SER DATA FUTURA. DEVE SER MENOR QUE DATA CORRENTE.');
        END IF;

        IF TO_CHAR(PDATA_CORTE, 'MMYYYY') <> TO_CHAR(PANO_MES_REFERENCIA, 'MMYYYY') THEN
           raise_application_error (-20001,'DATA DE CORTE DEVE SER DENTRO DO MESMO ANO E MES DE REFERENCIA DO MOVIMENTO.');
        END IF;
    END IF;
*/
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '72');

    -- Verifica se ha algum arquivo de concessoes de plano de saude
    -- a ser processado
    BEGIN
         IF PACAO = 1 THEN
             VCONTADOR := null;
             select count(1) into VCONTADOR
               from RHPBH_ARQUIVO
              where CODIGO_EMPRESA = PCODIGO_EMPRESA
                and TIPO_ARQUIVO = ARQUIVO_CONCESSOES
                and ID_ARQUIVO = PID_ARQUIVO
                and SITUACAO in ('00');

             IF VCONTADOR = 0 THEN
                raise_application_error (-20002,'NAO EXISTE ARQUIVO DE CONCESSAO DE PLANO DE SAUDE A SER PROCESSADO PARA OS PARAMETROS INFORMADOS.');
             END IF;
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO EXISTE ARQUIVO DE CONCESSAO DE PLANO DE SAUDE A SER PROCESSADO PARA OS PARAMETROS INFORMADOS.');
    END;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '73');

    -- VALIDAR LEIAUTE ARQUIVO
    IF PACAO in (1, 10) THEN
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = ARQUIVO_CONCESSOES
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('00')
         order by ID_ARQUIVO)
         loop
            PR_SET_SITUACAO_PROCESSAMENTO('02');
            PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

            BEGIN
                PR_VALIDAR_LEIAUTE_ARQUIVO (C1.ID_ARQUIVO);
            EXCEPTION
            WHEN OTHERS THEN
                 raise_application_error (-20002,'ERRO AO TENTAR VALIDAR O LEIAUTE DO ARQUIVO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

         end loop;

         PR_SET_SITUACAO_PROCESSAMENTO('03');
         PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
         PR_ATUALIZAR_SITUACAO_REGISTR0;

         commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DIRF. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '74');

    IF PACAO in (2, 10) THEN
    -- PROCESSAR ARQUIVO
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = ARQUIVO_CONCESSOES
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('03', '05')
         order by ID_ARQUIVO)
         loop

            BEGIN

            PR_SET_SITUACAO_PROCESSAMENTO('04');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

             BEGIN
                delete from RHPBH_PS_CONCESSAO where ID_ARQUIVO = C1.ID_ARQUIVO;
             EXCEPTION
             WHEN OTHERS THEN
                NULL;
             END;

             BEGIN
                  insert into RHPBH_PS_CONCESSAO(
                  ID_ARQUIVO,
                  NUMERO_LINHA,
                  IDENTIFICADOR_ARQUIVO,
                  DATA_HORA_GERACAO_ARQUIVO,
                  SEQUENCIAL_REGISTRO,
                  TIPO_OPERACAO,
                  CODIGO_EMPRESA,
                  TIPO_CONTRATO,
                  CODIGO_CONTRATO,
                  CPF,
                  CODIGO_ANS_FORNECEDOR,
                  CODIGO_BENEFICIO,
                  CATEGORIA_BENEFICIARIO,
                  ORDEM_DEPENDENTE,
                  MOTIVO_CONCESSAO,
                  DATA_CONCESSAO,
                  MOTIVO_CANCELAMENTO,
                  DATA_CANCELAMENTO,
                  OBSERVACAO,
                  NUMERO_CARTEIRA,
                  NUMERO_PROTOCOLO,
                  DATA_FIM_EXCECAO_DEPENDENCIA,
                  EXCECAO_DEPENDENCIA,
                  DATA_CADASTRAMENTO
                  )
                  (
                        select
                        ID_ARQUIVO,
                        NUMERO_LINHA,
                        IDENTIFICADOR_ARQUIVO,
                        TO_DATE(DATA_HORA_GERACAO_ARQUIVO,'DD/MM/YYYY HH24:MI:SS') AS DATA_HORA_GERACAO_ARQUIVO,
                        SEQUENCIAL_REGISTRO,
                        TIPO_OPERACAO,
                        CODIGO_EMPRESA,
                        '0001' AS TIPO_CONTRATO,
                        LPAD(TRIM(CODIGO_CONTRATO),15,'0') AS CODIGO_CONTRATO,
                        CPF,
                        REGISTRO_ANS,
                        CODIGO_BENEFICIO,
                        CATEGORIA_BENEFICIARIO,
                        ORDEM_DEPENDENCIA,
                        TRIM(MOTIVO_CONCESSAO) AS MOTIVO_CONCESSAO,
                        TRUNC(TO_DATE(DATA_CONCESSAO,'DD/MM/YYYY')) AS DATA_CONCESSAO,
                        TRIM(MOTIVO_CANCELAMENTO) AS MOTIVO_CANCELAMENTO,
                        CASE WHEN DATA_CANCELAMENTO = '00000000' THEN NULL
                             WHEN TRIM(DATA_CANCELAMENTO) IS NULL THEN NULL
                             ELSE TRUNC(TO_DATE(DATA_CANCELAMENTO,'DD/MM/YYYY'))
                         END AS DATA_CANCELAMENTO,
                        TRIM(OBSERVACAO) AS OBSERVACAO,
                        TRIM(NUMERO_CARTEIRA) AS NUMERO_CARTEIRA,
                        TRIM(NUMERO_PROTOCOLO) AS NUMERO_PROTOCOLO,
                        CASE WHEN DATA_FIM_EXCECAO_DEPENDENCIA = '00000000' THEN NULL
                             WHEN TRIM(DATA_FIM_EXCECAO_DEPENDENCIA) IS NULL THEN NULL
                             ELSE TRUNC(TO_DATE(DATA_FIM_EXCECAO_DEPENDENCIA,'DD/MM/YYYY'))
                         END AS DATA_FIM_EXCECAO_DEPENDENCIA,
                        EXCECAO_DEPENDENCIA,
                        TO_DATE(DATA_CADASTRAMENTO,'DD/MM/YYYY HH24:MI:SS') AS DATA_CADASTRAMENTO
                  from VW_ARQUIVO_0001
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO
                   and SITUACAO_LINHA = '00'
                );
                COMMIT;
                dbms_output.put_line('PASSO COMMIT');

                               select max(SITUACAO_ARQUIVO) into VCONTADOR
                  from (select * from VW_ARQUIVO_0001)
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;


                select count(1) into VCONTADOR
                  from RHPBH_PS_CONCESSAO
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;

             EXCEPTION
             WHEN OTHERS THEN
             dbms_output.put_line('ERRO AO TENTAR INCLUIR RHPBH_PS_CONCESSAO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
             NULL;
             END;
                --dbms_output.put_line('PASSO P3');

            EXCEPTION
            WHEN OTHERS THEN
               --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
               raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE CONCESSAO DE PLANO DE SAUDE. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            -- Regra 1
            -- Valida Sequencial do arquivo
            for R2 in (
                select *
                 from RHPBH_PS_CONCESSAO CS
                where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and NUMERO_LINHA <> SEQUENCIAL_REGISTRO
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_SEQUENCIAL_REG_INVALIDO, 'SEQUENCIAL_REGISTRO = '||R2.SEQUENCIAL_REGISTRO);
            end loop;

            vIDENTIFICADOR_REGRA := '1';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 2
            -- Valida Data Hora Geracao Arquivo
            for R2 in (
                select *
                 from RHPBH_PS_CONCESSAO CS
                where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and DATA_HORA_GERACAO_ARQUIVO <> (
                select DATA_HORA_GERACAO_ARQUIVO
                 from RHPBH_PS_CONCESSAO AUX
                where AUX.CODIGO_EMPRESA = CS.CODIGO_EMPRESA
                  and AUX.ID_ARQUIVO = CS.ID_ARQUIVO
                  and AUX.NUMERO_LINHA = 1
                  )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_GERACAO_ARQUIVO_DIVERGENTE, 'DATA_HORA_GERACAO_ARQUIVO = '||R2.DATA_HORA_GERACAO_ARQUIVO);
            end loop;

            vIDENTIFICADOR_REGRA := '2';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');


            -- Regra 3
            -- Valida Identificador do arquivo
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.IDENTIFICADOR_ARQUIVO <> ARQUIVO_CONCESSOES
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_IDENT_ARQUIVO_INVALIDO, 'IDENTIFICADOR_ARQUIVO = '||R2.IDENTIFICADOR_ARQUIVO);
            end loop;

            vIDENTIFICADOR_REGRA := '3';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 4
            -- Não considerar os servidores municipalizados
            --
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CODIGO_CONTRATO IN ('000000000000699', '000000000011399', '000000000011747')
              and codigo_empresa='0001'
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CONTRATO_MUNICIPALIZADO, 'CONTRATO MUNICIPALIZADO = '||R2.CODIGO_CONTRATO);
            end loop;

            vIDENTIFICADOR_REGRA := '4';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 5
            -- Validar codigo do Beneficio
            --
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CODIGO_BENEFICIO not member (LISTA_MAPEA_BENEFICIO)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_BENEFICIO_INVALIDO, 'CODIGO_BENEFICIO = '||R2.CODIGO_BENEFICIO);
            end loop;

            vIDENTIFICADOR_REGRA := '5';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 6
            -- Valida tipo de operação
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.TIPO_OPERACAO NOT IN('I','A','E')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'OPERACAO = '||R2.TIPO_OPERACAO);
            end loop;

            vIDENTIFICADOR_REGRA := '6';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 7
            -- Valida Categoria de beneficiario
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.CATEGORIA_BENEFICIARIO not member (LISTA_MAPEA_CATEGORIA_PESSOA)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'CATEGORIA_BENEFICIARIO = '||R2.CATEGORIA_BENEFICIARIO);
            end loop;

            vIDENTIFICADOR_REGRA := '7';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 8
            -- Valida Motivo Concessão
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.MOTIVO_CONCESSAO IS NOT NULL
                  and CS.MOTIVO_CONCESSAO not member (LISTA_MAPEA_MOTIVO_CONCESSAO)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'MOTIVO_CONCESSAO = '||R2.MOTIVO_CONCESSAO);
            end loop;

            vIDENTIFICADOR_REGRA := '8';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 9
            -- Valida Motivo Cancelamento
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.MOTIVO_CANCELAMENTO IS NOT NULL
                  and CS.MOTIVO_CANCELAMENTO not member (LISTA_MAPEA_MOTIVO_CANCEL)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'MOTIVO_CANCELAMENTO = '||R2.MOTIVO_CANCELAMENTO);
            end loop;

            vIDENTIFICADOR_REGRA := '9';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 10
            -- Valida data concessão maior que data corrente
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CS.DATA_CONCESSAO > sysdate
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DATA_INICIAL_MENOR_PERMIT, 'DATA_CONCESSAO = ' || R2.DATA_CONCESSAO);
            end loop;

            vIDENTIFICADOR_REGRA := '10';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 11
            -- Valida código do beneficio com registro ANS
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and not exists(
                select * from RHBENF_BENEFICIO, RHORGA_FORNECEDOR
                 where RHBENF_BENEFICIO.ENTIDADE_FORNECED = RHORGA_FORNECEDOR.CODIGO
                   and RHORGA_FORNECEDOR.REGISTRO_ANS IS NOT NULL
                   and RHORGA_FORNECEDOR.REGISTRO_ANS in (343889,351563,304484,359017)
                   and RHBENF_BENEFICIO.COD_TIPO_BENEFICIO in ('0005','0006')
                   and TO_NUMBER(RHORGA_FORNECEDOR.REGISTRO_ANS) = TO_NUMBER(CS.CODIGO_ANS_FORNECEDOR)
                   and RHBENF_BENEFICIO.CODIGO = CS.CODIGO_BENEFICIO

              )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DIVERGENCIA_BENEFICIO_ANS, 'DIVERGENCIA BENEFICIO E REGISTRO ANS (CODIGO_ANS_FORNECEDOR) = '||R2.CODIGO_ANS_FORNECEDOR || ' - ' || ' CODIGO_BENEFICIO = ' || R2.CODIGO_BENEFICIO);
            end loop;

            vIDENTIFICADOR_REGRA := '11';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 12
            -- Valida Número carteira já existente
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and TIPO_OPERACAO = 'I'
              and exists(
                select * from RHBENF_CONCESSOES
                 where RHBENF_CONCESSOES.CODIGO_EMPRESA = CS.CODIGO_EMPRESA
                   and RHBENF_CONCESSOES.C_LIVRE_DESCR08 = CS.NUMERO_CARTEIRA
                   AND  RHBENF_CONCESSOES.data_cancelamento  IS NULL

              )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_NUM_CARTEIRA_JA_EXISTENTE, 'NUMERO_CARTEIRA = ' || R2.NUMERO_CARTEIRA);
            end loop;

            vIDENTIFICADOR_REGRA := '12';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

/*
            -- Regra 13
            -- Valida Informações para exclusão (Cancelamento de concessão)
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CS.CATEGORIA_BENEFICIARIO <> '0004'
              and CS.ORDEM_DEPENDENTE <> '00'

            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_VALOR_ZERADO, 'BENEFICIARIO NAO DEPENDENTE. ORDEM_DEPENDENTE = '||R2.ORDEM_DEPENDENTE);
            end loop;

            vIDENTIFICADOR_REGRA := '13';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

*/
            -- Regra 14
            -- Valida registros duplicados contidos no arquivo
            -- considerando empresa, operação, contrato e verba
            for R2 in (
            select * from RHPBH_PS_CONCESSAO where TIPO_OPERACAO||CODIGO_EMPRESA||CODIGO_CONTRATO||NUMERO_CARTEIRA in(
            select TIPO_OPERACAO||CODIGO_EMPRESA||CODIGO_CONTRATO||NUMERO_CARTEIRA
             from RHPBH_PS_CONCESSAO CS
            where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
            group by TIPO_OPERACAO||CODIGO_EMPRESA||CODIGO_CONTRATO||NUMERO_CARTEIRA
            having count(1) > 1
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DUPLICIDADE_REGISTRO, 'CODIGO_CONTRATO = '||R2.CODIGO_CONTRATO || ';' ||
                                                                                                                                            'NUMERO_CARTEIRA = '||R2.NUMERO_CARTEIRA || ';' ||
                                                                                                                                            'OPERACAO = '||R2.TIPO_OPERACAO                                                                                                                                            );
            end loop;

            vIDENTIFICADOR_REGRA := '14';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 15
            -- Valida codigo da empresa
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where ID_ARQUIVO = C1.ID_ARQUIVO
              and not exists(
            select CODIGO from RHORGA_EMPRESA where CODIGO = CS.CODIGO_EMPRESA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_EMPRESA_INVALIDO, R2.CODIGO_EMPRESA);
            end loop;

            vIDENTIFICADOR_REGRA := '15';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 16
            -- Valida codigo do Contrato
            for R2 in (
            select * from RHPBH_PS_CONCESSAO CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and CODIGO_CONTRATO NOT IN('000000000000699', '000000000011399', '000000000011747')
               and not exists(
            select CODIGO_CONTRATO from RHPESS_CONTR_MEST
             where CODIGO_EMPRESA = CS.CODIGO_EMPRESA
               and CODIGO_CONTRATO = CS.CODIGO_CONTRATO
               AND TIPO_CONTRATO=CS.TIPO_CONTrato
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_CONTRATO_INVALIDO, R2.CODIGO_CONTRATO);
            end loop;

            vIDENTIFICADOR_REGRA := '16';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 17
            -- Valida Excecao de Dependencia
            for R2 in (
                select * from RHPBH_PS_CONCESSAO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.EXCECAO_DEPENDENCIA NOT IN('0','1','2')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_EXCECAO_DEPEND_INVALIDA, 'EXCECAO DEPENDENCIA = '||R2.EXCECAO_DEPENDENCIA);
            end loop;

            vIDENTIFICADOR_REGRA := '17';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');


            -- Regra 18
            -- Valida Ordem de dependencia nao conforme
            -- Mesmo CPF com informações divergentes
            for R2 in (
                select * from RHPBH_PS_CONCESSAO
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and TIPO_OPERACAO in ('I','A')
                  and CODIGO_CONTRATO||CPF in (
                  select CODIGO_CONTRATO||CPF from(
                select CODIGO_EMPRESA, CODIGO_CONTRATO,CPF, count(1) from(
                select CODIGO_EMPRESA, CODIGO_CONTRATO, CPF, CATEGORIA_BENEFICIARIO, ORDEM_DEPENDENTE
                  from RHPBH_PS_CONCESSAO
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and TIPO_OPERACAO in ('I','A')
                   group by CODIGO_EMPRESA, CODIGO_CONTRATO, CPF, CATEGORIA_BENEFICIARIO, ORDEM_DEPENDENTE
                ) group by CODIGO_EMPRESA, CODIGO_CONTRATO, CPF
                having count(1) > 1
                )
                )
                union
                select * from RHPBH_PS_CONCESSAO
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and TIPO_OPERACAO in ('I','A')
                  and CODIGO_CONTRATO||ORDEM_DEPENDENTE in (
                  select CODIGO_CONTRATO||ORDEM_DEPENDENTE from(
                select CODIGO_EMPRESA, CODIGO_CONTRATO,ORDEM_DEPENDENTE, count(1) from(
                select CODIGO_EMPRESA, CODIGO_CONTRATO, CPF, CATEGORIA_BENEFICIARIO, ORDEM_DEPENDENTE
                  from RHPBH_PS_CONCESSAO
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and TIPO_OPERACAO in ('I','A')
                   group by CODIGO_EMPRESA, CODIGO_CONTRATO, CPF, CATEGORIA_BENEFICIARIO, ORDEM_DEPENDENTE
                ) group by CODIGO_EMPRESA, CODIGO_CONTRATO, ORDEM_DEPENDENTE
                having count(1) > 1
                )
                )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_ORDEM_DEPENDENCIA_INVALIDA, 'ORDEM DEPENDENCIA = '||R2.ORDEM_DEPENDENTE);
            end loop;

            vIDENTIFICADOR_REGRA := '18';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');



            PR_SET_SITUACAO_PROCESSAMENTO('05');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

         end loop;

         commit;

         -- Atualizar a situacao dos registros
         --PR_ATUALIZAR_SITUACAO_REGISTR0;

    EXCEPTION
    WHEN OTHERS THEN
       ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DE CONSIGNACAO. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

END IF; -- FIM PACAO = 2

IF PACAO in (2, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('04');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    FOR C_INC in(

        select CS.*, CASE WHEN CS.CODIGO_CONTRATO MEMBER LISTA_MUNICIPALIZADOS THEN 'S' ELSE 'N' END AS MUNICIPALIZADO
          from RHPBH_PS_CONCESSAO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
         order by CS.NUMERO_LINHA
    )
    loop

    -- CPF do Servidor deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CPF);

    IF NOT vCPF_VALIDO THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_INVALIDO, C_INC.CPF);
    ELSE

        -- CPF deve existir na base de dados de pessoa
        BEGIN
             IF C_INC.CATEGORIA_BENEFICIARIO = '0001' THEN
                BEGIN
                select P.CODIGO, P.DATA_NASCIMENTO, trunc(months_between(sysdate, P.DATA_NASCIMENTO)/12)
                  into vCODIGO_PESSOA_BENEFICIARIO, vCONC_DATA_NASC_BENEFICIARIO, vCONC_IDADE_BENEFICIARIO
                  from RHPESS_PESSOA P, RHPESS_CONTRATO C
                 where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                   and P.CPF = C_INC.CPF
                   and P.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                   and P.CODIGO = C.CODIGO_PESSOA
                   and C.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
                   and C.CODIGO = C_INC.CODIGO_CONTRATO
                   and p.dt_termino is null
                   and C.ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                 from RHPESS_CONTRATO AUX
                                                where AUX.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                                                  and AUX.TIPO_CONTRATO = C.TIPO_CONTRATO
                                                  and AUX.CODIGO = C.CODIGO
                                                  and AUX.ANO_MES_REFERENCIA <= sysdate
                                              )
                   ;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO, C_INC.CPF || '|' || 'CATEGORIA DE BEENFICIARIO = ' || C_INC.CATEGORIA_BENEFICIARIO || '|' || 'CODIGO_CONTRATO = ' || C_INC.CODIGO_CONTRATO);
                    WHEN TOO_MANY_ROWS THEN
                         BEGIN
                            select P.CODIGO, P.DATA_NASCIMENTO, trunc(months_between(sysdate, P.DATA_NASCIMENTO)/12)
                              into vCODIGO_PESSOA_BENEFICIARIO, vCONC_DATA_NASC_BENEFICIARIO, vCONC_IDADE_BENEFICIARIO
                              from RHPESS_PESSOA P, RHPESS_CONTRATO C
                             where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                               and P.CPF = C_INC.CPF
                               and P.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                               and P.CODIGO = C.CODIGO_PESSOA
                               and C.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
                               and p.dt_termino is null
                               and C.ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                             from RHPESS_CONTRATO AUX
                                                            where AUX.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                                                              and AUX.TIPO_CONTRATO = C.TIPO_CONTRATO
                                                              and AUX.CODIGO = C.CODIGO
                                                              and AUX.ANO_MES_REFERENCIA <= sysdate
                                                          );
                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO, C_INC.CPF || '|' || 'CATEGORIA DE BEENFICIARIO = ' || C_INC.CATEGORIA_BENEFICIARIO || '|' || 'CODIGO_CONTRATO = ' || C_INC.CODIGO_CONTRATO || '|' || 'REGISTROS DUPLICADOS');
                        WHEN OTHERS THEN
                             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO, C_INC.CPF);
                        END;
                    WHEN OTHERS THEN
                         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DUPLICIDADE_REGISTRO, C_INC.CPF);
                    END;
             ELSE
                BEGIN
                select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12)
                  into vCODIGO_PESSOA_BENEFICIARIO, vCONC_DATA_NASC_BENEFICIARIO, vCONC_IDADE_BENEFICIARIO
                  from RHPESS_PESSOA P
                 where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                   and P.CPF = C_INC.CPF
                   and p.dt_termino is null;
                EXCEPTION
                WHEN NO_DATA_FOUND THEN
                     GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,  C_INC.CPF || '|' || 'CATEGORIA DE BEENFICIARIO = ' || C_INC.CATEGORIA_BENEFICIARIO || '|' || 'CODIGO_CONTRATO = ' || C_INC.CODIGO_CONTRATO);
                WHEN TOO_MANY_ROWS THEN
                         BEGIN
                         select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12)
                            into vCODIGO_PESSOA_BENEFICIARIO, vCONC_DATA_NASC_BENEFICIARIO, vCONC_IDADE_BENEFICIARIO
                            from RHPESS_PESSOA P
                           where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                             and P.CPF = C_INC.CPF
                             and p.dt_termino is null
                             and P.CODIGO = (select min(CODIGO)
                                               from RHPESS_PESSOA PP
                                              where PP.CODIGO_EMPRESA = P.CODIGO_EMPRESA
                                                and PP.CPF = P.CPF
                                                and pp.dt_termino is null
                                             );
                        EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,  C_INC.CPF || '|' || 'CATEGORIA DE BEENFICIARIO = ' || C_INC.CATEGORIA_BENEFICIARIO || '|' || 'CODIGO_CONTRATO = ' || C_INC.CODIGO_CONTRATO || '|' || 'REGISTROS DUPLICADOS');
                        WHEN OTHERS THEN
                             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO, C_INC.CPF);
                        END;
                WHEN OTHERS THEN
                     GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO, C_INC.CPF);
                END;

                 BEGIN
                    select MIN(TP_RELACIONAMENTO)
                      into vTIPO_RELACIONAMENTO
                      from RHPESS_RL_PESS_PES PP
                     where PP.COD_EMPRESA = C_INC.CODIGO_EMPRESA
                       and PP.COD_PESSOA_RELAC in (select CODIGO from RHPESS_PESSOA
                                                    where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                                                      and CPF = C_INC.CPF
                                                      and dt_termino is null)
                       and PP.COD_PESSOA = (
                                           select CODIGO_PESSOA
                                             from RHPESS_CONTRATO A
                                            where A.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                                              and A.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
                                              and A.CODIGO = C_INC.CODIGO_CONTRATO
                                              and A.ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                                            from RHPESS_CONTRATO B
                                                                           where B.CODIGO_EMPRESA = A.CODIGO_EMPRESA
                                                                             and B.TIPO_CONTRATO = A.TIPO_CONTRATO
                                                                             and B.CODIGO = A.CODIGO
                                                                          )
                                           )
                       and TP_RELACIONAMENTO member LISTA_MAPEA_TIPO_RELACI;
                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                       --raise_application_error (-20003,'DEPENDENTE SEM RELACIOAMENTO PESSOA PESSOA COM O TITULAR: ' || REGISTRO_CONCESSAO.CODIGO_EMPRESA||REGISTRO_CONCESSAO.CODIGO_CONTRATO||REGISTRO_CONCESSAO.CPF||vCODIGO_PESSOA);
                      -- GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'DEPENDENTE SEM RELACIOAMENTO PESSOA PESSOA COM O TITULAR', REGISTRO_CONCESSAO.CODIGO_EMPRESA||REGISTRO_CONCESSAO.CODIGO_CONTRATO||REGISTRO_CONCESSAO.CPF||vCODIGO_PESSOA);
                       NULL;
                  WHEN TOO_MANY_ROWS THEN
                       --raise_application_error (-20003,'ENCONTRADO MAIS DE UM RELACIOAMENTO PESSOA PESSOA DO DEPENDENTE COM O TITULAR: ' || REGISTRO_CONCESSAO.CODIGO_EMPRESA||REGISTRO_CONCESSAO.CODIGO_CONTRATO||REGISTRO_CONCESSAO.CPF||vCODIGO_PESSOA);
                       --GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'ENCONTRADO MAIS DE UM RELACIOAMENTO PESSOA PESSOA DO DEPENDENTE COM O TITULAR', REGISTRO_CONCESSAO.CODIGO_EMPRESA||REGISTRO_CONCESSAO.CODIGO_CONTRATO||REGISTRO_CONCESSAO.CPF||vCODIGO_PESSOA);
                       NULL;
                  WHEN OTHERS THEN
                       --raise_application_error (-20003,'ERRO AO TENTAR RECUPERAR RELACIOAMENTO PESSOA PESSOA COM O TITULAR: ' || REGISTRO_CONCESSAO.CODIGO_EMPRESA||REGISTRO_CONCESSAO.CODIGO_CONTRATO||REGISTRO_CONCESSAO.CPF||vCODIGO_PESSOA);
                       --GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'ERRO AO TENTAR RECUPERAR RELACIOAMENTO PESSOA PESSOA COM O TITULAR', REGISTRO_CONCESSAO.CODIGO_EMPRESA||REGISTRO_CONCESSAO.CODIGO_CONTRATO||REGISTRO_CONCESSAO.CPF||vCODIGO_PESSOA);
                       NULL;
                  END;

             END IF;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,  C_INC.CPF || '|' || 'CATEGORIA DE BEENFICIARIO = ' || C_INC.CATEGORIA_BENEFICIARIO || '|' || 'CODIGO_CONTRATO = ' || C_INC.CODIGO_CONTRATO || '|' || 'GERAL');
        WHEN TOO_MANY_ROWS THEN
             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DUPLICIDADE_REGISTRO, C_INC.CPF);
        WHEN OTHERS THEN
             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO, C_INC.CPF);
        END;


    END IF;
    V_DETALHE_0001 := 'codigo_empresa = ' || C_INC.CODIGO_EMPRESA || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = ' || C_INC.CPF || ';' ||
                      'numero_carteira = ' || C_INC.NUMERO_CARTEIRA || ';' ||
                      'data_concessao = ' || C_INC.DATA_CONCESSAO;

    V_DETALHE_0002 := 'codigo_empresa = ' || C_INC.CODIGO_EMPRESA || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = ' || C_INC.CPF || ';' ||
                      'numero_carteira = ' || C_INC.NUMERO_CARTEIRA || ';' ||
                      'data_concessao = ' || C_INC.DATA_CONCESSAO;

    IF C_INC.MUNICIPALIZADO = 'N' THEN
       /*
       IF C_INC.TIPO_OPERACAO = 'I' THEN
       -- Se for o tipo de operação de inclusão, não pode haver concessão de benefício vigente, de mesmo tipo de benefício, para o mesmo contrato
          BEGIN
            vJA_POSSUI_PLANO_SAUDE := 0;

            select count(1)
              into vJA_POSSUI_PLANO_SAUDE
              from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
             where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
               and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
               and CONC.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
               and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
               and CONC.CODIGO_BENEFIC = PESS.CODIGO
               and PESS.CPF = C_INC.CPF
               and CONC.DATA_CANCELAMENTO IS NULL
               and CONC.CODIGO_BENEFICIO = BENF.CODIGO
               and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
               and BENF.COD_TIPO_BENEFICIO = (select BB.COD_TIPO_BENEFICIO
                                                 from RHBENF_BENEFICIO BB
                                               where BB.CODIGO = C_INC.CODIGO_BENEFICIO);

               IF vJA_POSSUI_PLANO_SAUDE > 0 THEN

                   vQTDE_REG_EXCLUSAO_INCLUSAO := 0;
                   BEGIN
                   select COUNT(1)
                     into vQTDE_REG_EXCLUSAO_INCLUSAO
                     from RHPBH_PS_CONCESSAO AUX
                    where AUX.ID_ARQUIVO = C_INC.ID_ARQUIVO
                      and AUX.NUMERO_LINHA <> C_INC.NUMERO_LINHA
                      and AUX.TIPO_OPERACAO <> C_INC.TIPO_OPERACAO
                      and AUX.TIPO_OPERACAO = 'E'
                      and AUX.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                      and AUX.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
                      and AUX.CODIGO_BENEFICIO = C_INC.CODIGO_BENEFICIO
                      and exists(
                      select * from RHBENF_BENEFICIO
                       where CODIGO = AUX.CODIGO_BENEFICIO
                         and
                      ;

                   EXCEPTION
                   WHEN OTHERS THEN
                        vQTDE_REG_EXCLUSAO_INCLUSAO := 0;
                   END;

                   IF vQTDE_REG_EXCLUSAO_INCLUSAO > 0 THEN
                      GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_JA_POSSUI_PLANO_SAUDE,'BENEFICIARIO JÁ POSSUI PLANO DE SAÚDE VIGENTE PARA O BENEFICIO DE TIPO SIMILAR AO BENEFICIO. CPF =  ' || C_INC.CPF || ' BENEFICIO = ' || C_INC.CODIGO_BENEFICIO );
                   END IF;
               END IF;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
               NULL;
          END;
       END IF;
        */
    -- Se for o tipo de operação de alteração, tem que existir concessão de benefício vigente, de mesmo tipo de benefício, para o mesmo contrato e de mesmo número de carteira
    -- Confere se há concessão de benefício para o número de carteira informado.
    BEGIN

      vCONC_CODIGO_CONTRATO := NULL;
      vCONC_CPF_BENEFICIARIO := NULL;
      vCONC_CODIGO_BENEFICIARIO := NULL;
      vCONC_CODIGO_BENEFICIO := NULL;
      vCONC_CATEGORIA_BENEFICIARIO := NULL;
      vCONC_DATA_CANCELAMENTO := NULL;
      vCONC_ORDEM_DEPENDENCIA := NULL;
      vCONC_EXCECAO_DEPENDENCIA := NULL;
      vCONC_DATA_FIM_EXCECAO_DEPEND := NULL;

      select CONC.CODIGO_CONTRATO, PESS.CPF, CONC.CODIGO_BENEFIC, CONC.CODIGO_BENEFICIO, CONC.CATEGORIA_BENEF,
             CONC.DATA_CONCESSAO, CONC.DATA_CANCELAMENTO, CONC.C_LIVRE_SELEC01, CONC.C_LIVRE_SELEC03, CONC.C_LIVRE_DATA11,
             (trunc(months_between(sysdate, PESS.DATA_NASCIMENTO)/12))
        into vCONC_CODIGO_CONTRATO,
             vCONC_CPF_BENEFICIARIO,
             vCONC_CODIGO_BENEFICIARIO,
             vCONC_CODIGO_BENEFICIO,
             vCONC_CATEGORIA_BENEFICIARIO,
             vCONC_DATA_CONCESSAO,
             vCONC_DATA_CANCELAMENTO,
             vCONC_ORDEM_DEPENDENCIA,
             vCONC_EXCECAO_DEPENDENCIA,
             vCONC_DATA_FIM_EXCECAO_DEPEND,
             vCONC_IDADE_BENEFICIARIO
        from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
       where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
         and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
         and CONC.CODIGO_BENEFIC = PESS.CODIGO
         and CONC.CODIGO_BENEFICIO = BENF.CODIGO
         and BENF.COD_TIPO_BENEFICIO member LISTA_MAPEA_TIPO_BENEFICIO
         and CONC.C_LIVRE_DESCR08 = C_INC.NUMERO_CARTEIRA
         and PESS.dt_termino is null;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        vCONC_CODIGO_CONTRATO := NULL;
        vCONC_CPF_BENEFICIARIO := NULL;
        vCONC_CODIGO_BENEFICIARIO := NULL;
        vCONC_CODIGO_BENEFICIO := NULL;
        vCONC_CATEGORIA_BENEFICIARIO := NULL;
        vCONC_DATA_CONCESSAO := NULL;
        vCONC_DATA_CANCELAMENTO := NULL;
        vCONC_ORDEM_DEPENDENCIA := NULL;
        vCONC_EXCECAO_DEPENDENCIA := NULL;
        vCONC_DATA_FIM_EXCECAO_DEPEND := NULL;
    WHEN OTHERS THEN
         NULL;
    END;

    -- Se operação for de alteração ou exclusão e não existir solicitação de movimento
    IF C_INC.TIPO_OPERACAO in ('A','E') AND vCONC_CODIGO_BENEFICIARIO IS NULL THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_NAO_ENCONTRADA,V_DETALHE_0001);
    ELSIF C_INC.TIPO_OPERACAO in ('A','E') AND vCONC_CODIGO_BENEFICIARIO IS NOT NULL THEN

        -- Se operação for de alteração ou exclusão e existir a concessao
        -- e esta tiver contrato diferente
        IF vCONC_CODIGO_CONTRATO <> C_INC.CODIGO_CONTRATO THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_CONTRATO,V_DETALHE_0001 || ' - CODIGO_CONTRATO INFORMADO = ' || C_INC.CODIGO_CONTRATO || ' - CODIGO_CONTRATO RECUPERADO = ' || vCONC_CODIGO_CONTRATO);
        END IF;

        -- Se operação for de alteração ou exclusão e existir a concessao
        -- e esta tiver CPF diferente
        IF vCONC_CPF_BENEFICIARIO <> C_INC.CPF THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_CPF,V_DETALHE_0001 || ' - CPF INFORMADO = ' || C_INC.CPF || ' - CPF RECUPERADO = ' || vCONC_CPF_BENEFICIARIO);
        END IF;

        -- Se operação for de alteração ou exclusão e existir a concessao
        -- e esta tiver código de beneficio diferente
        IF vCONC_CODIGO_BENEFICIO <> C_INC.CODIGO_BENEFICIO THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_BENEFICIO,V_DETALHE_0001 || ' - CODIGO_BENEFICIO INFORMADO = ' || C_INC.CODIGO_BENEFICIO || ' - CODIGO_BENEFICIO RECUPERADO = ' || vCONC_CODIGO_BENEFICIO);
        END IF;

        -- Se operação for de alteração ou exclusão e existir a concessao
        -- e esta tiver data de concessão diferente
        IF vCONC_DATA_CONCESSAO <> C_INC.DATA_CONCESSAO THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRA_DATA,V_DETALHE_0001 || ' - DATA_CONCESSAO INFORMADA = ' || C_INC.DATA_CONCESSAO || ' - DATA_CONCESSAO RECUPERADA = ' || vCONC_DATA_CONCESSAO);
        END IF;

        -- Se operação for de alteração ou exclusão e existir a concessao
        -- e esta já estiver com vigência encerrada
        IF vCONC_DATA_CANCELAMENTO IS NOT NULL and vCONC_DATA_CANCELAMENTO < sysdate THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_JA_CANCELADA,V_DETALHE_0001 || ' - DATA_CANCELAMENTO RECUPERADA = ' || vCONC_DATA_CANCELAMENTO);
        END IF;

        IF C_INC.TIPO_OPERACAO = 'E' THEN


            -- Se a operação for de cancelamento, o motivo do cancelamento e a data de cancelamento devem estar preenchidos
            IF C_INC.MOTIVO_CANCELAMENTO IS NULL THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_MOT_CANCEL_NAO_INFORMADO,V_DETALHE_0001 || ' - DATA_CANCELAMENTO RECUPERADA = ' || vCONC_DATA_CANCELAMENTO);
            END IF;

            IF C_INC.DATA_CANCELAMENTO IS NULL THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DATA_CANCEL_NAO_INFORMADO,V_DETALHE_0001 || ' - DATA_CANCELAMENTO RECUPERADA = ' || vCONC_DATA_CANCELAMENTO);
            END IF;

            -- A data de cancelamento deve ser maior ou igual a data da concessão do benefício
            IF C_INC.DATA_CANCELAMENTO < vCONC_DATA_CONCESSAO THEN
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_JA_CANCELADA,V_DETALHE_0001 || ' - DATA_CANCELAMENTO RECUPERADA = ' || vCONC_DATA_CANCELAMENTO);
            END IF;

            -- A data de cancelamento não pode ser superior à 360 dias
            IF C_INC.DATA_CANCELAMENTO > ADD_MONTHS(sysdate, 12) THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DATA_CANCEL_SUP_360,V_DETALHE_0001 || ' - DATA_CANCELAMENTO RECUPERADA = ' || vCONC_DATA_CANCELAMENTO);
            END IF;
        END IF;

    END IF;

---------------------------

    -- Se a categoria do beneficiário for igual à dependente, e se CPF estiver associado à pessoa com maioridade,
    -- devem estar preenchidos ou o campo de data de fim de escolaridade ou o campo invalidez
    IF C_INC.CATEGORIA_BENEFICIARIO = '0004'
    AND vCONC_IDADE_BENEFICIARIO IS NOT NULL
    AND vCONC_IDADE_BENEFICIARIO > 1800
    AND C_INC.DATA_FIM_EXCECAO_DEPENDENCIA IS NULL
    AND (C_INC.EXCECAO_DEPENDENCIA IS NOT NULL AND C_INC.EXCECAO_DEPENDENCIA <> 0) THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_ORDEM_DEPENDENCIA_INVALIDA,'DEPENDENTE JÁ POSSUI MAIORIDADE. DATA DE FIM DE ESCOLARIDADE OU INDICATIVO DE INVALIDEZ DEVE SER INFORMADA.');
    END IF;

    IF C_INC.TIPO_OPERACAO in ('A','I') THEN
        -- Ordem de dependência
        IF C_INC.CATEGORIA_BENEFICIARIO = '0004' THEN
           IF C_INC.ORDEM_DEPENDENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_ORDEM_DEPENDENCIA_INVALIDA,'CATEGORIA DE BENEFICIARIO DIFERENTE DE DEPENDENTE - ORDEM DE DEPENDENCIA INVALIDA. DEVE SER DIFERENTE DE 00.');
           END IF;
        ELSE
           IF C_INC.ORDEM_DEPENDENTE <> 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_ORDEM_DEPENDENCIA_INVALIDA,'CATEGORIA DE BENEFICIARIO DIFERENTE DE DEPENDENTE - ORDEM DE DEPENDENCIA INVALIDA. DEVE SER 00.');
           END IF;
        END IF;

        -- A data de fim de exceção de dependência deve ser maior ou igual a data atual
        IF C_INC.DATA_FIM_EXCECAO_DEPENDENCIA IS NOT NULL and C_INC.DATA_FIM_EXCECAO_DEPENDENCIA < sysdate THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DATA_EXCECAO_MENOR, 'DATA_FIM_EXCECAO_DEPENDENCIA = ' || C_INC.DATA_FIM_EXCECAO_DEPENDENCIA);
        END IF;

        -- A data fim de exceção de dependência não pode ser superior à 360 dias
        IF C_INC.DATA_FIM_EXCECAO_DEPENDENCIA IS NOT NULL and C_INC.DATA_FIM_EXCECAO_DEPENDENCIA > ADD_MONTHS(sysdate, 12) THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DATA_EXCECAO_SUP_360,'DATA_FIM_EXCECAO_DEPENDENCIA = ' || C_INC.DATA_FIM_EXCECAO_DEPENDENCIA);
        END IF;

        -- Exceção de Dependência e Data Fim de Exceção de Dependência
        IF C_INC.CATEGORIA_BENEFICIARIO in ('0004','0015') THEN
           -- Exceção de Dependência
            IF C_INC.EXCECAO_DEPENDENCIA <> 0 THEN
              IF C_INC.DATA_FIM_EXCECAO_DEPENDENCIA IS NULL THEN
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_DATA_EXCECAO_NAO_INFORMADA,null);
              END IF;
            ELSIF (C_INC.EXCECAO_DEPENDENCIA = 0 AND (C_INC.DATA_FIM_EXCECAO_DEPENDENCIA IS NOT NULL))THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_EXCECAO_DEP_NAO_INFORMADA, null);
            END IF;
        END IF;
    END IF;

---------------------------




    END IF;

    update RHPBH_PS_CONCESSAO
       set CODIGO_PESSOA_BENEFICIARIO = vCODIGO_PESSOA_BENEFICIARIO
     where ID_ARQUIVO = C_INC.ID_ARQUIVO
       and NUMERO_LINHA = C_INC.NUMERO_LINHA;

    IF MOD(vCONTADOR,1000) = 0 THEN
       COMMIT;
    END IF;

    vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;


    vCONTADOR := 0;

    -- Atualizar a situacao dos registros
    PR_ATUALIZAR_SITUACAO_REGISTR0;

    PR_SET_SITUACAO_PROCESSAMENTO('05');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;

IF PACAO in (3, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('06');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    -- #### INICIO OPERACAO EXCLUSAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_CONCESSAO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.TIPO_OPERACAO = 'E'
         order by CS.NUMERO_LINHA
    )
    loop

        -- Finaliza a concessao de plano de saude
        BEGIN
             vQTDE_LINHAS_AFETADAS := CANCELAR_CONCESSAO(C_INC.CODIGO_EMPRESA, C_INC.TIPO_CONTRATO, C_INC.CODIGO_CONTRATO, C_INC.CODIGO_PESSOA_BENEFICIARIO, C_INC.CODIGO_BENEFICIO, C_INC.NUMERO_CARTEIRA, C_INC.DATA_CANCELAMENTO, C_INC.MOTIVO_CANCELAMENTO, C_INC.OBSERVACAO);
             IF vQTDE_LINHAS_AFETADAS = 0 THEN
                GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_EXCLUSAO, 'LINHAS AFETADAS = ' || vQTDE_LINHAS_AFETADAS);
             END IF;

             IF vQTDE_LINHAS_AFETADAS = 1 THEN
                GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_EXCLUSAO, NULL);
             END IF;

        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR EXCLUIR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM
              || C_INC.CODIGO_EMPRESA || C_INC.TIPO_CONTRATO || C_INC.CODIGO_CONTRATO || C_INC.CODIGO_PESSOA_BENEFICIARIO || C_INC.CODIGO_BENEFICIO || C_INC.NUMERO_CARTEIRA || C_INC.DATA_CANCELAMENTO
              );
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO EXCLUSAO ####

    -- #### INICIO OPERACAO ALTERACAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_CONCESSAO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.TIPO_OPERACAO = 'A'
         order by CS.NUMERO_LINHA
    )
    loop

        BEGIN
            REG_PBH_CS.ID_ARQUIVO                    := C_INC.ID_ARQUIVO;
            REG_PBH_CS.NUMERO_LINHA                  := C_INC.NUMERO_LINHA;
            REG_PBH_CS.IDENTIFICADOR_ARQUIVO         := C_INC.IDENTIFICADOR_ARQUIVO;
            REG_PBH_CS.DATA_HORA_GERACAO_ARQUIVO     := C_INC.DATA_HORA_GERACAO_ARQUIVO;
            REG_PBH_CS.SEQUENCIAL_REGISTRO           := C_INC.SEQUENCIAL_REGISTRO;
            REG_PBH_CS.TIPO_OPERACAO                 := C_INC.TIPO_OPERACAO;
            REG_PBH_CS.CODIGO_EMPRESA                := C_INC.CODIGO_EMPRESA;
            REG_PBH_CS.CODIGO_CONTRATO               := C_INC.CODIGO_CONTRATO;
            REG_PBH_CS.CPF                           := C_INC.CPF;
            REG_PBH_CS.CODIGO_ANS_FORNECEDOR         := C_INC.CODIGO_ANS_FORNECEDOR;
            REG_PBH_CS.CODIGO_BENEFICIO              := C_INC.CODIGO_BENEFICIO;
            REG_PBH_CS.CATEGORIA_BENEFICIARIO        := C_INC.CATEGORIA_BENEFICIARIO;
            REG_PBH_CS.ORDEM_DEPENDENTE              := C_INC.ORDEM_DEPENDENTE;
            REG_PBH_CS.MOTIVO_CONCESSAO              := C_INC.MOTIVO_CONCESSAO;
            REG_PBH_CS.DATA_CONCESSAO                := C_INC.DATA_CONCESSAO;
            REG_PBH_CS.MOTIVO_CANCELAMENTO           := C_INC.MOTIVO_CANCELAMENTO;
            REG_PBH_CS.DATA_CANCELAMENTO             := C_INC.DATA_CANCELAMENTO;
            REG_PBH_CS.OBSERVACAO                    := C_INC.OBSERVACAO;
            REG_PBH_CS.NUMERO_CARTEIRA               := C_INC.NUMERO_CARTEIRA;
            REG_PBH_CS.NUMERO_PROTOCOLO              := C_INC.NUMERO_PROTOCOLO;
            REG_PBH_CS.DATA_FIM_EXCECAO_DEPENDENCIA  := C_INC.DATA_FIM_EXCECAO_DEPENDENCIA;
            REG_PBH_CS.EXCECAO_DEPENDENCIA           := C_INC.EXCECAO_DEPENDENCIA;
            REG_PBH_CS.DATA_CADASTRAMENTO            := C_INC.DATA_CADASTRAMENTO;
            REG_PBH_CS.TIPO_CONTRATO                 := C_INC.TIPO_CONTRATO;
            REG_PBH_CS.CODIGO_PESSOA_BENEFICIARIO    := C_INC.CODIGO_PESSOA_BENEFICIARIO;

             -- Finaliza a solicitação de movimento, mantendo o histórico do valor da verba que foi alterado
             vQTDE_LINHAS_AFETADAS := ALTERAR_CONCESSAO(REG_PBH_CS);

             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_ALTERACAO, NULL);
        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20001,'TENTATIVA DE INCLUSÃ¿O DE REGITROS JÃ¿ CADASTRADOS');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20002,'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR ALTERAR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO ALTERACAO ####

    -- #### INICIO OPERACAO INCLUSAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_CONCESSAO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.TIPO_OPERACAO = 'I'
         order by CS.NUMERO_LINHA
    )
    loop

        BEGIN
            REG_PBH_CS.ID_ARQUIVO                    := C_INC.ID_ARQUIVO;
            REG_PBH_CS.NUMERO_LINHA                  := C_INC.NUMERO_LINHA;
            REG_PBH_CS.IDENTIFICADOR_ARQUIVO         := C_INC.IDENTIFICADOR_ARQUIVO;
            REG_PBH_CS.DATA_HORA_GERACAO_ARQUIVO     := C_INC.DATA_HORA_GERACAO_ARQUIVO;
            REG_PBH_CS.SEQUENCIAL_REGISTRO           := C_INC.SEQUENCIAL_REGISTRO;
            REG_PBH_CS.TIPO_OPERACAO                 := C_INC.TIPO_OPERACAO;
            REG_PBH_CS.CODIGO_EMPRESA                := C_INC.CODIGO_EMPRESA;
            REG_PBH_CS.CODIGO_CONTRATO               := C_INC.CODIGO_CONTRATO;
            REG_PBH_CS.CPF                           := C_INC.CPF;
            REG_PBH_CS.CODIGO_ANS_FORNECEDOR         := C_INC.CODIGO_ANS_FORNECEDOR;
            REG_PBH_CS.CODIGO_BENEFICIO              := C_INC.CODIGO_BENEFICIO;
            REG_PBH_CS.CATEGORIA_BENEFICIARIO        := C_INC.CATEGORIA_BENEFICIARIO;
            REG_PBH_CS.ORDEM_DEPENDENTE              := C_INC.ORDEM_DEPENDENTE;
            REG_PBH_CS.MOTIVO_CONCESSAO              := C_INC.MOTIVO_CONCESSAO;
            REG_PBH_CS.DATA_CONCESSAO                := C_INC.DATA_CONCESSAO;
            REG_PBH_CS.MOTIVO_CANCELAMENTO           := C_INC.MOTIVO_CANCELAMENTO;
            REG_PBH_CS.DATA_CANCELAMENTO             := C_INC.DATA_CANCELAMENTO;
            REG_PBH_CS.OBSERVACAO                    := C_INC.OBSERVACAO;
            REG_PBH_CS.NUMERO_CARTEIRA               := C_INC.NUMERO_CARTEIRA;
            REG_PBH_CS.NUMERO_PROTOCOLO              := C_INC.NUMERO_PROTOCOLO;
            REG_PBH_CS.DATA_FIM_EXCECAO_DEPENDENCIA  := C_INC.DATA_FIM_EXCECAO_DEPENDENCIA;
            REG_PBH_CS.EXCECAO_DEPENDENCIA           := C_INC.EXCECAO_DEPENDENCIA;
            REG_PBH_CS.DATA_CADASTRAMENTO            := C_INC.DATA_CADASTRAMENTO;
            REG_PBH_CS.TIPO_CONTRATO                 := C_INC.TIPO_CONTRATO;
            REG_PBH_CS.CODIGO_PESSOA_BENEFICIARIO    := C_INC.CODIGO_PESSOA_BENEFICIARIO;

             -- Inclui nova concessao de plano de saude
             vQTDE_LINHAS_AFETADAS := INCLUIR_CONCESSAO(REG_PBH_CS);

             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL);
        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20001,'TENTATIVA DE INCLUSÃ¿O DE REGITROS JÃ¿ CADASTRADOS');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20002,'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO INCLUSAO ####
    PR_SET_SITUACAO_PROCESSAMENTO('07');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;
    PR_STATS_PROCESSA_ARQUIVO(PID_ARQUIVO);
end;