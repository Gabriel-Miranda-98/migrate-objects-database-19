
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."PR_PS_PROCESSAR_BENEFICIARIO" (PCODIGO_EMPRESA CHAR,PTIPO_CONTRATO CHAR, PID_ARQUIVO NUMBER, PACAO NUMBER ) as

  vRETORNO RETORNO_PROCESSAMENTO := RETORNO_PROCESSAMENTO(null,null,null);
  REG_LOG LOG_PROCESSAMENTO;
  vLISTA_LOG LISTA_LOG := LISTA_LOG(null,null,null);

  REG_PBH_CS RHPBH_PS_BENEFICIARIO%ROWTYPE;
  vQTDE_LINHAS_AFETADAS NUMBER;

  vUSUARIO_ATUALIZACAO VARCHAR2(40):= 'IMPORT_PS';
  vDATA_ATUALIZACAO DATE := sysdate;

  ARQUIVO_CONCESSOES      CONSTANT CHAR(4) := '0001';
  ARQUIVO_BENEFICIARIOS   CONSTANT CHAR(4) := '0002';
  ARQUIVO_MOVIMENTOS      CONSTANT CHAR(4) := '0003';
  ARQUIVO_MOVIMENTOS_DIRF CONSTANT CHAR(4) := '0004';

  EMPRESA_ATIVOS        CONSTANT CHAR(4) := '0001';
  EMPRESA_APOSENTADOS   CONSTANT CHAR(4) := '1700';
  EMPRESA_PENSIONISTAS  CONSTANT CHAR(4) := '0011';

  STATUS_CARREGADO    CONSTANT NUMBER := 0;
  STATUS_VALIDADO     CONSTANT NUMBER := 1;
  STATUS_INVALIDADO   CONSTANT NUMBER := 2;
  STATUS_PROCESSADO   CONSTANT NUMBER := 3;
  STATUS_EFETIVADO    CONSTANT NUMBER := 4;
  /*
  SITUACAO_CARREGADO    CONSTANT CHAR(2) := 0;
  SITUACAO_VALIDADO     CONSTANT CHAR(2) := 1;
  SITUACAO_INVALIDADO   CONSTANT CHAR(2) := 2;
  SITUACAO_PROCESSADO   CONSTANT CHAR(2) := 3;
  SITUACAO_EFETIVADO    CONSTANT CHAR(2) := 4;
*/
  TIPO_LOG_SUCESSO       CONSTANT NUMBER := 0;
  TIPO_LOG_INFO          CONSTANT NUMBER := 1;
  TIPO_LOG_ALERTA        CONSTANT NUMBER := 2;
  TIPO_LOG_ERRO          CONSTANT NUMBER := 99;
  TIPO_LOG_PROCESSAMENTO CONSTANT NUMBER := 50;

  CODIGO_LOG_PROCESSAMENTO_02 CONSTANT CHAR(4) := 'P002';
  CODIGO_LOG_PROCESSAMENTO_03 CONSTANT CHAR(4) := 'P003';
  CODIGO_LOG_PROCESSAMENTO_04 CONSTANT CHAR(4) := 'P004';
  CODIGO_LOG_PROCESSAMENTO_05 CONSTANT CHAR(4) := 'P005';
  CODIGO_LOG_PROCESSAMENTO_06 CONSTANT CHAR(4) := 'P006';
  CODIGO_LOG_PROCESSAMENTO_07 CONSTANT CHAR(4) := 'P007';
  CODIGO_LOG_PROCESSAMENTO_50 CONSTANT CHAR(4) := 'P050';

  CATEGORIA_LOG_VALIDACAO  CONSTANT NUMBER := 0;
  CATEGORIA_LOG_EXECUCAO   CONSTANT NUMBER := 1;
  CATEGORIA_LOG_LEIAUTE    CONSTANT NUMBER := 2;
  CATEGORIA_LOG_REGRAS     CONSTANT NUMBER := 3;
  CATEGORIA_LOG_EFETIVACAO CONSTANT NUMBER := 4;

  NAO_EXISTE_TP_RELACIONAMENTO  EXCEPTION;
  MAIS_DE_UM_TP_RELACIONAMENTO  EXCEPTION;
  BENEFICIO_NAO_ENCONTRADO      EXCEPTION;
  MAIS_DE_UM_BENEFICIO          EXCEPTION;
  ERRO_AO_TENTAR_RECUPERAR_DADO EXCEPTION;
  ERRO_GENERICO                 EXCEPTION;


  RET_ENCONTRADO CONSTANT NUMBER := 0;
  RET_NAO_ENCONTRADO CONSTANT NUMBER := 97;
  RET_MAIS_DE_UM_REGISTRO CONSTANT NUMBER := 98;
  RET_ERRO CONSTANT NUMBER := 99;

  vTIPO_CONTRATO CHAR(4) := PTIPO_CONTRATO;
  vCODIGO_PESSOA CHAR(15);

  vCODIGO_PESSOA_TITULAR CHAR(15);
  vCODIGO_PESSOA_BENEFICIARIO CHAR(15);
  vTIPO_RELACIONAMENTO CHAR(4);
  vDATA_NASCIMENTO DATE;
  /*inclusão MARCOS EM 01-08-2022 
  PARA VALIDAR SE HÁ SOLICITAÇÃO DE ALTERAÇÃO PARA O BENEFICIÁRIO 
  COM A DATA ANTERIOR À ALTERAÇÃO ATUAL

  vDATA_SOL_PESSOA DATE;
  vSol_Pessoa_Valid BOOLEAN;

  */
  vDATA_SOL_PESSOA DATE;
  vSol_Pessoa_Valid BOOLEAN;

  vIDADE NUMBER;
  vPESSOA_NOME VARCHAR2(60);
  vPESSOA_DATA_NASCIMENTO DATE;
  vPESSOA_SEXO CHAR(4);
  vPESSOA_ESTADO_CIVIL CHAR(4);
  vPESSOA_IDENTIDADE CHAR(20);
  vCODIGO_RACA_COR CHAR(4);
  vCODIGO_IMCAP_LABOR CHAR(4);
  vPESSOA_NOME_DA_MAE VARCHAR2(60);
  vQTDE_REGISTROS_EXISTENTES NUMBER;
  vSITUACAO_IMPORTACAO CHAR(2);

  vCONTADOR NUMBER;
  vTIPO_ARQUIVO CHAR(4);
  vDATA_PROCESSAMENTO DATE;
  vIS_TESTE BOOLEAN;
  vSITUACAO_PROCESSAMENTO CHAR(2);
  vCODIGO_EMPRESA CHAR(4);
  vID_ARQUIVO NUMBER;
  vSITUACAO_ARQUIVO CHAR(2);
  vANO_MES_REFERENCIA DATE;
  vCATEGORIA_LOG NUMBER;
  vTIPO_LOG NUMBER;
  vADE_NUMERO_MAP NUMBER;
  vCPF_VALIDO BOOLEAN;
  VCPF_EXISTENTE NUMBER;
  NENHUM_ARQUIVO_PROCESSAR EXCEPTION;

  vTIPO_RELACIONAMENTO CHAR(4);
  vCODIGO_BENEFICIO VARCHAR2(15);
  VCPF_TITULAR CHAR(11);
  vIDENTIFICADOR_REGRA VARCHAR2(30);

  vTIPO_BENEFICIO CHAR(2);
  vVALOR_REMUNERACAO_BASE_PS NUMBER(15,2);

  vCONC_CODIGO_BENEFICIARIO CHAR(15);
  vCONC_CPF_BENEFICIARIO CHAR(11);
  vCONC_DATA_NASC_BENEFICIARIO DATE;
  vCONC_IDADE_BENEFICIARIO NUMBER;
  vCONC_CODIGO_CONTRATO CHAR(15);
  vCONC_CODIGO_BENEFICIO CHAR(15);
  vCONC_DATA_CONCESSAO DATE;
  vCONC_DATA_CANCELAMENTO DATE;
  vCONC_NUMERO_CARTEIRA VARCHAR2(4000);
  vCONC_CATEGORIA_BENEFICIARIO CHAR(4);
  vCONC_VALOR_MENSALIDADE NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_MO NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_ME NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_OD NUMBER(15,2);
  vCONC_REMUNERACAO_BASE_PS NUMBER(15,2);

  vSOL_MOVI_DATA_SOLICITACAO DATE;
  vSOL_MOVI_DATA_INI_VIGENCIA DATE;
  vSOL_MOVI_DATA_FIM_VIGENCIA DATE;

  vQTDE_REG_EXCLUSAO_INCLUSAO NUMBER;

  vCONTADOR_SEQUENCIAL_REGISTRO NUMBER;
  vDATA_GERACAO_ARQUIVO DATE;


/*
123456789012345678901234567890
*/
LOG_CODIGO_EMPRESA_INVALIDO    CONSTANT CHAR(4) := 'E001';
LOG_CODIGO_CONTRATO_INVALIDO   CONSTANT CHAR(4) := 'E002';
LOG_CODIGO_FORNECEDOR_INVALIDO CONSTANT CHAR(4) := 'E003';
LOG_CODIGO_VERBA_INVALIDO      CONSTANT CHAR(4) := 'E004';
LOG_VALOR_VERBA_INVALIDO       CONSTANT CHAR(4) := 'E005';
LOG_VALOR_ZERADO               CONSTANT CHAR(4) := 'E006';
LOG_ANO_MES_REF_INVALIDO       CONSTANT CHAR(4) := 'E007';
LOG_ANO_MES_REF_NAO_RELAC      CONSTANT CHAR(4) := 'E008';
LOG_NUM_CARTEIRA_INVALIDO      CONSTANT CHAR(4) := 'E009';
LOG_NUM_CARTEIRA_NAO_VIGENTE   CONSTANT CHAR(4) := 'E010';
LOG_CONCESSAO_NAO_ENCONTRADA   CONSTANT CHAR(4) := 'E011';
LOG_CPF_NAO_ENCONTRADO         CONSTANT CHAR(4) := 'E012';
LOG_CPF_INVALIDO               CONSTANT CHAR(4) := 'E013';
LOG_DUPLICIDADE_REGISTRO       CONSTANT CHAR(4) := 'E014';
LOG_TP_RELAC_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E015';
LOG_TP_RELAC_MAIS_DE_UM        CONSTANT CHAR(4) := 'E016';
LOG_TP_RELAC_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E017';
LOG_BENEFICIO_NAO_ENCONTRADO   CONSTANT CHAR(4) := 'E018';
LOG_CARTEIRA_OUTRO_CONTRATO    CONSTANT CHAR(4) := 'E019';
LOG_CARTEIRA_OUTRO_CPF         CONSTANT CHAR(4) := 'E020';
LOG_REGISTRO_ANTES_CONCESSAO   CONSTANT CHAR(4) := 'E021';
LOG_REGISTRO_APOS_CANCEL       CONSTANT CHAR(4) := 'E022';
LOG_CONCESSAO_DUPLICADA        CONSTANT CHAR(4) := 'E023';
LOG_CONCESSAO_ERRO_RECUPERACAO CONSTANT CHAR(4) := 'E024';
LOG_REGISTRO_JA_EXISTENTE      CONSTANT CHAR(4) := 'E025';
LOG_TIPO_BENEFICIO_INVALIDO    CONSTANT CHAR(4) := 'E026';
LOG_CNPJ_NAO_ENCONTRADO        CONSTANT CHAR(4) := 'E027';
LOG_CNPJ_INVALIDO              CONSTANT CHAR(4) := 'E028';
LOG_TP_RELAC_NAO_CONFORME      CONSTANT CHAR(4) := 'E029';
LOG_TP_RELAC_DEP_NAO_INFORMADO CONSTANT CHAR(4) := 'E030';
LOG_CODIGO_VERBA_NAO_CONFORME  CONSTANT CHAR(4) := 'E031';
LOG_TIPO_RELAC_INVALIDO        CONSTANT CHAR(4) := 'E032';

LOG_OPERACAO_INVALIDA          CONSTANT CHAR(4) := 'E033';
LOG_DATA_INICIAL_MENOR_PERMIT  CONSTANT CHAR(4) := 'E034';
LOG_DATA_FUTURA                CONSTANT CHAR(4) := 'E035';
LOG_CONTRATO_MUNICIPALIZADO    CONSTANT CHAR(4) := 'E036';

LOG_SOL_MOVI_NAO_ENCONTRADA    CONSTANT CHAR(4) := 'E037';
LOG_SOL_MOVI_DUPLICADA         CONSTANT CHAR(4) := 'E038';
LOG_SOL_MOVI_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E039';
LOG_DUPLICIDADE_ADE_NUMERO     CONSTANT CHAR(4) := 'E040';
LOG_VERBA_NAO_PERMITE_ALTERAR  CONSTANT CHAR(4) := 'E041';
LOG_SOL_MOVI_NAO_VIGENTE       CONSTANT CHAR(4) := 'E042';
LOG_SOL_MOVI_OUTRA_DATA_SOLIC  CONSTANT CHAR(4) := 'E043';
LOG_SOL_MOVI_JA_EXISTENTE      CONSTANT CHAR(4) := 'E044';
LOG_PS_MENSALIDADE_VALOR_DIF   CONSTANT CHAR(4) := 'E045';
LOG_PS_SUBSIDIO_VALOR_DIF      CONSTANT CHAR(4) := 'E046';
LOG_PS_VALOR_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E047';

LOG_PS_TITULAR_NAO_ENCONTRADO  CONSTANT CHAR(4) := 'E048';
LOG_PS_ALTER_REG_NAO_EXISTE    CONSTANT CHAR(4) := 'E049';

LOG_JA_POSSUI_PLANO_SAUDE      CONSTANT CHAR(4) := 'E050';
LOG_CARTEIRA_OUTRO_BENEFICIO   CONSTANT CHAR(4) := 'E051';
LOG_CARTEIRA_OUTRA_DATA        CONSTANT CHAR(4) := 'E052';
LOG_CONCESSAO_JA_CANCELADA     CONSTANT CHAR(4) := 'E053';
LOG_DIVERGENCIA_BENEFICIO_ANS  CONSTANT CHAR(4) := 'E054';
LOG_SEXO_INVALIDO              CONSTANT CHAR(4) := 'E055';
LOG_MUNICIPIO_INVALIDO         CONSTANT CHAR(4) := 'E056';
LOG_ESTADO_CIVIL_INVALIDO      CONSTANT CHAR(4) := 'E057';
LOG_TIPO_LOGRADOURO_INVALIDO   CONSTANT CHAR(4) := 'E058';
LOG_UF_ENDERECO_INVALIDO       CONSTANT CHAR(4) := 'E059';
LOG_CPF_JA_EXISTENTE           CONSTANT CHAR(4) := 'E060';

LOG_EXCECAO_DEPEND_INVALIDA    CONSTANT CHAR(4) := 'E061';
LOG_MOT_CANCEL_NAO_INFORMADO   CONSTANT CHAR(4) := 'E062';
LOG_DATA_CANCEL_NAO_INFORMADO  CONSTANT CHAR(4) := 'E063';
LOG_DATA_CANCEL_SUP_360        CONSTANT CHAR(4) := 'E064';

LOG_DATA_EXCECAO_MENOR         CONSTANT CHAR(4) := 'E065';
LOG_DATA_EXCECAO_SUP_360       CONSTANT CHAR(4) := 'E066';

LOG_ORDEM_DEPENDENCIA_INVALIDA CONSTANT CHAR(4) := 'E067';
LOG_EXCECAO_DEP_NAO_INFORMADA  CONSTANT CHAR(4) := 'E068';
LOG_DATA_EXCECAO_NAO_INFORMADA CONSTANT CHAR(4) := 'E069';
LOG_CODIGO_BENEFICIO_INVALIDO  CONSTANT CHAR(4) := 'E070';
LOG_IDENT_ARQUIVO_INVALIDO     CONSTANT CHAR(4) := 'E071';
LOG_SEQUENCIAL_REG_INVALIDO    CONSTANT CHAR(4) := 'E072';
LOG_GERACAO_ARQUIVO_DIVERGENTE CONSTANT CHAR(4) := 'E073';
LOG_NUM_CARTEIRA_JA_EXISTENTE  CONSTANT CHAR(4) := 'E074';
LOG_CPF_JA_EXISTENTE_DUPLICADO CONSTANT CHAR(4) := 'E075';

LOG_ALTERACAO_INFORMACAO       CONSTANT CHAR(4) := 'E100';

LOG_ALT_PESSOA_NOME            CONSTANT CHAR(4) := 'E101';
LOG_ALT_PESSOA_IDENTIDADE      CONSTANT CHAR(4) := 'E102';
LOG_ALT_PESSOA_DT_NASCIMENTO   CONSTANT CHAR(4) := 'E103';
LOG_ALT_PESSOA_SEXO            CONSTANT CHAR(4) := 'E104';
LOG_ALT_PESSOA_ESTADO_CIVIL    CONSTANT CHAR(4) := 'E105';
LOG_ALT_PESSOA_NOME_MAE        CONSTANT CHAR(4) := 'E106';
LOG_ALT_ENDERECO_TP_LOGRADOURO CONSTANT CHAR(4) := 'E107';
LOG_ALT_ENDERECO_ENDERECO      CONSTANT CHAR(4) := 'E108';
LOG_ALT_ENDERECO_NUMERO        CONSTANT CHAR(4) := 'E109';
LOG_ALT_ENDERECO_COMPLEMENTO   CONSTANT CHAR(4) := 'E110';
LOG_ALT_ENDERECO_BAIRRO        CONSTANT CHAR(4) := 'E111';
LOG_ALT_ENDERECO_MUNICIPIO     CONSTANT CHAR(4) := 'E112';
LOG_ALT_ENDERECO_UF            CONSTANT CHAR(4) := 'E113';
LOG_ALT_ENDERECO_CEP           CONSTANT CHAR(4) := 'E114';

LOG_ALT_CONCESSAO_EXCECAO_DEP  CONSTANT CHAR(4) := 'E115';
LOG_ALT_CONCESSAO_DT_EXCE_DEP  CONSTANT CHAR(4) := 'E116';
LOG_ALT_CONCESSAO_ORDEM_DEP    CONSTANT CHAR(4) := 'E117';
LOG_ALT_CONCESSAO_CATEG_BENEF  CONSTANT CHAR(4) := 'E118';
LOG_ALT_CONCESSAO_OBSERVACAO   CONSTANT CHAR(4) := 'E119';

LOG_RACA_COR_INVALIDO          CONSTANT CHAR(4) := 'E122';
LOG_INCAPACIDADE_LABOR         CONSTANT CHAR(4) := 'E123';

LOG_SUCESSO_INCLUSAO           CONSTANT CHAR(4) := 'S001';
LOG_SUCESSO_ALTERACAO          CONSTANT CHAR(4) := 'S002';
LOG_SUCESSO_EXCLUSAO           CONSTANT CHAR(4) := 'S003';
-- Mapeamento
TYPE LISTA_CAMPOS is RECORD (
    CONTEUDO    VARCHAR2(1000)
    );

   TYPE LISTA_EXCECOES IS VARRAY(10000) OF LISTA_CAMPOS;
   LISTA_MAPEAMENTOS_INVALIDOS LISTA_EXCECOES;

  COD_CONVER_TIPO_RELACIONAMENTO CONSTANT CHAR(4) := 'PS01';
  COD_CONVER_TIPO_LOGRADOURO     CONSTANT CHAR(4) := 'PS02';
  COD_CONVER_ESTADO_CIVIL        CONSTANT CHAR(4) := 'PS03';
  COD_CONVER_TIPO_BENEFICIO      CONSTANT CHAR(4) := 'PS04';
  COD_CONVER_MOTIVO_CONCESSAO    CONSTANT CHAR(4) := 'PS05';
  COD_CONVER_BENEFICIO           CONSTANT CHAR(4) := 'PS06';
  COD_CONVER_MOTIVO_CANCELAMENTO CONSTANT CHAR(4) := 'PS07';
  COD_CONVER_CATEGORIA_PESSOA    CONSTANT CHAR(4) := 'PS08';
  COD_CONVER_SEXO                CONSTANT CHAR(4) := 'PS09';

  COD_CONVER_INCAP_LABOR   CONSTANT CHAR(4) := 'PS10';
  COD_CONVER_RACA_COR      CONSTANT CHAR(4) := 'PS11';

  COD_STATUS_SOLIC_INCLUSAO      CONSTANT CHAR(4) := 'CS01';
  COD_STATUS_SOLIC_EXCLUSAO      CONSTANT CHAR(4) := 'CS02';
  COD_STATUS_SOLIC_ALTERACAO_OLD CONSTANT CHAR(4) := 'CS03';
  COD_STATUS_SOLIC_ALTERACAO_NEW CONSTANT CHAR(4) := 'CS04';


  -- Mapeamentos
  LISTA_MAPEA_RACA_COR        LISTA;
  LISTA_MAPEA_INCAP_LABOR     LISTA;
  LISTA_MAPEA_SEXO            LISTA;
  LISTA_MAPEA_TIPO_RELACI     LISTA;
  LISTA_MAPEA_ESTADO_CIVIL    LISTA;
  LISTA_MAPEA_TIPO_LOGRADOURO LISTA;

  LISTA_MAPEA_TIPO_BENEFICIO LISTA;
  LISTA_MAPEA_MOTIVO_CONCESSAO LISTA;
  LISTA_MAPEA_MOTIVO_CANCEL LISTA;
  LISTA_MAPEA_BENEFICIO LISTA;
  LISTA_MAPEA_CATEGORIA_PESSOA LISTA;

  LISTA_SERVIDORES_VERBAS_PS LISTA;
  LISTA_VERBAS_MENSALIDADE LISTA;
  LISTA_VERBAS_SUBSIDIO LISTA;
 ----------------------------GABRIEL ADICIONADO AQUI EM 03/05/2019 PARA MONTAR A LISTA DINAMICAMENTE E RETIRAR OS COGIGOS FIXOS -------------------------------------
------------------------------------------------------------------------------INICIO------------------------------------------------------------------------------------------------------------
LISTA_TIPO_RELACI_IS LISTA;
LISTA_ESTADO_CIVIL_IS LISTA;
LISTA_TIPO_LOGRADOURO_IS LISTA;
LISTA_TIPO_BENEFICIO_IS LISTA;
LISTA_MOTIVO_CONCESSSAO_IS LISTA;
LISTA_MOTIVO_CANCEL_IS LISTA;
LISTA_BENEFICIO_IS LISTA;
LISTA_CATEGORIA_PESSOA_IS lista;
LISTA_MAPEA_RACA_COR_IS        LISTA;
LISTA_MAPEA_INCAP_LABOR_IS     LISTA;

--------------------------------------------------------------------------------FIM-------------------------------------------------------------------------------------------------------------


  -- Lista de valores validos esperados na Interface de Software (IS)
  -- Sexo
  LISTA_SEXO_IS LISTA:= LISTA('0001','0002');


  TEXTO_MENSAGEM_MAPEA_INVALIDO VARCHAR2(4000);
  vCONTADOR_MAPEAMENTO_INVALIDO NUMBER;
  MAPEAMENTO_EXCEPTION EXCEPTION;
    vTELEFONE_DDD NUMBER(2);
  vTELEFONE_NUMERO VARCHAR2(11);
  vTIPO_TELEFONE CHAR(4);
   FUNCTION MONTA_LISTA( pcodigo_conversao CHAR)

    RETURN lista
  IS

    CURSOR cdado_destino
    IS
      SELECT dado_ORIGEM
      FROM RHINTE_ED_IT_CONV
      WHERE CODIGO_CONVERSAO =pcodigo_conversao;
    V lista;
    vdado VARCHAR2 (400);
    I PLS_INTEGER;
    vcontador NUMBER;
  BEGIN
  DBMS_Output.PUT_LINE(pcodigo_conversao);
    FOR c1 IN
    (SELECT COUNT (1)AS quantidade
    FROM RHINTE_ED_IT_CONV
    WHERE CODIGO_CONVERSAO =pcodigo_conversao
    )
    LOOP
      vcontador:=c1.quantidade;
    END LOOP;
    V:=lista();
    V.EXTEND(vcontador);
    I:=1;
    OPEN cdado_destino;
    LOOP
      FETCH cdado_destino
      INTO vdado;
      EXIT
    WHEN cdado_destino%notfound;
      V(I) := vdado;
      I    := I+1;
    END LOOP;
    CLOSE cdado_destino;
    RETURN v;
  END;

FUNCTION OBTER_CODIGO_PESSOA_BENEFIC(
ID_ARQUIVO IN NUMBER,
  VCODIGO_CONTRATO IN VARCHAR2,
  CPF_DENP IN CHAR,
      pCODIGO_EMPRESA          IN CHAR

     )
    RETURN CHAR
  IS

   VCPF_DEPENTENDE CHAR(15);
  v_contador number;
  BEGIN
   v_contador:=0;
    VCPF_DEPENTENDE:=NULL;

    FOR c1 IN
    (SELECT A.CPF FROM RHPBH_PS_BENEFICIARIO A
    WHERE A.CODIGO_CONTRATO=VCODIGO_CONTRATO
    AND A.CODIGO_EMPRESA=pCODIGO_EMPRESA
    AND A.CPF=CPF_DENP
    AND ID_ARQUIVO=ID_ARQUIVO
    AND NOT EXISTS (SELECT B.CPF FROM RHPESS_PESSOA B WHERE
    A.CPF=B.CPF AND B.CODIGO_EMPRESA=A.CODIGO_EMPRESA
    AND B.DT_TERMINO IS NULL)



        )


    LOOP
      v_contador:=v_contador+1;
       VCPF_DEPENTENDE:=LPAD(C1.CPF,15,0);
       END LOOP;



    RETURN VCPF_DEPENTENDE;


  END;
--------------------------------------------------GABRIEL AQUI E 23/05/2019----------------------------------------------------------------------
FUNCTION MAPEAR_VALORES(plista LISTA, pcodigo_conversao CHAR) return LISTA as
lista_map LISTA;
vDADO_DESTINO VARCHAR2(4000);
vCONTADOR_NAO_ENCONTRADO NUMBER;

BEGIN
  lista_map := plista;
  vCONTADOR_NAO_ENCONTRADO := 0;
  DBMS_Output.PUT_LINE('MAPEAMENTO. pcodigo_conversao = ' || pcodigo_conversao || ';');
  for i in 1..plista.count()
    loop
       begin
          vDADO_DESTINO := NULL;
          select DADO_DESTINO
            into vDADO_DESTINO
            from RHINTE_ED_IT_CONV
           where CODIGO_CONVERSAO = pcodigo_conversao
             and DADO_ORIGEM = plista(i)
             ;
       exception
       when NO_DATA_FOUND then
         vCONTADOR_NAO_ENCONTRADO := vCONTADOR_NAO_ENCONTRADO + 1;
         vDADO_DESTINO := NULL;
         DBMS_Output.PUT_LINE('VALOR_NAO_ENCONTRADO. pcodigo_conversao = ' || pcodigo_conversao || '; DADO_ORIGEM = ' || plista(i));
       end;

       lista_map(i) := vDADO_DESTINO;
   end loop;

   IF vCONTADOR_NAO_ENCONTRADO > 0 THEN
      RAISE MAPEAMENTO_EXCEPTION;
   END IF;

   return lista_map;

END;

PROCEDURE IMPRIMIR_VALORES_MAPEADOS(descricao_lista varchar2, lista LISTA, lista_mapeada LISTA) as
BEGIN
      DBMS_Output.PUT_LINE('IMPRIMINDO LISTA MAPEADA' || ' - ' || descricao_lista);
       for i in 1..lista.count()
         loop
             DBMS_Output.PUT_LINE(RPAD('lista('||i||')',10,' ') || ' = ' || lista(i) || ' -> ' || lista_mapeada(i));
         end loop;
END;

PROCEDURE GRAVA_LOG(CodigoEmpresa IN CHAR, CategoriaLog IN NUMBER, TipoLog IN NUMBER, IdArquivo IN NUMBER, Numero_linha IN NUMBER, CodigoLog IN CHAR, DetalheLog IN VARCHAR2) AS
BEGIN
     INSERT INTO RHPBH_ARQUIVO_LOG(ID_LOG, DATA_LOG, CATEGORIA, TIPO, ID_ARQUIVO, NUMERO_LINHA, CODIGO_LOG, DETALHE, CODIGO_EMPRESA)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CategoriaLog, TipoLog, IdArquivo, Numero_linha, CodigoLog, DetalheLog, CodigoEmpresa);
     COMMIT;
END;

PROCEDURE PR_CONTROLE_PROCESSAMENTO(CODIGO_EMPRESA IN CHAR, ID_ARQUIVO IN NUMBER, SITUACAO_PROCESSAMENTO IN CHAR, POBSERVACAO IN VARCHAR2 DEFAULT NULL) AS
BEGIN
    PR_GRAVA_LOG_PROCESSA_ARQUIVO(CODIGO_EMPRESA, ID_ARQUIVO, SITUACAO_PROCESSAMENTO, POBSERVACAO);
END;

PROCEDURE PR_SET_SITUACAO_PROCESSAMENTO(PSITUACAO_PROCESSAMENTO IN CHAR) AS
BEGIN
    IF PSITUACAO_PROCESSAMENTO IS NULL THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO NULA.');
    END IF;

    IF PSITUACAO_PROCESSAMENTO NOT IN ('00','01','02','03','04','05','06','07') THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO INVALIDA.');
    END IF;

    vSITUACAO_PROCESSAMENTO := PSITUACAO_PROCESSAMENTO;
END;

PROCEDURE PR_ATUALIZAR_SITUACAO_REGISTR0 AS
BEGIN
   BEGIN
      update RHPBH_ARQUIVO_LINHA AL
         set SITUACAO = 99
       where ID_ARQUIVO = PID_ARQUIVO
         and exists(
      select *
        from RHPBH_ARQUIVO_LOG
       where ID_ARQUIVO = AL.ID_ARQUIVO
         and NUMERO_LINHA = AL.NUMERO_LINHA
         and TIPO = 99
      );

      commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAOO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
END;

FUNCTION ALTERAR_BENEFICIARIO(var RHPBH_PS_BENEFICIARIO%ROWTYPE) RETURN NUMBER IS
vQTDE_LINHAS_AFETADAS NUMBER;
vHOUVE_ALTERACAO_DADOS BOOLEAN;
vNOME_ATUAL VARCHAR2(4000);
vNOME_MAE_ATUAL VARCHAR2(4000);
BEGIN
    vQTDE_LINHAS_AFETADAS := 0;

    --Recupera a pessoa já existente
    BEGIN
      select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12),
             translate(TRIM(NOME),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC') AS NOME,
             DATA_NASCIMENTO, SEXO,RACA_COR,COD_DEFICIENCIA,
             ESTADO_CIVIL,
             TRIM(IDENTIDADE) AS IDENTIDADE,
             translate(TRIM(C_LIVRE_DESCR12),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC') AS NOME_DA_MAE
        into vCODIGO_PESSOA, vDATA_NASCIMENTO, vIDADE,
             vPESSOA_NOME, vPESSOA_DATA_NASCIMENTO, vPESSOA_SEXO,
			 vCODIGO_RACA_COR,vCODIGO_IMCAP_LABOR,
             vPESSOA_ESTADO_CIVIL, vPESSOA_IDENTIDADE, vPESSOA_NOME_DA_MAE
        from RHPESS_PESSOA P
       where P.CODIGO_EMPRESA = var.CODIGO_EMPRESA
         and P.CODIGO = var.CODIGO_PESSOA_BENEFICIARIO
         AND P.DT_TERMINO IS NULL;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
         vCODIGO_PESSOA := NULL;
         vDATA_NASCIMENTO := NULL;
         vIDADE := NULL;
         vPESSOA_NOME := NULL;
         vPESSOA_DATA_NASCIMENTO := NULL;
         vPESSOA_SEXO := NULL;
		 vCODIGO_RACA_COR := NULL;
         vCODIGO_IMCAP_LABOR := NULL;
         vPESSOA_ESTADO_CIVIL := NULL;
         vPESSOA_IDENTIDADE := NULL;
         vPESSOA_NOME_DA_MAE := NULL;
     END;

     BEGIN
       IF (var.CODIGO_EMPRESA IS NOT NULL AND var.CPF IS NOT NULL) THEN
         vHOUVE_ALTERACAO_DADOS := FALSE;

         vNOME_ATUAL := translate(TRIM(var.NOME),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');
         vNOME_MAE_ATUAL := translate(TRIM(var.NOME_DA_MAE),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');

         IF (vNOME_ATUAL IS NOT NULL AND (( vPESSOA_NOME IS NOT NULL AND (vNOME_ATUAL <> vPESSOA_NOME) ) OR (vPESSOA_NOME IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_PESSOA_NOME, 'ATUALIZAÇÃO DE DADOS DE PESSOA - NOME | ' || 'VALOR ANTERIOR: ' || NVL(vPESSOA_NOME,'NULO') || ' VALOR_ATUAL: ' || var.NOME);
            vPESSOA_NOME := var.NOME;

			/* SERVIDORES ATIVOS NÃO PODEM SOFRER ALTERAÇÃO 
			   ORIUNDAS DA IMPORTAÇÃO DE BENEFICIÁRIO 

			    A informação que vem da gestora 

				SE O NOME DO PLANO <> NOME PESSOA 
				E HOUVER A SOLICITAÇÃO COM 0006 1 ano 
				EU NÃO POSSO ALTERAR O NOME E GERO LOG 
				SENÃO ALTERAR 
			*/ 


            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         IF (var.IDENTIDADE IS NOT NULL AND (( vPESSOA_IDENTIDADE IS NOT NULL AND (var.IDENTIDADE <> vPESSOA_IDENTIDADE) ) OR (vPESSOA_IDENTIDADE IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_PESSOA_IDENTIDADE, 'ATUALIZAÇÃO DE DADOS DE PESSOA - IDENTIDADE | ' || 'VALOR ANTERIOR: ' || NVL(vPESSOA_IDENTIDADE,'NULO') || ' VALOR_ATUAL: ' || var.IDENTIDADE);
            vPESSOA_IDENTIDADE := var.IDENTIDADE;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         IF (var.DATA_NASCIMENTO IS NOT NULL AND (( vPESSOA_DATA_NASCIMENTO IS NOT NULL AND (var.DATA_NASCIMENTO <> vPESSOA_DATA_NASCIMENTO) ) OR (vPESSOA_DATA_NASCIMENTO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_PESSOA_DT_NASCIMENTO, 'ATUALIZAÇÃO DE DADOS DE PESSOA - DATA NASCIMENTO | ' || 'VALOR ANTERIOR: ' || NVL(TO_CHAR(vPESSOA_DATA_NASCIMENTO,'DD/MM/YYYY'),'NULO') || ' VALOR_ATUAL: ' || TO_CHAR(var.DATA_NASCIMENTO,'DD/MM/YYYY'));
            vPESSOA_DATA_NASCIMENTO := var.DATA_NASCIMENTO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         IF (var.CODIGO_SEXO IS NOT NULL AND (( vPESSOA_SEXO IS NOT NULL AND (var.CODIGO_SEXO <> vPESSOA_SEXO) ) OR (vPESSOA_SEXO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_PESSOA_SEXO, 'ATUALIZAÇÃO DE DADOS DE PESSOA - SEXO | ' || 'VALOR ANTERIOR: ' || NVL(vPESSOA_SEXO,'NULO') || ' VALOR_ATUAL: ' || var.CODIGO_SEXO);
            vPESSOA_SEXO := var.CODIGO_SEXO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         IF (var.CODIGO_ESTADO_CIVIL IS NOT NULL AND (( vPESSOA_ESTADO_CIVIL IS NOT NULL AND (var.CODIGO_ESTADO_CIVIL <> vPESSOA_ESTADO_CIVIL) ) OR (vPESSOA_ESTADO_CIVIL IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_PESSOA_ESTADO_CIVIL, 'ATUALIZAÇÃO DE DADOS DE PESSOA - ESTADO CIVIL |' || 'VALOR ANTERIOR: ' || NVL(vPESSOA_ESTADO_CIVIL,'NULO') || ' VALOR_ATUAL: ' || var.CODIGO_ESTADO_CIVIL);
            vPESSOA_ESTADO_CIVIL := var.CODIGO_ESTADO_CIVIL;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;


		IF (var.CODIGO_RACA_COR IS NOT NULL AND (( vCODIGO_RACA_COR IS NOT NULL AND (var.CODIGO_RACA_COR <> vCODIGO_RACA_COR) ) OR (vCODIGO_RACA_COR IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_RACA_COR_INVALIDO, 'ATUALIZAÇÃO DE DADOS DE PESSOA - RACA_COR |' || 'VALOR ANTERIOR: ' || NVL(vCODIGO_RACA_COR,'NULO') || ' VALOR_ATUAL: ' || var.CODIGO_RACA_COR);
            vPESSOA_ESTADO_CIVIL := var.CODIGO_ESTADO_CIVIL;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;	


		IF (var.CODIGO_IMCAP_LABOR IS NOT NULL AND (( vCODIGO_IMCAP_LABOR IS NOT NULL AND (var.CODIGO_IMCAP_LABOR  <>  vCODIGO_IMCAP_LABOR ) ) OR ( vCODIGO_IMCAP_LABOR  IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_RACA_COR_INVALIDO, 'ATUALIZAÇÃO DE DADOS DE PESSOA - COD_DEFICIENCIA |' || 'VALOR ANTERIOR: ' || NVL( vCODIGO_IMCAP_LABOR ,'NULO') || ' VALOR_ATUAL: ' || var.CODIGO_IMCAP_LABOR );
            vPESSOA_ESTADO_CIVIL := var.CODIGO_ESTADO_CIVIL;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;	


         IF (vNOME_MAE_ATUAL IS NOT NULL AND (( vPESSOA_NOME_DA_MAE IS NOT NULL AND (vNOME_MAE_ATUAL <> vPESSOA_NOME_DA_MAE) ) OR (vPESSOA_NOME_DA_MAE IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_PESSOA_NOME_MAE, 'ATUALIZAÇÃO DE DADOS DE PESSOA - NOME DA MAE |' || 'VALOR ANTERIOR: ' || NVL(vPESSOA_NOME_DA_MAE,'NULO') || ' VALOR_ATUAL: ' || var.NOME_DA_MAE);
            vPESSOA_NOME_DA_MAE := var.NOME_DA_MAE;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         vDATA_ATUALIZACAO := sysdate;

            IF vHOUVE_ALTERACAO_DADOS THEN
               GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALTERACAO_INFORMACAO, 'ATUALIZAÇÃO DE DADOS DE PESSOA |' || var.CODIGO_EMPRESA || var.CPF || var.CODIGO_PESSOA_BENEFICIARIO);

               BEGIN


                         update RHPESS_PESSOA set NOME = vPESSOA_NOME,
                                                  NOME_ACESSO = vPESSOA_NOME,
                                                  DATA_NASCIMENTO = vPESSOA_DATA_NASCIMENTO,
                                                  SEXO = vPESSOA_SEXO,
												  RACA_COR =  vCODIGO_RACA_COR,
												  COD_DEFICIENCIA = vCODIGO_IMCAP_LABOR,
                                                  ESTADO_CIVIL = vPESSOA_ESTADO_CIVIL,
                                                  IDENTIDADE = vPESSOA_IDENTIDADE,
                                                  C_LIVRE_DESCR12 = vPESSOA_NOME_DA_MAE,
                                                  LOGIN_USUARIO = vUSUARIO_ATUALIZACAO,
                                                  DT_ULT_ALTER_USUA = vDATA_ATUALIZACAO
                                where CODIGO_EMPRESA = var.CODIGO_EMPRESA
                                  and CODIGO = var.CODIGO_PESSOA_BENEFICIARIO
                                  AND DT_TERMINO IS NULL;
                         vQTDE_LINHAS_AFETADAS := sql%rowcount;

               EXCEPTION
               WHEN OTHERS THEN
                    raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
               END;


           END IF;
       END IF;

     EXCEPTION
         WHEN OTHERS THEN
            raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR REGISTRO DE PESSOA. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      END;

     RETURN vQTDE_LINHAS_AFETADAS;
END;


FUNCTION REGISTRAR_TELEFONE(pCODIGO_EMPRESA CHAR, pCODIGO_PESSOA CHAR, pTIPO_TELEFONE CHAR, pDDD NUMBER, pTELEFONE VARCHAR2) RETURN NUMBER IS
reg_cs RHPESS_TELEFONE_P%ROWTYPE;
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
    vQTDE_LINHAS_AFETADAS := 0;

    reg_cs.CODIGO_EMPRESA := pCODIGO_EMPRESA;
    reg_cs.CODIGO_PESSOA := pCODIGO_PESSOA;
    reg_cs.COD_TIPO_TELEFONE := pTIPO_TELEFONE;
    reg_cs.OCORRENCIA := 1;
    reg_cs.CODIGO_PAIS := '000000000000001';
    reg_cs.PREFERENCIAL := 'N';
    reg_cs.DDD := pDDD;
    reg_cs.TELEFONE := pTELEFONE;
    reg_cs.LOGIN_USUARIO := vUSUARIO_ATUALIZACAO;
    reg_cs.DT_ULT_ALTER_USUA := sysdate;

    BEGIN
         select max(OCORRENCIA)
           into reg_cs.OCORRENCIA
           from RHPESS_TELEFONE_P
          where RHPESS_TELEFONE_P.CODIGO_EMPRESA = reg_cs.CODIGO_EMPRESA
            and RHPESS_TELEFONE_P.CODIGO_PESSOA = reg_cs.CODIGO_PESSOA
            and RHPESS_TELEFONE_P.COD_TIPO_TELEFONE = reg_cs.COD_TIPO_TELEFONE;

            IF reg_cs.OCORRENCIA IS NOT NULL THEN
               reg_cs.OCORRENCIA := reg_cs.OCORRENCIA + 1;
            ELSE
               reg_cs.OCORRENCIA := 1;
            END IF;
    EXCEPTION
    WHEN OTHERS THEN
         reg_cs.OCORRENCIA := 1;
    END;

    BEGIN
         Insert into RHPESS_TELEFONE_P values reg_cs;
         vQTDE_LINHAS_AFETADAS := sql%rowcount;
         commit;

    EXCEPTION
    WHEN OTHERS THEN
         raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    RETURN vQTDE_LINHAS_AFETADAS;

END;

FUNCTION REGISTRAR_ENDERECO(var RHPBH_PS_BENEFICIARIO%ROWTYPE) RETURN NUMBER IS
reg_endereco RHPESS_ENDERECO_P%ROWTYPE;
vQTDE_LINHAS_AFETADAS NUMBER;
vTIPO_LOGRADOURO   CHAR(4);
vENDERECO          VARCHAR2(80);
vNUMERO            CHAR(10);
vCOMPLEMENTO       VARCHAR2(40);
vBAIRRO            VARCHAR2(60);
vMUNICIPIO         CHAR(15);
vUF                CHAR(4);
vCEP               CHAR(15);

vENDERECO_ATUAL    VARCHAR2(4000);
vNUMERO_ATUAL      CHAR(4000);
vCOMPLEMENTO_ATUAL VARCHAR2(4000);
vBAIRRO_ATUAL      VARCHAR2(4000);
vUF_ATUAL          VARCHAR2(4000);

vENDERECO_EXISTENTE BOOLEAN;
vHOUVE_ALTERACAO_DADOS BOOLEAN;
BEGIN
    vQTDE_LINHAS_AFETADAS := 0;

    reg_endereco.CODIGO_EMPRESA := var.CODIGO_EMPRESA;
    reg_endereco.CODIGO_PESSOA := var.CODIGO_PESSOA_BENEFICIARIO;
    reg_endereco.TIPO_LOGRADOURO := var.CODIGO_TIPO_LOGRADOURO;
    reg_endereco.ENDERECO := var.ENDERECO;
    reg_endereco.NUMERO := var.NUMERO;
    reg_endereco.COMPLEMENTO := var.COMPLEMENTO;
    reg_endereco.BAIRRO := var.BAIRRO;
    reg_endereco.MUNICIPIO := var.CODIGO_MUNICIPIO;
    reg_endereco.UF := var.UF;
    reg_endereco.CEP := var.CEP;
    reg_endereco.LOGIN_USUARIO := vUSUARIO_ATUALIZACAO;
    reg_endereco.DT_ULT_ALTER_USUA := sysdate;


    dbms_output.put_line('RECUPERACAO DE MUNICIPIO = ' || var.CODIGO_MUNICIPIO);
    -- Recupera o codigo do municipio a partir do Codigo IBGE
    BEGIN
         select MIN(CODIGO)
           into reg_endereco.MUNICIPIO
           from RHTABS_MUNICIPIO
          where TRIM(CODIGO_IBGE) = TO_CHAR(var.CODIGO_MUNICIPIO);

    EXCEPTION
    WHEN OTHERS THEN

         dbms_output.put_line('MUNICIPIO NAO ENCONTRADO = ' || reg_endereco.MUNICIPIO);
         reg_endereco.MUNICIPIO := null;
    END;
    dbms_output.put_line('MUNICIPIO ENCONTRADO = ' || reg_endereco.MUNICIPIO);

    vENDERECO_EXISTENTE := FALSE;
    -- Recupera endereço já existente
    BEGIN
      select P.TIPO_LOGRADOURO,P.ENDERECO,P.NUMERO,P.COMPLEMENTO,P.BAIRRO,RHTABS_MUNICIPIO.CODIGO_IBGE,P.UF,P.CEP
        into vTIPO_LOGRADOURO,vENDERECO,vNUMERO,vCOMPLEMENTO,vBAIRRO,vMUNICIPIO,vUF,vCEP
        from RHPESS_ENDERECO_P P, RHTABS_MUNICIPIO
       where P.CODIGO_EMPRESA = var.CODIGO_EMPRESA
         and P.CODIGO_PESSOA = var.CODIGO_PESSOA_BENEFICIARIO
         and P.MUNICIPIO = RHTABS_MUNICIPIO.CODIGO;

         vENDERECO_EXISTENTE := TRUE;
          dbms_output.put_line('vENDERECO_EXISTENTE 1 '||vTIPO_LOGRADOURO||'2 '|| vENDERECO);
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
         vTIPO_LOGRADOURO := NULL;
         vENDERECO := NULL;
         vNUMERO := NULL;
         vCOMPLEMENTO := NULL;
         vBAIRRO := NULL;
         vMUNICIPIO := NULL;
         vUF := NULL;
         vCEP := NULL;
         vENDERECO_EXISTENTE := FALSE;
     END;

     BEGIN
       IF (vENDERECO_EXISTENTE) THEN
         vHOUVE_ALTERACAO_DADOS := FALSE;

         IF (var.CODIGO_TIPO_LOGRADOURO IS NOT NULL AND (( vTIPO_LOGRADOURO IS NOT NULL AND (var.CODIGO_TIPO_LOGRADOURO <> vTIPO_LOGRADOURO) ) OR (vTIPO_LOGRADOURO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_TP_LOGRADOURO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - TIPO LOGRADOURO | ' || 'VALOR ANTERIOR: ' || NVL(vTIPO_LOGRADOURO,'NULO') || ' VALOR_ATUAL: ' || var.CODIGO_TIPO_LOGRADOURO);
            vTIPO_LOGRADOURO := var.CODIGO_TIPO_LOGRADOURO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         dbms_output.put_line('vHOUVE_ALTERACAO_DADOS 1 '||vTIPO_LOGRADOURO||'2 '|| var.CODIGO_TIPO_LOGRADOURO);

         END IF;

         vENDERECO_ATUAL := translate(TRIM(var.ENDERECO),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');
         IF (vENDERECO_ATUAL IS NOT NULL AND (( vENDERECO IS NOT NULL AND (vENDERECO_ATUAL <> vENDERECO) ) OR (vENDERECO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_ENDERECO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - ENDERECO | ' || 'VALOR ANTERIOR: ' || NVL(vENDERECO,'NULO') || ' VALOR_ATUAL: ' || var.ENDERECO);
            vENDERECO := var.ENDERECO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
            dbms_output.put_line('vHOUVE_ALTERACAO_DADOS 2');
         END IF;

         vNUMERO_ATUAL := translate(TRIM(var.NUMERO),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');
         IF (vNUMERO_ATUAL IS NOT NULL AND (( vNUMERO IS NOT NULL AND (vNUMERO_ATUAL <> vNUMERO) ) OR (vNUMERO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_NUMERO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - NUMERO | ' || 'VALOR ANTERIOR: ' || NVL(vNUMERO,'NULO') || ' VALOR_ATUAL: ' || var.NUMERO);
            vNUMERO := var.NUMERO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
           dbms_output.put_line('vHOUVE_ALTERACAO_DADOS 3'||vNUMERO||'2 '|| var.NUMERO);
         END IF;

         vCOMPLEMENTO_ATUAL := translate(TRIM(var.COMPLEMENTO),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');
         IF (vCOMPLEMENTO_ATUAL IS NOT NULL AND (( vCOMPLEMENTO IS NOT NULL AND (vCOMPLEMENTO_ATUAL <> vCOMPLEMENTO) ) OR (vCOMPLEMENTO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_COMPLEMENTO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - COMPLEMENTO | ' || 'VALOR ANTERIOR: ' || NVL(vCOMPLEMENTO,'NULO') || ' VALOR_ATUAL: ' || var.COMPLEMENTO);
            vCOMPLEMENTO := var.COMPLEMENTO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
            dbms_output.put_line('vHOUVE_ALTERACAO_DADOS 4'||vCOMPLEMENTO||'2'|| var.COMPLEMENTO);
         END IF;

         vBAIRRO_ATUAL := translate(TRIM(var.BAIRRO),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');
         IF (vBAIRRO_ATUAL IS NOT NULL AND (( vBAIRRO IS NOT NULL AND (vBAIRRO_ATUAL <> vBAIRRO) ) OR (vBAIRRO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_BAIRRO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - BAIRRO |' || 'VALOR ANTERIOR: ' || NVL(vBAIRRO,'NULO') || ' VALOR_ATUAL: ' || var.BAIRRO);
            vBAIRRO := var.BAIRRO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         IF (reg_endereco.MUNICIPIO IS NOT NULL AND (( vMUNICIPIO IS NOT NULL AND (reg_endereco.MUNICIPIO <> vMUNICIPIO) ) OR (vMUNICIPIO IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_MUNICIPIO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - MUNICIPIO |' || 'VALOR ANTERIOR: ' || NVL(vMUNICIPIO,'NULO') || ' VALOR_ATUAL: ' || reg_endereco.MUNICIPIO);
            vMUNICIPIO := reg_endereco.MUNICIPIO;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         vUF_ATUAL := translate(TRIM(var.UF),'âàãáÁÂÀÃéêÉÊíÍóôõÓÔÕüúÜÚÇç','AAAAAAAAEEEEIIOOOOOOUUUUCC');
         IF (vUF_ATUAL IS NOT NULL AND (( vUF IS NOT NULL AND (vUF_ATUAL <> vUF) ) OR (vUF IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_UF, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - UF |' || 'VALOR ANTERIOR: ' || NVL(vUF,'NULO') || ' VALOR_ATUAL: ' || var.UF);
            vUF := var.UF;
            vHOUVE_ALTERACAO_DADOS := TRUE;
         END IF;

         IF (var.CEP IS NOT NULL AND (( vCEP IS NOT NULL AND (var.CEP <> vCEP) ) OR (vCEP IS NULL))) THEN
            GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALT_ENDERECO_CEP, 'ATUALIZAÇÃO DE DADOS DE ENDERECO - CEP |' || 'VALOR ANTERIOR: ' || NVL(vCEP,'NULO') || ' VALOR_ATUAL: ' || var.CEP);
            vCEP := var.CEP;
            vHOUVE_ALTERACAO_DADOS := TRUE;



         END IF;

         vDATA_ATUALIZACAO := sysdate;

            IF vHOUVE_ALTERACAO_DADOS THEN
               GRAVA_LOG(var.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALTERACAO_INFORMACAO, 'ATUALIZAÇÃO DE DADOS DE ENDERECO |' || var.CODIGO_EMPRESA || var.CPF || var.CODIGO_PESSOA_BENEFICIARIO);

               BEGIN
dbms_output.put_line('entrou no if do endereço '||var.CODIGO_PESSOA_BENEFICIARIO);
                         update RHPESS_ENDERECO_P
                            set TIPO_LOGRADOURO = vTIPO_LOGRADOURO,
                                ENDERECO = vENDERECO,
                                NUMERO = vNUMERO,
                                COMPLEMENTO = vCOMPLEMENTO,
                                BAIRRO = vBAIRRO,
                                MUNICIPIO = vMUNICIPIO,
                                UF = vUF,
                                CEP = vCEP,
                                LOGIN_USUARIO = vUSUARIO_ATUALIZACAO,
                                DT_ULT_ALTER_USUA = vDATA_ATUALIZACAO
                                where CODIGO_EMPRESA = var.CODIGO_EMPRESA
                                  and CODIGO_PESSOA = var.CODIGO_PESSOA_BENEFICIARIO;

                         vQTDE_LINHAS_AFETADAS := sql%rowcount;

               EXCEPTION
               WHEN OTHERS THEN
                    raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
               END;


           END IF;
       ELSE
              BEGIN

                   Insert into RHPESS_ENDERECO_P values reg_endereco;
                   vQTDE_LINHAS_AFETADAS := sql%rowcount;
                   commit;

              EXCEPTION
              WHEN OTHERS THEN
                   raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              END;
       END IF;

     EXCEPTION
         WHEN OTHERS THEN
            raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR REGISTRO DE PESSOA. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      END;

    RETURN vQTDE_LINHAS_AFETADAS;

END;

FUNCTION INCLUIR_BENEFICIARIO(pCODIGO_PESSOA CHAR, var RHPBH_PS_BENEFICIARIO%ROWTYPE) RETURN NUMBER IS
reg_cs RHPESS_PESSOA%ROWTYPE;
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
    vQTDE_LINHAS_AFETADAS := 0;

    reg_cs.CODIGO_EMPRESA := var.Codigo_Empresa;
    reg_cs.CODIGO := pCODIGO_PESSOA;
    reg_cs.NOME := var.NOME;
    reg_cs.NOME_ACESSO := var.NOME;
    reg_cs.CPF := var.CPF;
    reg_cs.IDENTIDADE := var.IDENTIDADE;
    reg_cs.DATA_NASCIMENTO := var.DATA_NASCIMENTO;
    reg_cs.SEXO := var.CODIGO_SEXO;
	reg_cs.raca_cor := var.CODIGO_RACA_COR;
	reg_cs.cod_deficiencia := var.CODIGO_IMCAP_LABOR;
    reg_cs.ESTADO_CIVIL := var.CODIGO_ESTADO_CIVIL;
    reg_cs.C_LIVRE_DESCR12 := var.NOME_DA_MAE;
    reg_cs.LOGIN_USUARIO := vUSUARIO_ATUALIZACAO;
    reg_cs.DT_ULT_ALTER_USUA := sysdate;

    BEGIN
         Insert into RHPESS_PESSOA values reg_cs;
         vQTDE_LINHAS_AFETADAS := sql%rowcount;
         commit;

    EXCEPTION
    WHEN OTHERS THEN
         raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    RETURN vQTDE_LINHAS_AFETADAS;

END;


FUNCTION REGISTRAR_TIPO_RELACIONAMENTO(var RHPBH_PS_BENEFICIARIO%ROWTYPE) RETURN NUMBER IS
reg_cs RHPESS_RL_PESS_PES%ROWTYPE;
vQTDE_LINHAS_AFETADAS NUMBER;
vRETORNO NUMBER;
vDUPLICIDADE_REGISTRO BOOLEAN;
vCODIGO_TIPO_RELAC CHAR(4);
BEGIN
    vQTDE_LINHAS_AFETADAS := 1;
    vRETORNO := 0;
    vDUPLICIDADE_REGISTRO := FALSE;

    BEGIN
         select RHPESS_RL_PESS_PES.TP_RELACIONAMENTO
           into vCODIGO_TIPO_RELAC
           from RHPESS_RL_PESS_PES
          where RHPESS_RL_PESS_PES.COD_EMPRESA = var.CODIGO_EMPRESA
            and RHPESS_RL_PESS_PES.COD_PESSOA = var.CODIGO_PESSOA_TITULAR
            and RHPESS_RL_PESS_PES.COD_PESSOA_RELAC = var.CODIGO_PESSOA_BENEFICIARIO
            and RHPESS_RL_PESS_PES.TP_RELACIONAMENTO member LISTA_MAPEA_TIPO_RELACI;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
         vCODIGO_TIPO_RELAC := NULL;
    WHEN TOO_MANY_ROWS THEN
         vDUPLICIDADE_REGISTRO := TRUE;
    WHEN OTHERS THEN
         NULL;
    END;

    IF NOT vDUPLICIDADE_REGISTRO THEN
        IF vCODIGO_TIPO_RELAC IS NULL THEN

            reg_cs.COD_EMPRESA := var.CODIGO_EMPRESA;
            reg_cs.COD_PESSOA := var.CODIGO_PESSOA_TITULAR;
            reg_cs.COD_PESSOA_RELAC := var.CODIGO_PESSOA_BENEFICIARIO;
            reg_cs.TP_RELACIONAMENTO := var.CODIGO_TIPO_RELACIONAMENTO;
            reg_cs.OCORRENCIA := 1;
            reg_cs.LOGIN_USUARIO := vUSUARIO_ATUALIZACAO;
            reg_cs.DT_ULT_ALTER_USUA := sysdate;


            BEGIN
                 Insert into RHPESS_RL_PESS_PES values reg_cs;
                 vQTDE_LINHAS_AFETADAS := sql%rowcount;

                 vRETORNO := 1;
                 commit;

            EXCEPTION
            WHEN OTHERS THEN
                 raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;
        ELSE
            IF vCODIGO_TIPO_RELAC <> var.CODIGO_TIPO_RELACIONAMENTO THEN
                update RHPESS_RL_PESS_PES
                   set TP_RELACIONAMENTO = var.CODIGO_TIPO_RELACIONAMENTO,
                       LOGIN_USUARIO = vUSUARIO_ATUALIZACAO,
                       DT_ULT_ALTER_USUA = sysdate
                 where RHPESS_RL_PESS_PES.COD_EMPRESA = var.CODIGO_EMPRESA
                   and RHPESS_RL_PESS_PES.COD_PESSOA = var.CODIGO_PESSOA_TITULAR
                   and RHPESS_RL_PESS_PES.COD_PESSOA_RELAC = var.CODIGO_PESSOA_BENEFICIARIO;

                   GRAVA_LOG(pCODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_INFO, var.ID_ARQUIVO, var.NUMERO_LINHA, LOG_ALTERACAO_INFORMACAO, 'ATUALIZAÇÃO DE DADOS DE PESSOA PESSOA - TIPO DE RELACIONAMENTO |' || 'VALOR ANTERIOR: ' || vCODIGO_TIPO_RELAC || ' VALOR_ATUAL: ' || var.CODIGO_TIPO_RELACIONAMENTO);
                   vQTDE_LINHAS_AFETADAS := sql%rowcount;
                   vRETORNO := 2;
                   commit;
            END IF;
        END IF;
    END IF;

    RETURN vRETORNO;

END;

begin
DBMS_OUTPUT.ENABLE (buffer_size => NULL);
    vLISTA_LOG := LISTA_LOG();
    REG_LOG := LOG_PROCESSAMENTO(null, null,null, null);
    vRETORNO := RETORNO_PROCESSAMENTO(null,null,null);
------------------------------------------
-- INICIO MAPEAMENTO
 --------------montar lista Gabriel em 06/05/2019

BEGIN
LISTA_MAPEA_INCAP_LABOR_IS := MONTA_LISTA(COD_CONVER_INCAP_LABOR);
LISTA_MAPEA_RACA_COR_IS := MONTA_LISTA(COD_CONVER_RACA_COR);
LISTA_TIPO_RELACI_IS := MONTA_LISTA(COD_CONVER_TIPO_RELACIONAMENTO);
LISTA_ESTADO_CIVIL_IS := MONTA_LISTA(COD_CONVER_ESTADO_CIVIL);
LISTA_TIPO_LOGRADOURO_IS:= MONTA_LISTA(COD_CONVER_TIPO_LOGRADOURO);
LISTA_TIPO_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_TIPO_BENEFICIO);
LISTA_MOTIVO_CONCESSSAO_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CONCESSAO);
LISTA_MOTIVO_CANCEL_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CANCELAMENTO);
LISTA_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_BENEFICIO);
LISTA_CATEGORIA_PESSOA_IS := MONTA_LISTA(COD_CONVER_CATEGORIA_PESSOA);
END;
------------------------------ fim-----------------------------------------------------------------------------------

------------------------------------------

  BEGIN

  LISTA_MAPEAMENTOS_INVALIDOS := LISTA_EXCECOES();

  /*
  -- Mapeamento valores - Sexo
  BEGIN
       LISTA_MAPEA_SEXO := MAPEAR_VALORES(LISTA_SEXO_IS, COD_CONVER_SEXO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'SEXO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
  END;
  */
  -- Mapeamento valores - INCAPACIDADE LABORATIVA 
  BEGIN
       LISTA_MAPEA_INCAP_LABOR := MAPEAR_VALORES(LISTA_MAPEA_INCAP_LABOR_IS, COD_CONVER_INCAP_LABOR);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'INCAPACIDADE_LABORATIVA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE INCAPACIDADE LABORATIVA .');
  END;
  -- Mapeamento valores - RAÇA COR
  BEGIN
       LISTA_MAPEA_RACA_COR := MAPEAR_VALORES(LISTA_MAPEA_RACA_COR_IS, COD_CONVER_RACA_COR);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'RACA_COR';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE RACA COR.');
  END;


  -- Mapeamento valores - Tipo de Relacionamento
  BEGIN
       LISTA_MAPEA_TIPO_RELACI := MAPEAR_VALORES(LISTA_TIPO_RELACI_IS, COD_CONVER_TIPO_RELACIONAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE RELACIONAMENTO.');
  END;
  -- Mapeamento valores - Estado Civil
  BEGIN
       LISTA_MAPEA_ESTADO_CIVIL := MAPEAR_VALORES(LISTA_ESTADO_CIVIL_IS, COD_CONVER_ESTADO_CIVIL);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE ESTADO CIVIL.');
  END;
  -- Mapeamento valores - Tipo de Logradouro
  BEGIN
       LISTA_MAPEA_TIPO_LOGRADOURO := MAPEAR_VALORES(LISTA_TIPO_LOGRADOURO_IS, COD_CONVER_TIPO_LOGRADOURO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;

  -- Mapeamento valores - Tipo de Beneficio
  BEGIN
       LISTA_MAPEA_TIPO_BENEFICIO := MAPEAR_VALORES(LISTA_TIPO_BENEFICIO_IS, COD_CONVER_TIPO_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
  END;
  -- Mapeamento valores - Motivo Concessao
  BEGIN
       LISTA_MAPEA_MOTIVO_CONCESSAO := MAPEAR_VALORES(LISTA_MOTIVO_CONCESSSAO_IS, COD_CONVER_MOTIVO_CONCESSAO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE RELACIONAMENTO.');
  END;
  -- Mapeamento valores - Motivo Cancelamento
  BEGIN
       LISTA_MAPEA_MOTIVO_CANCEL := MAPEAR_VALORES(LISTA_MOTIVO_CANCEL_IS, COD_CONVER_MOTIVO_CANCELAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE ESTADO CIVIL.');
  END;
  -- Mapeamento valores - Beneficio
  BEGIN
       LISTA_MAPEA_BENEFICIO := MAPEAR_VALORES(LISTA_BENEFICIO_IS, COD_CONVER_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;
  -- Mapeamento valores - Categoria de Beneficiario
  BEGIN
       LISTA_MAPEA_CATEGORIA_PESSOA := MAPEAR_VALORES(LISTA_CATEGORIA_PESSOA_IS, COD_CONVER_CATEGORIA_PESSOA);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT > 0 THEN
     RAISE MAPEAMENTO_EXCEPTION;
  END IF;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT = 0 THEN
  -- Verifica se os codigos mapeados existem na base de dados
  BEGIN
    -- INCAPACIDADE LABORATIVA
    vCONTADOR_MAPEAMENTO_INVALIDO := 0;
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_DEFICIENCIA.COD_DEFICIENCIA AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_DEFICIENCIA
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_INCAP_LABOR
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_DEFICIENCIA.COD_DEFICIENCIA (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'INCAPACIDADE_LABORATIVA';
    END IF;

  -- RACA COR
    vCONTADOR_MAPEAMENTO_INVALIDO := 0;
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_RACA_COR.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_RACA_COR
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_RACA_COR
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_RACA_COR.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'RACA_COR';
    END IF;



    -- Tipo de Relacionamento
    vCONTADOR_MAPEAMENTO_INVALIDO := 0;
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_TIPO_RELAC.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_TIPO_RELAC
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_RELACIONAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_TIPO_RELAC.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
    END IF;

    -- Estado Civil
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_EST_CIVIL.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_EST_CIVIL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_ESTADO_CIVIL
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_EST_CIVIL.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
    END IF;

    -- Tipo de Logradouro
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_TP_LOGRAD.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_TP_LOGRAD
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_LOGRADOURO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_TP_LOGRAD.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
    END IF;

    -- Tipo de Beneficio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_TIPO_BENEF.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_TIPO_BENEF
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_TIPO_BENEF.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
    END IF;

    -- Motivo Concessao
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CONCES.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CONCES
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CONCESSAO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CONCES.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
    END IF;

    -- Motivo de Cancelamento
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CANCEL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CANCELAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
    END IF;

    -- Beneficio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_BENEFICIO.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_BENEFICIO
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_BENEFICIO.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
    END IF;

    -- Categoria de Pessoa
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_CAT_PESSOA.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_CAT_PESSOA
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_CATEGORIA_PESSOA
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_CAT_PESSOA.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
    END IF;

    IF LISTA_MAPEAMENTOS_INVALIDOS.count() > 0 THEN
       for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
       loop
           IF i = 1 THEN
              TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           ELSE
              TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           END IF;
       end loop;

       raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. HA PRESENCA DE CODIGO INEXISTENTES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
     END IF;
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;
  END IF;

  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN

     for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
     loop
         IF i = 1 THEN
            TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         ELSE
            TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         END IF;
     end loop;

     raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
  WHEN OTHERS THEN
     raise_application_error (-20001,'ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES.' ||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
  END;

-- FIM MAPEAMENTO
------------------------------------------

    -- Verifica se o codigo de empresa informado e valido
    IF PCODIGO_EMPRESA IS NULL THEN
       raise_application_error (-20001,'CODIGO_EMPRESA NAO INFORMADO.');
    END IF;

    BEGIN
         vCODIGO_EMPRESA := null;
         select CODIGO into vCODIGO_EMPRESA from RHORGA_EMPRESA where CODIGO = PCODIGO_EMPRESA;

         IF vCODIGO_EMPRESA IS NULL THEN
            raise_application_error (-20001,'CODIGO_EMPRESA INVALIDO.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O CODIGO_EMPRESA');
    END;

    BEGIN
         vID_ARQUIVO := null;
         select ID_ARQUIVO, SITUACAO into vID_ARQUIVO, vSITUACAO_ARQUIVO from RHPBH_ARQUIVO where ID_ARQUIVO = PID_ARQUIVO;

         IF vID_ARQUIVO IS NULL THEN
            raise_application_error (-20001,'ID ARQUIVO INVALIDO.');
         END IF;

         IF vSITUACAO_ARQUIVO NOT IN ('00','01','02','03','04','05','06','07') THEN
            raise_application_error (-20001,'O ARQUIVO INFORMADO ESTA COM SITUACAO INVALIDA. ENTRE EM CONTATO COM O SUPORTE TECNICO DA PBH.');
         END IF;

         CASE WHEN vSITUACAO_ARQUIVO = '07' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA COM PROCESSAMENTO JÁ CONCLUIDO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO = '01' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA CANCELADO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO in ('02','04','06') THEN raise_application_error (-20002,'O ARQUIVO INFORMADO JÁ ESTÁ EM PROCESSAMENTO E NAO PODE HAVER PROCESSAMENTOS COMCOMITANTES PARA O MESMO ARQUIVO.');
              WHEN vSITUACAO_ARQUIVO = '00' THEN
                   IF PACAO NOT IN (1,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO É COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÁ COM A SITUACAO CARREGADO E AS ACOES PERMITIDA SAO 1 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '03' THEN
                   IF PACAO NOT IN (2,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO É COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÁ COM A SITUACAO VALIDACAO DE LEIAUTE PROCESSADA E AS ACOES PERMITIDA SAO 2 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '05' THEN
                   IF PACAO NOT IN (3,4,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO É COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÁ COM A SITUACAO PROCESSADO E AS ACOES PERMITIDA SAO 3 ou 10.');
                   END IF;
              ELSE
                  NULL;
         END CASE;

         PR_SET_SITUACAO_PROCESSAMENTO(vSITUACAO_ARQUIVO);
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O ARQUIVO COM O ID_ARQUIVO INFORMADO.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '70');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '71');

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '72');

    -- Verifica se ha algum arquivo de beneficiario
    -- a ser processado
    BEGIN
         IF PACAO = 1 THEN
             VCONTADOR := null;
             select count(1) into VCONTADOR
               from RHPBH_ARQUIVO
              where CODIGO_EMPRESA = PCODIGO_EMPRESA
                and TIPO_ARQUIVO = ARQUIVO_BENEFICIARIOS
                and ID_ARQUIVO = PID_ARQUIVO
                and SITUACAO in ('00');

             IF VCONTADOR = 0 THEN
                raise_application_error (-20002,'NAO EXISTE ARQUIVO DE BENEFICIARIO A SER PROCESSADO PARA OS PARAMETROS INFORMADOS.');
             END IF;
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO EXISTE ARQUIVO DE BENEFICIARIO A SER PROCESSADO PARA OS PARAMETROS INFORMADOS.');
    END;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '73');

    -- VALIDAR LEIAUTE ARQUIVO
    IF PACAO in (1, 10) THEN
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = ARQUIVO_BENEFICIARIOS
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('00')
         order by ID_ARQUIVO)
         loop
            PR_SET_SITUACAO_PROCESSAMENTO('02');
            PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

            BEGIN
                PR_VALIDAR_LEIAUTE_ARQUIVO (C1.ID_ARQUIVO);
            EXCEPTION
            WHEN OTHERS THEN
                 raise_application_error (-20002,'ERRO AO TENTAR VALIDAR O LEIAUTE DO ARQUIVO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

         end loop;

         PR_SET_SITUACAO_PROCESSAMENTO('03');
         PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
         PR_ATUALIZAR_SITUACAO_REGISTR0;

         commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DIRF. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '74');

    IF PACAO in (2, 10) THEN
    -- PROCESSAR ARQUIVO
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = ARQUIVO_BENEFICIARIOS
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('03', '05')
         order by ID_ARQUIVO)
         loop

            BEGIN

            PR_SET_SITUACAO_PROCESSAMENTO('04');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

            -- Remove os registros relacionados ao arquivo de ID informado
             BEGIN
                delete from RHPBH_PS_BENEFICIARIO where ID_ARQUIVO = C1.ID_ARQUIVO;
             EXCEPTION
             WHEN OTHERS THEN
                dbms_output.put_line('ERRO AO TENTAR EXCLUIR RHPBH_PS_BENEFICIARIO');
                NULL;
             END;

             -- Insere os registros relacionados ao arquivo de ID informado
             -- para processamento
             BEGIN
                insert into RHPBH_PS_BENEFICIARIO(
                ID_ARQUIVO,
                NUMERO_LINHA,
                IDENTIFICADOR_ARQUIVO,
                DATA_HORA_GERACAO_ARQUIVO,
                SEQUENCIAL_REGISTRO,
                TIPO_OPERACAO,
                CODIGO_EMPRESA,
                CODIGO_CONTRATO,
                CPF,
                NOME,
                DATA_NASCIMENTO,
                CODIGO_SEXO,
				CODIGO_RACA_COR,
				CODIGO_IMCAP_LABOR,
                CODIGO_TIPO_RELACIONAMENTO,
                CODIGO_ESTADO_CIVIL,
                IDENTIDADE,
                NOME_DA_MAE,
                CODIGO_TIPO_LOGRADOURO,
                ENDERECO,
                NUMERO,
                COMPLEMENTO,
                BAIRRO,
                CODIGO_MUNICIPIO,
                UF,
                CEP,
                DDD_TELEFONE_FIXO,
                NUMERO_TELEFONE_FIXO,
                DDD_TELEFONE_CELULAR,
                NUMERO_TELEFONE_CELULAR,
                DATA_CADASTRAMENTO
                )
                (
                select
                ID_ARQUIVO,
                NUMERO_LINHA,
                IDENTIFICADOR_ARQUIVO,
                TRUNC(TO_DATE(DATA_HORA_GERACAO_ARQUIVO,'DD/MM/YYYY HH24:MI:SS')) AS DATA_HORA_GERACAO_ARQUIVO,
                SEQUENCIAL_REGISTRO,
                TIPO_OPERACAO,
                CODIGO_EMPRESA,
                LPAD(TRIM(CODIGO_CONTRATO),15,'0') AS CODIGO_CONTRATO,
                CPF,
                TRIM(NOME) AS NOME,
                TRUNC(TO_DATE(DATA_NASCIMENTO,'DD/MM/YYYY')) AS DATA_NASCIMENTO,
                CODIGO_SEXO,
				CODIGO_RACA_COR,
				CODIGO_IMCAP_LABOR,
                CODIGO_TIPO_RELACIONAMENTO,
                CODIGO_ESTADO_CIVIL,
                TRIM(IDENTIDADE) AS IDENTIDADE,
                TRIM(NOME_DA_MAE) AS NOME_DA_MAE,
                CODIGO_TIPO_LOGRADOURO,
                TRIM(ENDERECO) AS ENDERECO,
                TRIM(NUMERO) AS NUMERO,
                TRIM(COMPLEMENTO) AS COMPLEMENTO,
                TRIM(BAIRRO) AS BAIRRO,
                TO_NUMBER(CODIGO_MUNICIPIO) AS CODIGO_MUNICIPIO,
                UF,
                CEP,
                SUBSTR(TELEFONE_FIXO,1,2) AS DDD_TELEFONE_FIXO,
                SUBSTR(TELEFONE_FIXO,3) AS NUMERO_TELEFONE_FIXO,
                SUBSTR(TELEFONE_CELULAR,1,2) AS DDD_TELEFONE_CELULAR,
                SUBSTR(TELEFONE_CELULAR,3) AS NUMERO_TELEFONE_CELULAR,
                TRUNC(TO_DATE(DATA_CADASTRAMENTO,'DD/MM/YYYY HH24:MI:SS')) AS DATA_CADASTRAMENTO
                from VW_ARQUIVO_0002
                where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and SITUACAO_LINHA = '00'
                )
                ;

                COMMIT;

                select max(SITUACAO_ARQUIVO) into VCONTADOR
                  from (select * from VW_ARQUIVO_0002)
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;
                dbms_output.put_line('VW_ARQUIVO_0002 - ' || VCONTADOR || ' REGISTROS.');

                select count(1) into VCONTADOR
                  from RHPBH_PS_BENEFICIARIO
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;

                dbms_output.put_line('RHPBH_PS_BENEFICIARIO - ' || VCONTADOR || ' REGISTROS.');
             EXCEPTION
             WHEN OTHERS THEN
             --dbms_output.put_line('ERRO AO TENTAR INCLUIR RHPBH_PS_BENEFICIARIO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
             NULL;
             END;
-- AQUI NOVO
                --dbms_output.put_line('PASSO P3');

            EXCEPTION
            WHEN OTHERS THEN
               --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
               raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE BENEFICIARIOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            dbms_output.put_line('VALIDACAO REGRAS');
            -- Regra 1
            -- Valida Identificador do arquivo
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.IDENTIFICADOR_ARQUIVO <> ARQUIVO_BENEFICIARIOS
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'IDENTIFICADOR_ARQUIVO = '||R2.IDENTIFICADOR_ARQUIVO);
            end loop;

            vIDENTIFICADOR_REGRA := '1';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 2
            -- Validar codigo do sexo
            --
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CODIGO_SEXO not member (LISTA_MAPEA_SEXO)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_SEXO_INVALIDO, 'CODIGO SEXO = '||R2.CODIGO_SEXO);
            end loop;

            vIDENTIFICADOR_REGRA := '2';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 3
            -- Valida tipo de operação
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.TIPO_OPERACAO NOT IN('I','A')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'OPERACAO = '||R2.TIPO_OPERACAO);
            end loop;

            vIDENTIFICADOR_REGRA := '3';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 4
            -- Valida tipo de relacionamento
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.CODIGO_TIPO_RELACIONAMENTO not member (LISTA_MAPEA_TIPO_RELACI)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_TIPO_RELAC_INVALIDO, 'CODIGO_TIPO_RELACIONAMENTO = '||R2.CODIGO_TIPO_RELACIONAMENTO);
            end loop;

            vIDENTIFICADOR_REGRA := '4';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 5
            -- Valida Estado Civil
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.CODIGO_ESTADO_CIVIL not member (LISTA_MAPEA_ESTADO_CIVIL)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_ESTADO_CIVIL_INVALIDO, 'CODIGO_ESTADO_CIVIL = '||R2.CODIGO_ESTADO_CIVIL);
            end loop;

            vIDENTIFICADOR_REGRA := '5';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 6
            -- Valida tipo de logradouro
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.CODIGO_TIPO_LOGRADOURO not member (LISTA_MAPEA_TIPO_LOGRADOURO)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_TIPO_LOGRADOURO_INVALIDO, 'CODIGO_TIPO_LOGRADOURO = '||R2.CODIGO_TIPO_LOGRADOURO);
            end loop;

            vIDENTIFICADOR_REGRA := '6';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            dbms_output.put_line('VALIDACAO 7');
            -- Regra 7
            -- Valida codigo do municipio
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CODIGO_MUNICIPIO IS NOT NULL
                  and not exists(

                  select * from RHTABS_MUNICIPIO
                   where TRIM(CODIGO_IBGE) = TO_CHAR(CS.CODIGO_MUNICIPIO)
                  )
            )
            loop
            dbms_output.put_line('GRAVA LOG 7');
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_MUNICIPIO_INVALIDO, 'CODIGO_MUNICIPIO = '||R2.CODIGO_MUNICIPIO);
            end loop;


            vIDENTIFICADOR_REGRA := '7';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 8
            -- Valida data de nascimento com data futura
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.DATA_NASCIMENTO > sysdate
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DATA_FUTURA, 'DATA FUTURA (DATA_NASCIMENTO) = '||R2.DATA_NASCIMENTO );
            end loop;

            vIDENTIFICADOR_REGRA := '8';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 9
            -- Valida codigo da empresa
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where ID_ARQUIVO = C1.ID_ARQUIVO
              and not exists(
            select CODIGO from RHORGA_EMPRESA where CODIGO = CS.CODIGO_EMPRESA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_EMPRESA_INVALIDO, R2.CODIGO_EMPRESA);
            end loop;

            vIDENTIFICADOR_REGRA := '9';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 10
            -- Valida codigo do Contrato
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
               and not exists(
            select CODIGO_CONTRATO from RHPESS_CONTR_MEST
             where CODIGO_EMPRESA = CS.CODIGO_EMPRESA
               and CODIGO_CONTRATO = CS.CODIGO_CONTRATO
               AND TIPO_CONTRATO=vTIPO_CONTRATO
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_CONTRATO_INVALIDO, R2.CODIGO_CONTRATO);
            end loop;

            vIDENTIFICADOR_REGRA := '10';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 11
            -- Valida UF
            for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.UF NOT IN('AC','AL','AM','AP','BA','CE','DF','ES','GO','MA','MG','MS','MT','PA','PB','PE','PI','PR','RJ','RN','RO','RR','RS','SC','SE','SP','TO')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_UF_ENDERECO_INVALIDO, 'UF = '||R2.UF);
            end loop;

            vIDENTIFICADOR_REGRA := '11';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 12
            -- Valida incapacidade_laborativa
           for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.CODIGO_IMCAP_LABOR not member (LISTA_MAPEA_INCAP_LABOR)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_INCAPACIDADE_LABOR, 'INCAPACIDADE_LABOR = '||R2.CODIGO_IMCAP_LABOR);
            end loop;


            vIDENTIFICADOR_REGRA := '12';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 13
            -- Valida RACA_COR
           for R2 in (
                select * from RHPBH_PS_BENEFICIARIO CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                  and ID_ARQUIVO = C1.ID_ARQUIVO
                  and CS.CODIGO_RACA_COR not member (LISTA_MAPEA_RACA_COR)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_RACA_COR_INVALIDO, 'RACA_COR = '||R2.CODIGO_RACA_COR);
            end loop;


            vIDENTIFICADOR_REGRA := '13';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');





            PR_SET_SITUACAO_PROCESSAMENTO('05');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

         end loop;

         commit;
         -- Atualizar a situacao dos registros
         --PR_ATUALIZAR_SITUACAO_REGISTR0;

    EXCEPTION
    WHEN OTHERS THEN
       ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE BENEFICIARIOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

END IF; -- FIM PACAO = 2

IF PACAO in (2, 10) THEN
   vCONTADOR := 0;
   vCONTADOR_SEQUENCIAL_REGISTRO := 0;

   PR_SET_SITUACAO_PROCESSAMENTO('04');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    FOR C_INC in(

        select CS.*
          from RHPBH_PS_BENEFICIARIO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
         order by CS.NUMERO_LINHA
    )
    loop

    -- Pessoa do Titular deve existir na base de dados de pessoa
    BEGIN
      select P.CODIGO
        into vCODIGO_PESSOA_TITULAR
        from RHPESS_PESSOA P, RHPESS_CONTRATO C
       where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
         and P.CODIGO_EMPRESA = C.CODIGO_EMPRESA
         and P.CODIGO = C.CODIGO_PESSOA
         and C.TIPO_CONTRATO = vTIPO_CONTRATO
         and C.CODIGO = C_INC.CODIGO_CONTRATO
         AND P.DT_TERMINO IS NULL
         and C.ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                       from RHPESS_CONTRATO AUX
                                      where AUX.CODIGO_EMPRESA = C.CODIGO_EMPRESA
                                        and AUX.TIPO_CONTRATO = C.TIPO_CONTRATO
                                        and AUX.CODIGO = C.CODIGO
                                        and AUX.ANO_MES_REFERENCIA <= sysdate
                                    )
         ;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_TITULAR_NAO_ENCONTRADO, C_INC.CODIGO_CONTRATO);
    WHEN OTHERS THEN
         NULL;
    END;

    -- CPF do Servidor deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CPF);

    IF NOT vCPF_VALIDO THEN
       --raise_application_error (-20003,'CPF INVALIDO - ' || REGISTRO_BENEFICIARIO.CPF);
       --GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'CPF INVALIDO', REGISTRO_BENEFICIARIO.CPF);
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_INVALIDO, C_INC.CPF);
    ELSE
        vQTDE_REGISTROS_EXISTENTES := 0;
        -- Verifica se pessoa já existe
        BEGIN
          select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12),
                 NOME, DATA_NASCIMENTO, SEXO,
                 ESTADO_CIVIL, IDENTIDADE, C_LIVRE_DESCR12
            into vCODIGO_PESSOA, vDATA_NASCIMENTO, vIDADE,
                 vPESSOA_NOME, vPESSOA_DATA_NASCIMENTO, vPESSOA_SEXO,
                 vPESSOA_ESTADO_CIVIL, vPESSOA_IDENTIDADE, vPESSOA_NOME_DA_MAE
            from RHPESS_PESSOA P
           where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
             and P.CPF = C_INC.CPF
             AND P.DT_TERMINO IS NULL;

          vQTDE_REGISTROS_EXISTENTES := 1;
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
             vCODIGO_PESSOA := NULL;
             vDATA_NASCIMENTO := NULL;
             vIDADE := NULL;
             vPESSOA_NOME := NULL;
             vPESSOA_DATA_NASCIMENTO := NULL;
             vPESSOA_SEXO := NULL;
             vPESSOA_ESTADO_CIVIL := NULL;
             vPESSOA_IDENTIDADE := NULL;
             vPESSOA_NOME_DA_MAE := NULL;
        WHEN TOO_MANY_ROWS THEN
            BEGIN
                 vQTDE_REGISTROS_EXISTENTES := 2;

                  select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12),
                         NOME, DATA_NASCIMENTO, SEXO,
                         ESTADO_CIVIL, IDENTIDADE, C_LIVRE_DESCR12
                    into vCODIGO_PESSOA, vDATA_NASCIMENTO, vIDADE,
                         vPESSOA_NOME, vPESSOA_DATA_NASCIMENTO, vPESSOA_SEXO,
                         vPESSOA_ESTADO_CIVIL, vPESSOA_IDENTIDADE, vPESSOA_NOME_DA_MAE
                    from RHPESS_PESSOA P
                   where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                     and P.CPF = C_INC.CPF
                     and P.DATA_NASCIMENTO = C_INC.DATA_NASCIMENTO
                     AND P.DT_TERMINO IS NULL;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 vCODIGO_PESSOA := NULL;
                 vDATA_NASCIMENTO := NULL;
                 vIDADE := NULL;
                 vPESSOA_NOME := NULL;
                 vPESSOA_DATA_NASCIMENTO := NULL;
                 vPESSOA_SEXO := NULL;
                 vPESSOA_ESTADO_CIVIL := NULL;
                 vPESSOA_IDENTIDADE := NULL;
                 vPESSOA_NOME_DA_MAE := NULL;
            WHEN TOO_MANY_ROWS THEN
                BEGIN
                      select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12),
                             NOME, DATA_NASCIMENTO, SEXO,
                             ESTADO_CIVIL, IDENTIDADE, C_LIVRE_DESCR12
                        into vCODIGO_PESSOA, vDATA_NASCIMENTO, vIDADE,
                             vPESSOA_NOME, vPESSOA_DATA_NASCIMENTO, vPESSOA_SEXO,
                             vPESSOA_ESTADO_CIVIL, vPESSOA_IDENTIDADE, vPESSOA_NOME_DA_MAE
                        from RHPESS_PESSOA P
                       where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                         and P.CPF = C_INC.CPF
                         AND P.DT_TERMINO IS NULL
                         and P.DATA_NASCIMENTO = C_INC.DATA_NASCIMENTO
                         and exists (
                      select *
                        from RHPESS_RL_PESS_PES PP
                       where PP.COD_EMPRESA = C_INC.CODIGO_EMPRESA
                         and PP.COD_PESSOA_RELAC in (select CODIGO from RHPESS_PESSOA
                                                      where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                                                        and CPF = C_INC.CPF
                                                        AND DT_TERMINO IS NULL)
                         and PP.COD_PESSOA = (
                                             select CODIGO_PESSOA
                                               from RHPESS_CONTRATO A
                                              where A.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                                                and A.TIPO_CONTRATO = vTIPO_CONTRATO
                                                and A.CODIGO = C_INC.CODIGO_CONTRATO
                                                and A.ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                                              from RHPESS_CONTRATO B
                                                                             where B.CODIGO_EMPRESA = A.CODIGO_EMPRESA
                                                                               and B.TIPO_CONTRATO = A.TIPO_CONTRATO
                                                                               and B.CODIGO = A.CODIGO
                                                                            )
                                             )
                         and TP_RELACIONAMENTO member (LISTA_MAPEA_TIPO_RELACI)
                         );
                EXCEPTION
                WHEN OTHERS THEN

                     BEGIN
                    select CODIGO, DATA_NASCIMENTO, trunc(months_between(sysdate, DATA_NASCIMENTO)/12),
                           NOME, DATA_NASCIMENTO, SEXO,
                           ESTADO_CIVIL, IDENTIDADE, C_LIVRE_DESCR12
                      into vCODIGO_PESSOA, vDATA_NASCIMENTO, vIDADE,
                           vPESSOA_NOME, vPESSOA_DATA_NASCIMENTO, vPESSOA_SEXO,
                           vPESSOA_ESTADO_CIVIL, vPESSOA_IDENTIDADE, vPESSOA_NOME_DA_MAE
                      from RHPESS_PESSOA P
                     where P.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                     AND P.DT_TERMINO IS NULL
                       and P.CPF = C_INC.CPF
                       and P.CODIGO = (
                           select MIN(CODIGO)
                             from RHPESS_PESSOA AUX
                            where AUX.CODIGO_EMPRESA = P.CODIGO_EMPRESA
                              and AUX.CPF = P.CPF
                              AND AUX.DT_TERMINO IS NULL

                       );
                     EXCEPTION
                     WHEN OTHERS THEN
                           NULL;
                     END;

                     NULL;
                END;
            WHEN OTHERS THEN
                 NULL;
            END;
        WHEN OTHERS THEN
             NULL;
        END;

    END IF;

    CASE WHEN vQTDE_REGISTROS_EXISTENTES = 0 THEN vSITUACAO_IMPORTACAO := '00';
         WHEN vQTDE_REGISTROS_EXISTENTES = 1 THEN vSITUACAO_IMPORTACAO := '01';
         WHEN vQTDE_REGISTROS_EXISTENTES > 1 THEN vSITUACAO_IMPORTACAO := '02';
         ELSE vSITUACAO_IMPORTACAO := '99';
    END CASE;

    update RHPBH_PS_BENEFICIARIO
       set CODIGO_PESSOA_TITULAR = vCODIGO_PESSOA_TITULAR,
           CODIGO_PESSOA_BENEFICIARIO = vCODIGO_PESSOA,
           SITUACAO_IMPORTACAO = vSITUACAO_IMPORTACAO
     where ID_ARQUIVO = C_INC.ID_ARQUIVO
       and NUMERO_LINHA = C_INC.NUMERO_LINHA;

    IF C_INC.TIPO_OPERACAO = 'A' and vCODIGO_PESSOA IS NULL THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_ALTER_REG_NAO_EXISTE, C_INC.CPF);
    END IF;

    IF MOD(vCONTADOR,1000) = 0 THEN
       COMMIT;
    END IF;

    vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;


    vCONTADOR := 0;

    -- Atualizar a situacao dos registros
    PR_ATUALIZAR_SITUACAO_REGISTR0;

    PR_SET_SITUACAO_PROCESSAMENTO('05');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;

IF PACAO in (3, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('06');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    -- #### INICIO OPERACAO ALTERACAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_BENEFICIARIO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.TIPO_OPERACAO = 'A'
         order by CS.NUMERO_LINHA
    )
    loop

        BEGIN
             REG_PBH_CS.ID_ARQUIVO := C_INC.ID_ARQUIVO;
             REG_PBH_CS.NUMERO_LINHA := C_INC.NUMERO_LINHA;
             REG_PBH_CS.TIPO_OPERACAO := C_INC.TIPO_OPERACAO;
             REG_PBH_CS.CODIGO_EMPRESA := C_INC.CODIGO_EMPRESA;
             --REG_PBH_CS.TIPO_CONTRATO := C_INC.TIPO_CONTRATO;
             REG_PBH_CS.CODIGO_CONTRATO := C_INC.CODIGO_CONTRATO;
             REG_PBH_CS.CPF := C_INC.CPF;
             REG_PBH_CS.NOME := C_INC.NOME;
             REG_PBH_CS.DATA_NASCIMENTO := C_INC.DATA_NASCIMENTO;
             REG_PBH_CS.CODIGO_SEXO := C_INC.CODIGO_SEXO;
			 REG_PBH_CS.CODIGO_RACA_COR := C_INC.CODIGO_RACA_COR;
			 REG_PBH_CS.CODIGO_IMCAP_LABOR := C_INC.CODIGO_IMCAP_LABOR;
             REG_PBH_CS.CODIGO_TIPO_RELACIONAMENTO := C_INC.CODIGO_TIPO_RELACIONAMENTO;
             REG_PBH_CS.CODIGO_ESTADO_CIVIL := C_INC.CODIGO_ESTADO_CIVIL;
             REG_PBH_CS.CODIGO_TIPO_LOGRADOURO := C_INC.CODIGO_TIPO_LOGRADOURO;
             REG_PBH_CS.IDENTIDADE := C_INC.IDENTIDADE;
             REG_PBH_CS.NOME_DA_MAE := C_INC.NOME_DA_MAE;
             REG_PBH_CS.ENDERECO := C_INC.ENDERECO;
             REG_PBH_CS.NUMERO := C_INC.NUMERO;
             REG_PBH_CS.COMPLEMENTO := C_INC.COMPLEMENTO;
             REG_PBH_CS.BAIRRO := C_INC.BAIRRO;
             REG_PBH_CS.CODIGO_MUNICIPIO := C_INC.CODIGO_MUNICIPIO;
             REG_PBH_CS.UF := C_INC.UF;
             REG_PBH_CS.CEP := C_INC.CEP;
             REG_PBH_CS.DDD_TELEFONE_FIXO := C_INC.DDD_TELEFONE_FIXO;
             REG_PBH_CS.NUMERO_TELEFONE_FIXO := C_INC.NUMERO_TELEFONE_FIXO;
             REG_PBH_CS.DDD_TELEFONE_CELULAR := C_INC.DDD_TELEFONE_CELULAR;
             REG_PBH_CS.NUMERO_TELEFONE_CELULAR := C_INC.NUMERO_TELEFONE_CELULAR;
             REG_PBH_CS.DATA_CADASTRAMENTO := C_INC.DATA_CADASTRAMENTO;
             REG_PBH_CS.CODIGO_PESSOA_TITULAR := C_INC.CODIGO_PESSOA_TITULAR;
             REG_PBH_CS.CODIGO_PESSOA_BENEFICIARIO := C_INC.CODIGO_PESSOA_BENEFICIARIO;

             vCODIGO_PESSOA_BENEFICIARIO := C_INC.CODIGO_PESSOA_BENEFICIARIO;

                 -- Se CPF existe em duplicidade, então a alteração não é feita, porém o fato é registrado no log
                 IF C_INC.CODIGO_PESSOA_BENEFICIARIO IS NOT NULL AND C_INC.SITUACAO_IMPORTACAO = '02' THEN
                   GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_JA_EXISTENTE_DUPLICADO, C_INC.CPF);
                ELSIF C_INC.CODIGO_PESSOA_BENEFICIARIO IS NOT NULL AND C_INC.SITUACAO_IMPORTACAO <> '02' THEN

                   BEGIN
                   -- Altera beneficiário
                   dbms_output.put_line('ALTERAR_BENEFICIARIO');
                   vQTDE_LINHAS_AFETADAS := ALTERAR_BENEFICIARIO(REG_PBH_CS);
                   dbms_output.put_line('REGISTRAR_TIPO_RELACIONAMENTO');
                   vQTDE_LINHAS_AFETADAS := REGISTRAR_TIPO_RELACIONAMENTO(REG_PBH_CS);


                   IF C_INC.CODIGO_PESSOA_BENEFICIARIO<> C_INC.CODIGO_PESSOA_TITULAR THEN

                       BEGIN

                          -- endereco
                           vQTDE_LINHAS_AFETADAS := REGISTRAR_ENDERECO(REG_PBH_CS);
                       EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE ENDERECO. '||SQLCODE||' -ERROR- '||SQLERRM);
                       END;

                       BEGIN
                           -- telefone fixo
                           IF C_INC.DDD_TELEFONE_FIXO IS NOT NULL AND C_INC.NUMERO_TELEFONE_FIXO IS NOT NULL THEN
                              vTELEFONE_DDD := TO_NUMBER(C_INC.DDD_TELEFONE_FIXO);
                              vTELEFONE_NUMERO := C_INC.NUMERO_TELEFONE_FIXO;
                              vTIPO_TELEFONE := '0001';
                              vQTDE_LINHAS_AFETADAS := REGISTRAR_TELEFONE(C_INC.CODIGO_EMPRESA, vCODIGO_PESSOA_BENEFICIARIO, vTIPO_TELEFONE, vTELEFONE_DDD, vTELEFONE_NUMERO);
                           END IF;
                           -- telefone celular
                           IF C_INC.DDD_TELEFONE_CELULAR IS NOT NULL AND C_INC.NUMERO_TELEFONE_CELULAR IS NOT NULL THEN
                              vTELEFONE_DDD := TO_NUMBER(C_INC.DDD_TELEFONE_CELULAR);
                              vTELEFONE_NUMERO := C_INC.NUMERO_TELEFONE_CELULAR;
                              vTIPO_TELEFONE := '0002';
                              vQTDE_LINHAS_AFETADAS := REGISTRAR_TELEFONE(C_INC.CODIGO_EMPRESA, vCODIGO_PESSOA_BENEFICIARIO, vTIPO_TELEFONE, vTELEFONE_DDD, vTELEFONE_NUMERO);
                           END IF;
                       EXCEPTION
                       WHEN OTHERS THEN
                            dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE TELEFONE. '||SQLCODE||' -ERROR- '||SQLERRM);
                       END;


                   END IF;

                   EXCEPTION
                   WHEN OTHERS THEN
                        dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE BENEFICIARIO. '||SQLCODE||' -ERROR- '||SQLERRM);
                   END;

                   GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_ALTERACAO, NULL);

             END IF;

        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR ALTERAR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO ALTERACAO ####

    -- #### INICIO OPERACAO INCLUSAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_BENEFICIARIO CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.TIPO_OPERACAO = 'I'
         order by CS.NUMERO_LINHA
    )
    loop

        BEGIN
             REG_PBH_CS.ID_ARQUIVO := C_INC.ID_ARQUIVO;
             REG_PBH_CS.NUMERO_LINHA := C_INC.NUMERO_LINHA;
             REG_PBH_CS.TIPO_OPERACAO := C_INC.TIPO_OPERACAO;
             REG_PBH_CS.CODIGO_EMPRESA := C_INC.CODIGO_EMPRESA;
             --REG_PBH_CS.TIPO_CONTRATO := C_INC.TIPO_CONTRATO;
             REG_PBH_CS.CODIGO_CONTRATO := C_INC.CODIGO_CONTRATO;
             REG_PBH_CS.CPF := C_INC.CPF;
             REG_PBH_CS.NOME := C_INC.NOME;
             REG_PBH_CS.DATA_NASCIMENTO := C_INC.DATA_NASCIMENTO;
             REG_PBH_CS.CODIGO_SEXO := C_INC.CODIGO_SEXO;
			 REG_PBH_CS.CODIGO_RACA_COR := C_INC.CODIGO_RACA_COR;
			 REG_PBH_CS.CODIGO_IMCAP_LABOR := C_INC.CODIGO_IMCAP_LABOR;
             REG_PBH_CS.CODIGO_TIPO_RELACIONAMENTO := C_INC.CODIGO_TIPO_RELACIONAMENTO;
             REG_PBH_CS.CODIGO_ESTADO_CIVIL := C_INC.CODIGO_ESTADO_CIVIL;
             REG_PBH_CS.CODIGO_TIPO_LOGRADOURO := C_INC.CODIGO_TIPO_LOGRADOURO;
             REG_PBH_CS.IDENTIDADE := C_INC.IDENTIDADE;
             REG_PBH_CS.NOME_DA_MAE := C_INC.NOME_DA_MAE;
             REG_PBH_CS.ENDERECO := C_INC.ENDERECO;
             REG_PBH_CS.NUMERO := C_INC.NUMERO;
             REG_PBH_CS.COMPLEMENTO := C_INC.COMPLEMENTO;
             REG_PBH_CS.BAIRRO := C_INC.BAIRRO;
             REG_PBH_CS.CODIGO_MUNICIPIO := C_INC.CODIGO_MUNICIPIO;
             REG_PBH_CS.UF := C_INC.UF;
             REG_PBH_CS.CEP := C_INC.CEP;
             REG_PBH_CS.DDD_TELEFONE_FIXO := C_INC.DDD_TELEFONE_FIXO;
             REG_PBH_CS.NUMERO_TELEFONE_FIXO := C_INC.NUMERO_TELEFONE_FIXO;
             REG_PBH_CS.DDD_TELEFONE_CELULAR := C_INC.DDD_TELEFONE_CELULAR;
             REG_PBH_CS.NUMERO_TELEFONE_CELULAR := C_INC.NUMERO_TELEFONE_CELULAR;
             REG_PBH_CS.DATA_CADASTRAMENTO := C_INC.DATA_CADASTRAMENTO;
             REG_PBH_CS.CODIGO_PESSOA_TITULAR := C_INC.CODIGO_PESSOA_TITULAR;
             REG_PBH_CS.CODIGO_PESSOA_BENEFICIARIO := C_INC.CODIGO_PESSOA_BENEFICIARIO;
             -- Se pessoa não existir,
             -- Inclui pessoa, tipo relacioanmento, endereço e telefone
             IF C_INC.CODIGO_PESSOA_BENEFICIARIO IS NULL THEN
                -- recupera a última ocorrência de beneficios de concessões
                -- conforme chave primária
                vCODIGO_PESSOA_BENEFICIARIO := OBTER_CODIGO_PESSOA_BENEFIC(PID_ARQUIVO,C_INC.CODIGO_CONTRATO,C_INC.CPF,C_INC.CODIGO_EMPRESA);

                REG_PBH_CS.CODIGO_PESSOA_BENEFICIARIO := vCODIGO_PESSOA_BENEFICIARIO;
                dbms_output.put_line('3:'||REG_PBH_CS.CODIGO_PESSOA_BENEFICIARIO);
                 BEGIN
                 -- Inclui novo beneficiário
                 vQTDE_LINHAS_AFETADAS := INCLUIR_BENEFICIARIO(vCODIGO_PESSOA_BENEFICIARIO, REG_PBH_CS);

                 vQTDE_LINHAS_AFETADAS := REGISTRAR_TIPO_RELACIONAMENTO(REG_PBH_CS);

                 EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE BENEFICIARIO. '||SQLCODE||' -ERROR- '||SQLERRM);
                 END;

               IF C_INC.CODIGO_PESSOA_BENEFICIARIO<> C_INC.CODIGO_PESSOA_TITULAR   THEN

                     BEGIN

                        -- endereco
                        dbms_output.put_line('INCLUSAO - REGISTRAR_ENDERECO');
                         vQTDE_LINHAS_AFETADAS := REGISTRAR_ENDERECO(REG_PBH_CS);
                     EXCEPTION
                     WHEN OTHERS THEN
                          dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE ENDERECO. '||SQLCODE||' -ERROR- '||SQLERRM);
                          dbms_output.put_line('3:'||vCODIGO_PESSOA_BENEFICIARIO);
                     END;

                     BEGIN
                         -- telefone fixo
                         IF C_INC.DDD_TELEFONE_FIXO IS NOT NULL AND C_INC.NUMERO_TELEFONE_FIXO IS NOT NULL THEN
                            vTELEFONE_DDD := TO_NUMBER(C_INC.DDD_TELEFONE_FIXO);
                            vTELEFONE_NUMERO := C_INC.NUMERO_TELEFONE_FIXO;
                            vTIPO_TELEFONE := '0001';
                            vQTDE_LINHAS_AFETADAS := REGISTRAR_TELEFONE(C_INC.CODIGO_EMPRESA, vCODIGO_PESSOA_BENEFICIARIO, vTIPO_TELEFONE, vTELEFONE_DDD, vTELEFONE_NUMERO);
                         END IF;
                         -- telefone celular
                         IF C_INC.DDD_TELEFONE_CELULAR IS NOT NULL AND C_INC.NUMERO_TELEFONE_CELULAR IS NOT NULL THEN
                            vTELEFONE_DDD := TO_NUMBER(C_INC.DDD_TELEFONE_CELULAR);
                            vTELEFONE_NUMERO := C_INC.NUMERO_TELEFONE_CELULAR;
                            vTIPO_TELEFONE := '0002';
                            vQTDE_LINHAS_AFETADAS := REGISTRAR_TELEFONE(C_INC.CODIGO_EMPRESA, vCODIGO_PESSOA_BENEFICIARIO, vTIPO_TELEFONE, vTELEFONE_DDD, vTELEFONE_NUMERO);
                         END IF;
                     EXCEPTION
                     WHEN OTHERS THEN
                          dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE TELEFONE. '||SQLCODE||' -ERROR- '||SQLERRM);
                     END;


                END IF;
                 -- Log sucesso inclusao
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL);

             ELSE
                 vCODIGO_PESSOA_BENEFICIARIO := C_INC.CODIGO_PESSOA_BENEFICIARIO;

                IF C_INC.TIPO_OPERACAO = 'I' and C_INC.CODIGO_PESSOA_BENEFICIARIO IS NOT NULL AND C_INC.SITUACAO_IMPORTACAO = '02' THEN
                   GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_JA_EXISTENTE_DUPLICADO, C_INC.CPF);
                ELSIF C_INC.TIPO_OPERACAO = 'I' and C_INC.CODIGO_PESSOA_BENEFICIARIO IS NOT NULL AND C_INC.SITUACAO_IMPORTACAO <> '02' THEN
                   GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_JA_EXISTENTE, C_INC.CPF);

                 BEGIN
                 -- Altera beneficiário
                 vQTDE_LINHAS_AFETADAS := ALTERAR_BENEFICIARIO(REG_PBH_CS);

                 vQTDE_LINHAS_AFETADAS := REGISTRAR_TIPO_RELACIONAMENTO(REG_PBH_CS);


             IF  C_INC.CODIGO_PESSOA_BENEFICIARIO<> C_INC.CODIGO_PESSOA_TITULAR THEN

                     BEGIN

                        -- endereco
                         vQTDE_LINHAS_AFETADAS := REGISTRAR_ENDERECO(REG_PBH_CS);
                     EXCEPTION
                     WHEN OTHERS THEN
                          dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE ENDERECO. '||SQLCODE||' -ERROR- '||SQLERRM);
                     END;

                     BEGIN
                         -- telefone fixo
                         IF C_INC.DDD_TELEFONE_FIXO IS NOT NULL AND C_INC.NUMERO_TELEFONE_FIXO IS NOT NULL THEN
                            vTELEFONE_DDD := TO_NUMBER(C_INC.DDD_TELEFONE_FIXO);
                            vTELEFONE_NUMERO := C_INC.NUMERO_TELEFONE_FIXO;
                            vTIPO_TELEFONE := '0001';
                            vQTDE_LINHAS_AFETADAS := REGISTRAR_TELEFONE(C_INC.CODIGO_EMPRESA, vCODIGO_PESSOA_BENEFICIARIO, vTIPO_TELEFONE, vTELEFONE_DDD, vTELEFONE_NUMERO);
                         END IF;
                         -- telefone celular
                         IF C_INC.DDD_TELEFONE_CELULAR IS NOT NULL AND C_INC.NUMERO_TELEFONE_CELULAR IS NOT NULL THEN
                            vTELEFONE_DDD := TO_NUMBER(C_INC.DDD_TELEFONE_CELULAR);
                            vTELEFONE_NUMERO := C_INC.NUMERO_TELEFONE_CELULAR;
                            vTIPO_TELEFONE := '0002';
                            vQTDE_LINHAS_AFETADAS := REGISTRAR_TELEFONE(C_INC.CODIGO_EMPRESA, vCODIGO_PESSOA_BENEFICIARIO, vTIPO_TELEFONE, vTELEFONE_DDD, vTELEFONE_NUMERO);
                         END IF;
                     EXCEPTION
                     WHEN OTHERS THEN
                          dbms_output.put_line('ENCONTRADO ERRO - INCLUSAO DE TELEFONE. '||SQLCODE||' -ERROR- '||SQLERRM);
                     END;


              END IF;

                 EXCEPTION
                 WHEN OTHERS THEN
                      dbms_output.put_line('ENCONTRADO ERRO - ALTERACAO DE BENEFICIARIO. '||SQLCODE||' -ERROR- '||SQLERRM);
                 END;
             -- log sucesso alteracao
             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_ALTERACAO, NULL);

                END IF;

             END IF;


        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO INCLUSAO ####

    PR_SET_SITUACAO_PROCESSAMENTO('07');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;
    PR_STATS_PROCESSA_ARQUIVO(PID_ARQUIVO);
end;