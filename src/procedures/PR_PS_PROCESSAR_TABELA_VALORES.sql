
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."PR_PS_PROCESSAR_TABELA_VALORES" (PCODIGO_EMPRESA CHAR, PANO_MES_REFERENCIA DATE, PID_ARQUIVO NUMBER, PACAO NUMBER ) as

  --vRETORNO RETORNO_PROCESSAMENTO := RETORNO_PROCESSAMENTO(null,null,null);
  --REG_LOG LOG_PROCESSAMENTO;
  --vLISTA_LOG LISTA_LOG := LISTA_LOG(null,null,null);


  vQTDE_LINHAS_AFETADAS NUMBER;
  vCONTADOR_INCONFORMIDADES NUMBER;
  --vBENEFICIO RETORNO_PS_CONCESSAO_BENEFICIO;
  V_DETALHE_0001 VARCHAR2(4000);
  V_DETALHE_0002 VARCHAR2(4000);
  ARQUIVO_CONCESSOES      CONSTANT CHAR(4) := '0001';
  ARQUIVO_BENEFICIARIOS   CONSTANT CHAR(4) := '0002';
  ARQUIVO_MOVIMENTOS      CONSTANT CHAR(4) := '0003';
  ARQUIVO_MOVIMENTOS_DIRF CONSTANT CHAR(4) := '0004';

  EMPRESA_ATIVOS        CONSTANT CHAR(4) := '0001';
  EMPRESA_APOSENTADOS   CONSTANT CHAR(4) := '1700';
  EMPRESA_PENSIONISTAS  CONSTANT CHAR(4) := '0011';

  STATUS_CARREGADO    CONSTANT NUMBER := 0;
  STATUS_VALIDADO     CONSTANT NUMBER := 1;
  STATUS_INVALIDADO   CONSTANT NUMBER := 2;
  STATUS_PROCESSADO   CONSTANT NUMBER := 3;
  STATUS_EFETIVADO    CONSTANT NUMBER := 4;
  /*
  SITUACAO_CARREGADO    CONSTANT CHAR(2) := 0;
  SITUACAO_VALIDADO     CONSTANT CHAR(2) := 1;
  SITUACAO_INVALIDADO   CONSTANT CHAR(2) := 2;
  SITUACAO_PROCESSADO   CONSTANT CHAR(2) := 3;
  SITUACAO_EFETIVADO    CONSTANT CHAR(2) := 4;
*/
  TIPO_LOG_SUCESSO       CONSTANT NUMBER := 0;
  TIPO_LOG_INFO          CONSTANT NUMBER := 2;
  TIPO_LOG_ALERTA        CONSTANT NUMBER := 2;
  TIPO_LOG_ERRO          CONSTANT NUMBER := 99;
  TIPO_LOG_PROCESSAMENTO CONSTANT NUMBER := 50;

  CODIGO_LOG_PROCESSAMENTO_02 CONSTANT CHAR(4) := 'P002';
  CODIGO_LOG_PROCESSAMENTO_03 CONSTANT CHAR(4) := 'P003';
  CODIGO_LOG_PROCESSAMENTO_04 CONSTANT CHAR(4) := 'P004';
  CODIGO_LOG_PROCESSAMENTO_05 CONSTANT CHAR(4) := 'P005';
  CODIGO_LOG_PROCESSAMENTO_06 CONSTANT CHAR(4) := 'P006';
  CODIGO_LOG_PROCESSAMENTO_07 CONSTANT CHAR(4) := 'P007';
  CODIGO_LOG_PROCESSAMENTO_50 CONSTANT CHAR(4) := 'P050';

  CATEGORIA_LOG_VALIDACAO  CONSTANT NUMBER := 0;
  CATEGORIA_LOG_EXECUCAO   CONSTANT NUMBER := 1;
  CATEGORIA_LOG_LEIAUTE    CONSTANT NUMBER := 2;
  CATEGORIA_LOG_REGRAS     CONSTANT NUMBER := 3;
  CATEGORIA_LOG_EFETIVACAO CONSTANT NUMBER := 4;

  NAO_EXISTE_TP_RELACIONAMENTO  EXCEPTION;
  MAIS_DE_UM_TP_RELACIONAMENTO  EXCEPTION;
  BENEFICIO_NAO_ENCONTRADO      EXCEPTION;
  MAIS_DE_UM_BENEFICIO          EXCEPTION;
  ERRO_AO_TENTAR_RECUPERAR_DADO EXCEPTION;
  ERRO_GENERICO                 EXCEPTION;


  RET_ENCONTRADO CONSTANT NUMBER := 0;
  RET_NAO_ENCONTRADO CONSTANT NUMBER := 97;
  RET_MAIS_DE_UM_REGISTRO CONSTANT NUMBER := 98;
  RET_ERRO CONSTANT NUMBER := 99;

  --LISTA_TIPO_BENEFICIO_PENSAO LISTA:=LISTA('0025','0026');
  --LISTA_TIPO_BENEFICIO_GERAL  LISTA:=LISTA('0005','0006');

  LISTA_VERBAS_DIRF  LISTA:=LISTA('24I8','24I9','16I8', '16I5', '24I5');
  LISTA_MUNICIPALIZADOS  LISTA:=LISTA('000000000000699','000000000011747', '000000000011399');

  --LISTA_TIPO_BENEFICIO LISTA;

  LISTA_FORNECEDORES CLOB;

  vLISTA_FORNECEDORES CLOB;
  vIDENTIFICADOR_FORNECEDOR VARCHAR2(15);
  vIDENTIFICADOR_BENEFICIO VARCHAR2(15);
  vIDENTIFICADOR_VERBA VARCHAR2(4);
  vCONTADOR NUMBER;
  vTIPO_ARQUIVO CHAR(4);
  vDATA_PROCESSAMENTO DATE;
  vIS_TESTE BOOLEAN;
  vSITUACAO_PROCESSAMENTO CHAR(2);
  vCODIGO_EMPRESA CHAR(4);
  vID_ARQUIVO NUMBER;
  vSITUACAO_ARQUIVO CHAR(2);
  vANO_MES_REFERENCIA DATE;
  vCATEGORIA_LOG NUMBER;
  vTIPO_LOG NUMBER;
  vADE_NUMERO_MAP NUMBER;
  vCPF_VALIDO BOOLEAN;
  VCPF_EXISTENTE NUMBER;
  NENHUM_ARQUIVO_PROCESSAR EXCEPTION;

  vCODIGO_PESSOA_BENEFICIARIO CHAR(15);
  vTIPO_RELACIONAMENTO CHAR(4);
  vCODIGO_BENEFICIO VARCHAR2(15);
  VCPF_TITULAR CHAR(11);
  vIDENTIFICADOR_REGRA VARCHAR2(30);

  vTIPO_BENEFICIO CHAR(2);
  vVALOR_REMUNERACAO_BASE_PS NUMBER(15,2);

  vSOL_MOVI_DATA_SOLICITACAO DATE;
  vSOL_MOVI_DATA_INI_VIGENCIA DATE;
  vSOL_MOVI_DATA_FIM_VIGENCIA DATE;
-- Contantes
C_TIPO_CONTRATO CHAR(4);
C_MES_INCIDENCIA CHAR(2);
C_CONSIDERA_DIRF CHAR(1);
C_CONTROLE_LANCAMENTO CHAR(1);
C_LOGIN_USUARIO VARCHAR2(40);
C_C_LIVRE_SELEC01 NUMBER(4);
C_C_LIVRE_VALOR01 NUMBER(16,4);
C_C_LIVRE_OPCAO01 CHAR(1);
C_REF_VERBA NUMBER(11,4);
C_ID_CLIENTE NUMBER(7);

/*
123456789012345678901234567890
*/
LOG_CODIGO_EMPRESA_INVALIDO    CONSTANT CHAR(4) := 'E001';
LOG_CODIGO_CONTRATO_INVALIDO   CONSTANT CHAR(4) := 'E002';
LOG_CODIGO_FORNECEDOR_INVALIDO CONSTANT CHAR(4) := 'E003';
LOG_CODIGO_VERBA_INVALIDO      CONSTANT CHAR(4) := 'E004';
LOG_VALOR_VERBA_INVALIDO       CONSTANT CHAR(4) := 'E005';
LOG_VALOR_ZERADO               CONSTANT CHAR(4) := 'E006';
LOG_ANO_MES_REF_INVALIDO       CONSTANT CHAR(4) := 'E007';
LOG_ANO_MES_REF_NAO_RELAC      CONSTANT CHAR(4) := 'E008';
LOG_NUM_CARTEIRA_INVALIDO      CONSTANT CHAR(4) := 'E009';
LOG_NUM_CARTEIRA_NAO_VIGENTE   CONSTANT CHAR(4) := 'E010';
LOG_CONCESSAO_NAO_ENCONTRADA   CONSTANT CHAR(4) := 'E011';
LOG_CPF_NAO_ENCONTRADO         CONSTANT CHAR(4) := 'E012';
LOG_CPF_INVALIDO               CONSTANT CHAR(4) := 'E013';
LOG_DUPLICIDADE_REGISTRO       CONSTANT CHAR(4) := 'E014';
LOG_TP_RELAC_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E015';
LOG_TP_RELAC_MAIS_DE_UM        CONSTANT CHAR(4) := 'E016';
LOG_TP_RELAC_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E017';
LOG_BENEFICIO_NAO_ENCONTRADO   CONSTANT CHAR(4) := 'E018';
LOG_CARTEIRA_OUTRO_CONTRATO    CONSTANT CHAR(4) := 'E019';
LOG_CARTEIRA_OUTRO_CPF         CONSTANT CHAR(4) := 'E020';
LOG_REGISTRO_ANTES_CONCESSAO   CONSTANT CHAR(4) := 'E021';
LOG_REGISTRO_APOS_CANCEL       CONSTANT CHAR(4) := 'E022';
LOG_CONCESSAO_DUPLICADA        CONSTANT CHAR(4) := 'E023';
LOG_CONCESSAO_ERRO_RECUPERACAO CONSTANT CHAR(4) := 'E024';
LOG_REGISTRO_JA_EXISTENTE      CONSTANT CHAR(4) := 'E025';
LOG_TIPO_BENEFICIO_INVALIDO    CONSTANT CHAR(4) := 'E026';
LOG_CNPJ_NAO_ENCONTRADO        CONSTANT CHAR(4) := 'E027';
LOG_CNPJ_INVALIDO              CONSTANT CHAR(4) := 'E028';
LOG_TP_RELAC_NAO_CONFORME      CONSTANT CHAR(4) := 'E029';
LOG_TP_RELAC_DEP_NAO_INFORMADO CONSTANT CHAR(4) := 'E030';
LOG_CODIGO_VERBA_NAO_CONFORME  CONSTANT CHAR(4) := 'E031';
LOG_TIPO_RELAC_INVALIDO        CONSTANT CHAR(4) := 'E032';

LOG_OPERACAO_INVALIDA          CONSTANT CHAR(4) := 'E033';
LOG_DATA_INICIAL_MENOR_PERMIT  CONSTANT CHAR(4) := 'E034';
LOG_DATA_FUTURA                CONSTANT CHAR(4) := 'E035';
LOG_CONTRATO_MUNICIPALIZADO    CONSTANT CHAR(4) := 'E036';

LOG_SOL_MOVI_NAO_ENCONTRADA    CONSTANT CHAR(4) := 'E037';
LOG_SOL_MOVI_DUPLICADA         CONSTANT CHAR(4) := 'E038';
LOG_SOL_MOVI_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E039';
LOG_DUPLICIDADE_ADE_NUMERO     CONSTANT CHAR(4) := 'E040';
LOG_VERBA_NAO_PERMITE_ALTERAR  CONSTANT CHAR(4) := 'E041';
LOG_SOL_MOVI_NAO_VIGENTE       CONSTANT CHAR(4) := 'E042';
LOG_SOL_MOVI_OUTRA_DATA_SOLIC  CONSTANT CHAR(4) := 'E043';
LOG_SOL_MOVI_JA_EXISTENTE      CONSTANT CHAR(4) := 'E044';
LOG_PS_MENSALIDADE_VALOR_DIF   CONSTANT CHAR(4) := 'E045';
LOG_PS_SUBSIDIO_VALOR_DIF      CONSTANT CHAR(4) := 'E046';
LOG_PS_VALOR_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E047';

LOG_PS_TITULAR_NAO_ENCONTRADO  CONSTANT CHAR(4) := 'E048';
LOG_PS_ALTER_REG_NAO_EXISTE    CONSTANT CHAR(4) := 'E049';

LOG_JA_POSSUI_PLANO_SAUDE      CONSTANT CHAR(4) := 'E050';
LOG_CARTEIRA_OUTRO_BENEFICIO   CONSTANT CHAR(4) := 'E051';
LOG_CARTEIRA_OUTRA_DATA        CONSTANT CHAR(4) := 'E052';
LOG_CONCESSAO_JA_CANCELADA     CONSTANT CHAR(4) := 'E053';
LOG_DIVERGENCIA_BENEFICIO_ANS  CONSTANT CHAR(4) := 'E054';
LOG_SEXO_INVALIDO              CONSTANT CHAR(4) := 'E055';
LOG_MUNICIPIO_INVALIDO         CONSTANT CHAR(4) := 'E056';
LOG_ESTADO_CIVIL_INVALIDO      CONSTANT CHAR(4) := 'E057';
LOG_TIPO_LOGRADOURO_INVALIDO   CONSTANT CHAR(4) := 'E058';
LOG_UF_ENDERECO_INVALIDO       CONSTANT CHAR(4) := 'E059';
LOG_CPF_JA_EXISTENTE           CONSTANT CHAR(4) := 'E060';

LOG_EXCECAO_DEPEND_INVALIDA    CONSTANT CHAR(4) := 'E061';
LOG_MOT_CANCEL_NAO_INFORMADO   CONSTANT CHAR(4) := 'E062';
LOG_DATA_CANCEL_NAO_INFORMADO  CONSTANT CHAR(4) := 'E063';
LOG_DATA_CANCEL_SUP_360        CONSTANT CHAR(4) := 'E064';

LOG_DATA_EXCECAO_MENOR         CONSTANT CHAR(4) := 'E065';
LOG_DATA_EXCECAO_SUP_360       CONSTANT CHAR(4) := 'E066';

LOG_ORDEM_DEPENDENCIA_INVALIDA CONSTANT CHAR(4) := 'E067';
LOG_EXCECAO_DEP_NAO_INFORMADA  CONSTANT CHAR(4) := 'E068';
LOG_DATA_EXCECAO_NAO_INFORMADA CONSTANT CHAR(4) := 'E069';
LOG_CODIGO_BENEFICIO_INVALIDO  CONSTANT CHAR(4) := 'E070';

LOG_IDENT_ARQUIVO_INVALIDO     CONSTANT CHAR(4) := 'E071';
LOG_SEQUENCIAL_REG_INVALIDO    CONSTANT CHAR(4) := 'E072';
LOG_GERACAO_ARQUIVO_DIVERGENTE CONSTANT CHAR(4) := 'E073';
LOG_NUM_CARTEIRA_JA_EXISTENTE  CONSTANT CHAR(4) := 'E074';

LOG_TIPO_REGISTRO_INVALIDO     CONSTANT CHAR(4) := 'E076';
LOG_FAIXA_SALARIAL_NULA        CONSTANT CHAR(4) := 'E077';
LOG_FAIXA_SALARIAL_INVALIDA    CONSTANT CHAR(4) := 'E078';
LOG_FAIXA_ETARIA_INVALIDA      CONSTANT CHAR(4) := 'E079';
LOG_FALTA_VALOR_FX_ETARIA      CONSTANT CHAR(4) := 'E080';
LOG_FALTA_VALOR_FX_SAL_ETARIA  CONSTANT CHAR(4) := 'E081';
LOG_VALORES_PS_QTDE_DIF_MENS   CONSTANT CHAR(4) := 'E082';
LOG_VALORES_PS_QTDE_DIF_SUB    CONSTANT CHAR(4) := 'E083';

LOG_ALTERACAO_INFORMACAO       CONSTANT CHAR(4) := 'E100';

LOG_ALT_PESSOA_NOME            CONSTANT CHAR(4) := 'E101';
LOG_ALT_PESSOA_IDENTIDADE      CONSTANT CHAR(4) := 'E102';
LOG_ALT_PESSOA_DT_NASCIMENTO   CONSTANT CHAR(4) := 'E103';
LOG_ALT_PESSOA_SEXO            CONSTANT CHAR(4) := 'E104';
LOG_ALT_PESSOA_ESTADO_CIVIL    CONSTANT CHAR(4) := 'E105';
LOG_ALT_PESSOA_NOME_MAE        CONSTANT CHAR(4) := 'E106';
LOG_ALT_ENDERECO_TP_LOGRADOURO CONSTANT CHAR(4) := 'E107';
LOG_ALT_ENDERECO_ENDERECO      CONSTANT CHAR(4) := 'E108';
LOG_ALT_ENDERECO_NUMERO        CONSTANT CHAR(4) := 'E109';
LOG_ALT_ENDERECO_COMPLEMENTO   CONSTANT CHAR(4) := 'E110';
LOG_ALT_ENDERECO_BAIRRO        CONSTANT CHAR(4) := 'E111';
LOG_ALT_ENDERECO_MUNICIPIO     CONSTANT CHAR(4) := 'E112';
LOG_ALT_ENDERECO_UF            CONSTANT CHAR(4) := 'E113';
LOG_ALT_ENDERECO_CEP           CONSTANT CHAR(4) := 'E114';

LOG_ALT_CONCESSAO_EXCECAO_DEP  CONSTANT CHAR(4) := 'E115';
LOG_ALT_CONCESSAO_DT_EXCE_DEP  CONSTANT CHAR(4) := 'E116';
LOG_ALT_CONCESSAO_ORDEM_DEP    CONSTANT CHAR(4) := 'E117';
LOG_ALT_CONCESSAO_CATEG_BENEF  CONSTANT CHAR(4) := 'E118';
LOG_ALT_CONCESSAO_OBSERVACAO   CONSTANT CHAR(4) := 'E119';

LOG_SUCESSO_INCLUSAO           CONSTANT CHAR(4) := 'S001';
LOG_SUCESSO_ALTERACAO          CONSTANT CHAR(4) := 'S002';
LOG_SUCESSO_EXCLUSAO           CONSTANT CHAR(4) := 'S003';
/*
LOG_CODIGO_EMPRESA_INVALIDO    CONSTANT CHAR(4) := 'E001';
LOG_CODIGO_CONTRATO_INVALIDO   CONSTANT CHAR(4) := 'E002';
LOG_CODIGO_FORNECEDOR_INVALIDO CONSTANT CHAR(4) := 'E003';
LOG_CODIGO_VERBA_INVALIDO      CONSTANT CHAR(4) := 'E004';
LOG_VALOR_VERBA_INVALIDO       CONSTANT CHAR(4) := 'E005';
LOG_VALOR_ZERADO               CONSTANT CHAR(4) := 'E006';
LOG_ANO_MES_REF_INVALIDO       CONSTANT CHAR(4) := 'E007';
LOG_ANO_MES_REF_NAO_RELAC      CONSTANT CHAR(4) := 'E008';
LOG_NUM_CARTEIRA_INVALIDO      CONSTANT CHAR(4) := 'E009';
LOG_NUM_CARTEIRA_NAO_VIGENTE   CONSTANT CHAR(4) := 'E010';
LOG_CONCESSAO_NAO_ENCONTRADA   CONSTANT CHAR(4) := 'E011';
LOG_CPF_NAO_ENCONTRADO         CONSTANT CHAR(4) := 'E012';
LOG_CPF_INVALIDO               CONSTANT CHAR(4) := 'E013';
LOG_DUPLICIDADE_REGISTRO       CONSTANT CHAR(4) := 'E014';
LOG_TP_RELAC_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E015';
LOG_TP_RELAC_MAIS_DE_UM        CONSTANT CHAR(4) := 'E016';
LOG_TP_RELAC_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E017';
LOG_BENEFICIO_NAO_ENCONTRADO   CONSTANT CHAR(4) := 'E018';
LOG_CARTEIRA_OUTRO_CONTRATO    CONSTANT CHAR(4) := 'E019';
LOG_CARTEIRA_OUTRO_CPF         CONSTANT CHAR(4) := 'E020';
LOG_REGISTRO_ANTES_CONCESSAO   CONSTANT CHAR(4) := 'E021';
LOG_REGISTRO_APOS_CANCEL       CONSTANT CHAR(4) := 'E022';
LOG_CONCESSAO_DUPLICADA        CONSTANT CHAR(4) := 'E023';
LOG_CONCESSAO_ERRO_RECUPERACAO CONSTANT CHAR(4) := 'E024';
LOG_REGISTRO_JA_EXISTENTE      CONSTANT CHAR(4) := 'E025';
LOG_TIPO_BENEFICIO_INVALIDO    CONSTANT CHAR(4) := 'E026';
LOG_CNPJ_NAO_ENCONTRADO        CONSTANT CHAR(4) := 'E027';
LOG_CNPJ_INVALIDO              CONSTANT CHAR(4) := 'E028';
LOG_TP_RELAC_NAO_CONFORME      CONSTANT CHAR(4) := 'E029';
LOG_TP_RELAC_DEP_NAO_INFORMADO CONSTANT CHAR(4) := 'E030';
LOG_CODIGO_VERBA_NAO_CONFORME  CONSTANT CHAR(4) := 'E031';
LOG_TIPO_RELAC_INVALIDO        CONSTANT CHAR(4) := 'E032';

LOG_OPERACAO_INVALIDA          CONSTANT CHAR(4) := 'E033';
LOG_DATA_INICIAL_MENOR_PERMIT  CONSTANT CHAR(4) := 'E034';
LOG_DATA_FUTURA                CONSTANT CHAR(4) := 'E035';
LOG_CONTRATO_MUNICIPALIZADO    CONSTANT CHAR(4) := 'E036';

LOG_SOL_MOVI_NAO_ENCONTRADA    CONSTANT CHAR(4) := 'E037';
LOG_SOL_MOVI_DUPLICADA         CONSTANT CHAR(4) := 'E038';
LOG_SOL_MOVI_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E039';
LOG_DUPLICIDADE_ADE_NUMERO     CONSTANT CHAR(4) := 'E040';
LOG_VERBA_NAO_PERMITE_ALTERAR  CONSTANT CHAR(4) := 'E041';
LOG_SOL_MOVI_NAO_VIGENTE       CONSTANT CHAR(4) := 'E042';
LOG_SOL_MOVI_OUTRA_DATA_SOLIC  CONSTANT CHAR(4) := 'E043';
LOG_SOL_MOVI_JA_EXISTENTE      CONSTANT CHAR(4) := 'E044';
LOG_PS_MENSALIDADE_VALOR_DIF   CONSTANT CHAR(4) := 'E045';
LOG_PS_SUBSIDIO_VALOR_DIF      CONSTANT CHAR(4) := 'E046';
LOG_PS_VALOR_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E047';

LOG_TIPO_REGISTRO_INVALIDO     CONSTANT CHAR(4) := 'E048';
LOG_FAIXA_SALARIAL_NULA        CONSTANT CHAR(4) := 'E049';
LOG_FAIXA_SALARIAL_INVALIDA    CONSTANT CHAR(4) := 'E050';
LOG_FAIXA_ETARIA_INVALIDA      CONSTANT CHAR(4) := 'E051';

LOG_SUCESSO_INCLUSAO           CONSTANT CHAR(4) := 'S001';
*/
  -- INICIO TABELA VALORES

  REG_VALORES_PLANO_SAUDE RHPBH_PS_VALORES_PLANO_SAUDE%ROWTYPE;

  vLISTA_FAIXA_ETARIA LISTA;
  vLISTA_FAIXA_SALARIAL LISTA;
  vLISTA_PLANO LISTA;

  TYPE REGISTRO_PLANO_VALOR is RECORD(
  PLANO                      VARCHAR2(1000),
  VALOR                      VARCHAR2(1000)
  );

  REG_PLANO_VALOR REGISTRO_PLANO_VALOR;
  TYPE LISTA_PLANO_VALOR IS VARRAY(10000) OF REGISTRO_PLANO_VALOR;
  vLISTA_PLANOS_VALORES LISTA_PLANO_VALOR;

  TYPE REGISTRO_VALOR_FINAL is RECORD(
  ID_ARQUIVO                 NUMBER,
  NUMERO_LINHA               NUMBER,
  ANO_MES_REFERENCIA         VARCHAR2(1000),
  FAIXA_SALARIAL             VARCHAR2(1000),
  FAIXA_ETARIA               VARCHAR2(1000),
  VALORES_MENSALIDADES       LISTA_PLANO_VALOR,
  VALORES_SUBSIDIOS          LISTA_PLANO_VALOR,
  VALORES_SUBSIDIOS_DEP      LISTA_PLANO_VALOR
  );

  REG_VALOR_FINAL REGISTRO_VALOR_FINAL;
  TYPE LISTA_VALOR_FINAL IS VARRAY(10000) OF REGISTRO_VALOR_FINAL;
  vLISTA_VALOR_FINAL LISTA_VALOR_FINAL;

  TYPE REGISTRO_VALOR_PS is RECORD(
  ID_ARQUIVO                 NUMBER,
  NUMERO_LINHA               NUMBER,
  TIPO_REGISTRO              VARCHAR2(1000),
  ANO_MES_REFERENCIA         VARCHAR2(1000),
  FAIXA_SALARIAL             VARCHAR2(1000),
  FAIXA_ETARIA               VARCHAR2(1000),
  PLANOS_VALORES             LISTA_PLANO_VALOR
  );

  REG_VALOR_PS REGISTRO_VALOR_PS;
  REG_VALOR_PS_AUX REGISTRO_VALOR_PS;
  REG_VALOR_PS_AUX_SUB_DEP REGISTRO_VALOR_PS;

  --TYPE INTERFACE_SOFTWARE as table of REGISTRO_VALOR_PS;
  TYPE LISTA_VALORES IS VARRAY(10000) OF REGISTRO_VALOR_PS;
  vLISTA_VALORES LISTA_VALORES;

  vLISTA_VALORES_MENSALIDADE LISTA_VALORES;
  vLISTA_VALORES_SUBSIDIO LISTA_VALORES;
  vLISTA_VALORES_SUBSIDIO_DEP LISTA_VALORES;

  vLINHA VARCHAR2(4000);
  vTEXTO VARCHAR2(4000);
  vCARACTER CHAR(1);
  vCONTADOR_TEXTO NUMBER;
  vCONTADOR_PLANO NUMBER;
  vREGISTRO_EXISTENTE BOOLEAN;

  vTABELA_CABECALHO VARCHAR(4000);
  vTABELA_LINHA VARCHAR(4000);

  vFAIXA_ETARIA VARCHAR(4000);
  vFAIXA_SALARIAL VARCHAR(4000);
  vQTDE_TABELA_PLANO_SAUDE NUMBER;
  vQTDE_FAIXA_SALARIAL NUMBER;
  vQTDE_FAIXA_ETARIA NUMBER;
  vQTDE_PLANO NUMBER;
  vANO_MES_REF_PLANO DATE;
  vANO_MES_REF_FAIXA_SALARIAL DATE;
  vANO_MES_REF_FAIXA_ETARIA DATE;
  -- FIM TABELA VALORES

PROCEDURE IMPRIMIR_LISTA(lista LISTA) as
BEGIN
    for j in 1..lista.count
    loop
        dbms_output.put_line(lista(j));
    end loop;
END;

PROCEDURE IMPRIMIR_MENSALIDADE(lista LISTA_VALORES) as
vLISTA_VALORES_MENSALIDADE LISTA_VALORES;
BEGIN
  vLISTA_VALORES_MENSALIDADE := lista;
  dbms_output.put_line('------------------------------------------------------------------------------');
  -- MENSALIDADE
  --dbms_output.put_line('MENSALIDADE');

  for i in 1..vLISTA_VALORES_MENSALIDADE.count
  loop
       REG_VALOR_PS := vLISTA_VALORES_MENSALIDADE(i);

       vTABELA_LINHA := RPAD(REG_VALOR_PS.ANO_MES_REFERENCIA, 15, ' ') ||
                        RPAD(NVL(REG_VALOR_PS.FAIXA_SALARIAL, 'Não aplicável'), 30, ' ') ||
                        RPAD(REG_VALOR_PS.FAIXA_ETARIA, 30, ' ');



       for j in 1..REG_VALOR_PS.PLANOS_VALORES.count
       loop
           REG_PLANO_VALOR := REG_VALOR_PS.PLANOS_VALORES(j);
           vTABELA_LINHA := vTABELA_LINHA || RPAD(REG_PLANO_VALOR.VALOR, 15, ' ');
       end loop;

       dbms_output.put_line(vTABELA_LINHA);

  end loop;

  dbms_output.put_line('------------------------------------------------------------------------------');
END;

PROCEDURE IMPRIMIR_SUBSIDIO(lista LISTA_VALORES) as
vLISTA_VALORES_SUBSIDIO LISTA_VALORES;
BEGIN
  vLISTA_VALORES_SUBSIDIO := lista;
  dbms_output.put_line('------------------------------------------------------------------------------');

  -- SUBSIDIO
  dbms_output.put_line('SUBSIDIO');
  for i in 1..vLISTA_VALORES_SUBSIDIO.count
  loop
       REG_VALOR_PS := vLISTA_VALORES_SUBSIDIO(i);

       vTABELA_LINHA := RPAD(REG_VALOR_PS.ANO_MES_REFERENCIA, 15, ' ') ||
                        RPAD(NVL(REG_VALOR_PS.FAIXA_SALARIAL, 'Não aplicável'), 30, ' ') ||
                        RPAD(REG_VALOR_PS.FAIXA_ETARIA, 30, ' ');



       for j in 1..REG_VALOR_PS.PLANOS_VALORES.count
       loop
           REG_PLANO_VALOR := REG_VALOR_PS.PLANOS_VALORES(j);
           vTABELA_LINHA := vTABELA_LINHA || RPAD(REG_PLANO_VALOR.VALOR, 15, ' ');
       end loop;

       dbms_output.put_line(vTABELA_LINHA);

   end loop;

  dbms_output.put_line('------------------------------------------------------------------------------');
END;

PROCEDURE IMPRIMIR_VALORES_MAPEADOS(descricao_lista varchar2, lista LISTA, lista_mapeada LISTA) as
vCONTEUDO VARCHAR2(4);
BEGIN
      DBMS_Output.PUT_LINE('IMPRIMINDO LISTA MAPEADA' || ' - ' || descricao_lista);
       for i in 1..lista.count()
         loop
             DBMS_Output.PUT_LINE(RPAD('lista('||i||')',10,' ') || ' = ' || lista(i) || ' -> ' || lista_mapeada(i));
         end loop;
END;

PROCEDURE GRAVA_LOG(CodigoEmpresa IN CHAR, CategoriaLog IN NUMBER, TipoLog IN NUMBER, IdArquivo IN NUMBER, Numero_linha IN NUMBER, CodigoLog IN CHAR, DetalheLog IN VARCHAR2) AS
BEGIN

     INSERT INTO RHPBH_ARQUIVO_LOG(ID_LOG, DATA_LOG, CATEGORIA, TIPO, ID_ARQUIVO, NUMERO_LINHA, CODIGO_LOG, DETALHE, CODIGO_EMPRESA)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CategoriaLog, TipoLog, IdArquivo, Numero_linha, CodigoLog, DetalheLog, CodigoEmpresa);
     COMMIT;

END;

PROCEDURE PR_CONTROLE_PROCESSAMENTO(CODIGO_EMPRESA IN CHAR, ID_ARQUIVO IN NUMBER, SITUACAO_PROCESSAMENTO IN CHAR, POBSERVACAO IN VARCHAR2 DEFAULT NULL) AS
BEGIN
    PR_GRAVA_LOG_PROCESSA_ARQUIVO(CODIGO_EMPRESA, ID_ARQUIVO, SITUACAO_PROCESSAMENTO, POBSERVACAO);
END;

PROCEDURE PR_SET_SITUACAO_PROCESSAMENTO(PSITUACAO_PROCESSAMENTO IN CHAR) AS
BEGIN
    IF PSITUACAO_PROCESSAMENTO IS NULL THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO NULA.');
    END IF;

    IF PSITUACAO_PROCESSAMENTO NOT IN ('00','01','02','03','04','05','06','07') THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO INVALIDA.');
    END IF;

    vSITUACAO_PROCESSAMENTO := PSITUACAO_PROCESSAMENTO;
END;

PROCEDURE PR_ATUALIZAR_SITUACAO_REGISTR0 AS
BEGIN
   BEGIN
      update RHPBH_ARQUIVO_LINHA AL
         set SITUACAO = 99
       where ID_ARQUIVO = PID_ARQUIVO
         and exists(
      select *
        from RHPBH_ARQUIVO_LOG
       where ID_ARQUIVO = AL.ID_ARQUIVO
         and NUMERO_LINHA = AL.NUMERO_LINHA
         and TIPO = 99
      );

      commit;

    EXCEPTION
    WHEN OTHERS THEN
       ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCEÃ¿Ã¿O AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
END;

begin

    -- Verifica se o codigo de empresa informado e valido
    IF PCODIGO_EMPRESA IS NULL THEN
       raise_application_error (-20001,'CODIGO_EMPRESA NAO INFORMADO.');
    END IF;

    BEGIN
         vCODIGO_EMPRESA := null;
         select CODIGO into vCODIGO_EMPRESA from RHORGA_EMPRESA where CODIGO = PCODIGO_EMPRESA;

         IF vCODIGO_EMPRESA IS NULL THEN
            raise_application_error (-20001,'CODIGO_EMPRESA INVALIDO.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O CODIGO_EMPRESA');
    END;

    BEGIN
         vID_ARQUIVO := null;
         select ID_ARQUIVO, SITUACAO into vID_ARQUIVO, vSITUACAO_ARQUIVO from RHPBH_ARQUIVO where ID_ARQUIVO = PID_ARQUIVO;

         IF vID_ARQUIVO IS NULL THEN
            raise_application_error (-20001,'ID ARQUIVO INVALIDO.');
         END IF;

         IF vSITUACAO_ARQUIVO NOT IN ('00','01','02','03','04','05','06','07') THEN
            raise_application_error (-20001,'O ARQUIVO INFORMADO ESTA COM SITUACAO INVALIDA. ENTRE EM CONTATO COM O SUPORTE TECNICO DA PBH.');
         END IF;

         CASE WHEN vSITUACAO_ARQUIVO = '07' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA COM PROCESSAMENTO JÃ¿ CONCLUIDO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO = '01' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA CANCELADO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO in ('02','04','06') THEN raise_application_error (-20002,'O ARQUIVO INFORMADO JÃ¿ ESTÃ¿ EM PROCESSAMENTO E NAO PODE HAVER PROCESSAMENTOS COMCOMITANTES PARA O MESMO ARQUIVO.');
              WHEN vSITUACAO_ARQUIVO = '00' THEN
                   IF PACAO NOT IN (1,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO Ã¿ COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO CARREGADO E AS ACOES PERMITIDA SAO 1 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '03' THEN
                   IF PACAO NOT IN (2,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO Ã¿ COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO VALIDACAO DE LEIAUTE PROCESSADA E AS ACOES PERMITIDA SAO 2 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '05' THEN
                   IF PACAO NOT IN (3,4,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO Ã¿ COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO PROCESSADO E AS ACOES PERMITIDA SAO 3 ou 10.');
                   END IF;
              ELSE
                  NULL;
         END CASE;

         PR_SET_SITUACAO_PROCESSAMENTO(vSITUACAO_ARQUIVO);
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O ARQUIVO COM O ID_ARQUIVO INFORMADO.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '70');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '71');

    -- Verifica se a data de referência informada e valida
    IF PANO_MES_REFERENCIA IS NULL THEN
      raise_application_error (-20001,'ANO_MES_REFERENCIA NAO INFORMADO.');
    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '72');

    -- Verifica se ha algum arquivo de movimento DIRF
    -- a ser processado
    BEGIN
         IF PACAO = 1 THEN
             VCONTADOR := null;
             select count(1) into VCONTADOR
               from RHPBH_ARQUIVO
              where CODIGO_EMPRESA = PCODIGO_EMPRESA
                and TIPO_ARQUIVO = '0005'
                and ID_ARQUIVO = PID_ARQUIVO
                and SITUACAO in ('00');

             IF VCONTADOR = 0 THEN
                raise_application_error (-20002,'NAO EXISTE ARQUIVO DE MOVIMENTO DE CONSIGNAÇÃO A SER PROCESSADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
             END IF;
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO EXISTE ARQUIVO DE MOVIMENTO DE CONSIGNAÇÃO A SER PROCESSADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
    END;

    -- Verifica se há configuação de tabela de plano de saúde para o período informado
    vQTDE_TABELA_PLANO_SAUDE := 0;
    BEGIN
         select COUNT(1)
           into vQTDE_TABELA_PLANO_SAUDE
           from RHPBH_PS_VALORES_PLANO_SAUDE
          where ANO_MES_REFERENCIA = pANO_MES_REFERENCIA;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
         NULL;
    WHEN OTHERS THEN
         raise_application_error (-20001,'ERRO AO TENTAR RECUPERAR CONFIGURACAO DE TABELA DE PLANO DE SAUDE.'|| 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    IF vQTDE_TABELA_PLANO_SAUDE > 0 THEN
       raise_application_error (-20001,'PARA O ANO MES REFERENCIA INFORMADO, JA EXISTE TABELA DE VALORES DE PLANO DE SAUDE.');
    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '73');

    -- VALIDAR LEIAUTE ARQUIVO
    IF PACAO in (1, 10) THEN
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = '0005'
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('00')
         order by ID_ARQUIVO)
         loop
            PR_SET_SITUACAO_PROCESSAMENTO('02');
            PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

            BEGIN
                PR_VALIDAR_LEIAUTE_ARQUIVO (C1.ID_ARQUIVO);
            EXCEPTION
            WHEN OTHERS THEN
                 dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
                 raise_application_error (-20002,'ERRO AO TENTAR VALIDAR O LEIAUTE DO ARQUIVO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

         end loop;

         PR_SET_SITUACAO_PROCESSAMENTO('03');
         PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
         PR_ATUALIZAR_SITUACAO_REGISTR0;

         commit;

    EXCEPTION
    WHEN OTHERS THEN
       --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE TABELA DE VALORES. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '74');

    IF PACAO in (2, 3, 10) THEN

        begin
            vLISTA_FAIXA_ETARIA := LISTA();
            vLISTA_FAIXA_SALARIAL := LISTA();
            vLISTA_PLANO := LISTA();

            vLISTA_VALORES := LISTA_VALORES();
            vLISTA_VALORES_MENSALIDADE := LISTA_VALORES();
            vLISTA_VALORES_SUBSIDIO := LISTA_VALORES();
            vLISTA_VALORES_SUBSIDIO_DEP := LISTA_VALORES();
            vLISTA_VALOR_FINAL := LISTA_VALOR_FINAL();

            -- Verifica se há configuação de planos para o período informado
            BEGIN
                 select ANO_MES_REFERENCIA, COUNT(1)
                   into vANO_MES_REF_PLANO, vQTDE_PLANO
                   from RHPBH_PS_PLANOS
                  where ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                from RHPBH_PS_PLANOS
                                               where ANO_MES_REFERENCIA <= pANO_MES_REFERENCIA
                                              )
                  group by ANO_MES_REFERENCIA;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 raise_application_error (-20001,'NAO FOI ENCONTRADA, PARA O ANO MES REFERENCIA INFORMADO, NENHUMA LISTA DE PLANOS PARA TABELA DE VALORES.');
            WHEN OTHERS THEN
                 raise_application_error (-20001,'ERRO AO TENTAR RECUPERAR CONFIGURACAO DE PLANOS.'|| 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            -- Verifica se há configuação de faixas salariais para o período informado
            BEGIN
                 select ANO_MES_REFERENCIA, COUNT(1)
                   into vANO_MES_REF_FAIXA_SALARIAL, vQTDE_FAIXA_SALARIAL
                   from RHPBH_PS_FAIXA_SALARIAL
                  where ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                from RHPBH_PS_FAIXA_SALARIAL
                                               where ANO_MES_REFERENCIA <= pANO_MES_REFERENCIA
                                              )
                  group by ANO_MES_REFERENCIA;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 raise_application_error (-20001,'NAO FOI ENCONTRADA, PARA O ANO MES REFERENCIA INFORMADO, NENHUMA LISTA DE FAIXAS SALARIAIS PARA TABELA DE VALORES.');
            WHEN OTHERS THEN
                 raise_application_error (-20001,'ERRO AO TENTAR RECUPERAR CONFIGURACAO DE FAIXA SALARIAL.'|| 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            -- Verifica se há configuação de faixas etárias para o período informado
            BEGIN
                 select ANO_MES_REFERENCIA , COUNT(1)
                   into vANO_MES_REF_FAIXA_ETARIA, vQTDE_FAIXA_ETARIA
                   from RHPBH_PS_FAIXA_ETARIA
                  where ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
                                                from RHPBH_PS_FAIXA_ETARIA
                                               where ANO_MES_REFERENCIA <= pANO_MES_REFERENCIA
                                              )
                  group by ANO_MES_REFERENCIA;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 raise_application_error (-20001,'NAO FOI ENCONTRADA, PARA O ANO MES REFERENCIA INFORMADO, NENHUMA LISTA DE FAIXAS ETARIAS PARA TABELA DE VALORES.');
            WHEN OTHERS THEN
                 raise_application_error (-20001,'ERRO AO TENTAR RECUPERAR CONFIGURACAO DE FAIXA ETARIA.'|| 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            -- Parser do registro
            for c1 in(
            select *
              from RHPBH_ARQUIVO_LINHA
             where ID_ARQUIVO = PID_ARQUIVO
               and NUMERO_LINHA > 1
             order by NUMERO_LINHA
             )
             loop
                 vLINHA := c1.LINHA;
                 vTEXTO := '';
                 vCONTADOR_TEXTO := 1;
                 vCONTADOR_PLANO := 0;

                 vLISTA_PLANOS_VALORES := LISTA_PLANO_VALOR();

                 -- Parser do registro
                 for i in 1..LENGTH(vLINHA)
                 loop
                     vCARACTER := SUBSTR(VLINHA, i, 1);
                     IF vCARACTER = ';' THEN

                        CASE WHEN vCONTADOR_TEXTO = 1 THEN REG_VALOR_PS.TIPO_REGISTRO := vTEXTO;
                             WHEN vCONTADOR_TEXTO = 2 THEN REG_VALOR_PS.FAIXA_SALARIAL := vTEXTO;
                             WHEN vCONTADOR_TEXTO = 3 THEN REG_VALOR_PS.FAIXA_ETARIA := vTEXTO;
                             ELSE
                                  vCONTADOR_PLANO := vCONTADOR_PLANO + 1;
                                  REG_PLANO_VALOR.PLANO := 'plano_'||vCONTADOR_PLANO;
                                  REG_PLANO_VALOR.VALOR := vTEXTO;

                                  vLISTA_PLANOS_VALORES.Extend;
                                  vLISTA_PLANOS_VALORES(vLISTA_PLANOS_VALORES.count) := REG_PLANO_VALOR;
                         END CASE;

                        vTEXTO := '';
                        vCONTADOR_TEXTO := vCONTADOR_TEXTO + 1;
                     ELSE
                        vTEXTO := vTEXTO || vCARACTER;
                     END IF;

                 end loop;

                 IF vTEXTO IS NOT NULL THEN
                      vCONTADOR_PLANO := vCONTADOR_PLANO + 1;
                      REG_PLANO_VALOR.PLANO := 'plano_'||vCONTADOR_PLANO;
                      REG_PLANO_VALOR.VALOR := vTEXTO;

                      vLISTA_PLANOS_VALORES.Extend;
                      vLISTA_PLANOS_VALORES(vLISTA_PLANOS_VALORES.count) := REG_PLANO_VALOR;
                 END IF;

                 REG_VALOR_PS.PLANOS_VALORES := vLISTA_PLANOS_VALORES;
                 REG_VALOR_PS.ANO_MES_REFERENCIA := pANO_MES_REFERENCIA;
                 REG_VALOR_PS.ID_ARQUIVO := C1.ID_ARQUIVO;
                 REG_VALOR_PS.NUMERO_LINHA := C1.NUMERO_LINHA;

                 vLISTA_VALORES.Extend;
                 vLISTA_VALORES(vLISTA_VALORES.count) := REG_VALOR_PS;

             end loop;
            -- Fim do Parser

            -- Divide a lista de valores em 3 listas: mensalidade, subsidio, subsidio_dependente
            for i in 1..vLISTA_VALORES.count
            loop
                 REG_VALOR_PS := vLISTA_VALORES(i);
                 IF REG_VALOR_PS.TIPO_REGISTRO = 'mensalidade' THEN
                   vLISTA_VALORES_MENSALIDADE.Extend;
                   vLISTA_VALORES_MENSALIDADE(vLISTA_VALORES_MENSALIDADE.count) := REG_VALOR_PS;
                 END IF;

                 IF REG_VALOR_PS.TIPO_REGISTRO = 'subsidio' THEN
                   vLISTA_VALORES_SUBSIDIO.Extend;
                   vLISTA_VALORES_SUBSIDIO(vLISTA_VALORES_SUBSIDIO.count) := REG_VALOR_PS;
                 END IF;

                 IF REG_VALOR_PS.TIPO_REGISTRO = 'subsidio_dependente' THEN
                   vLISTA_VALORES_SUBSIDIO_DEP.Extend;
                   vLISTA_VALORES_SUBSIDIO_DEP(vLISTA_VALORES_SUBSIDIO_DEP.count) := REG_VALOR_PS;
                 END IF;
            end loop;

            -- Tratamento da lista valores de subsídios
            -- Caso a lista de subsídio de dependente tenha apenas 1 registro
            -- este deve conter a palavra chave "TODOS" como valor para faixa salarial e faixa etaria.
            -- E a lista de subsidio de dependente recebe a mesma configuração de faixas salariais e faixas etárias informada para o tipo de registro de subsídio
            -- porém com o valor informado para o subsídio de dependente.
            -- Caso contrário será gerado log.
            -- Caso a lista de subsídio de dependente tenha mais de 1 registro,
            -- no arquivo deve ter explicitos registros do tipo de subsidio dependente para todas as faixas salariais e para todas as faixas etárias
            IF vLISTA_VALORES_SUBSIDIO_DEP.count = 1 THEN
               REG_VALOR_PS := vLISTA_VALORES_SUBSIDIO_DEP(1);

               IF ((REG_VALOR_PS.FAIXA_SALARIAL <> 'TODOS') OR (REG_VALOR_PS.FAIXA_ETARIA <> 'TODOS')) THEN
                  IF ((vQTDE_FAIXA_SALARIAL * vQTDE_FAIXA_ETARIA) <> vLISTA_VALORES_SUBSIDIO.count) THEN
                     GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_VALORES_PS_QTDE_DIF_SUB, 'QUANTIDADE DE REGISTROS DE SUBSIDIO DIFERE DO TOTAL ESPERADO. ' || vQTDE_FAIXA_SALARIAL || ' | ' || vQTDE_FAIXA_ETARIA || ' | ' || vLISTA_VALORES_SUBSIDIO.count);
                  END IF;
               ELSIF ((REG_VALOR_PS.FAIXA_SALARIAL = 'TODOS') OR (REG_VALOR_PS.FAIXA_ETARIA = 'TODOS')) THEN

                  REG_VALOR_PS_AUX_SUB_DEP := vLISTA_VALORES_SUBSIDIO_DEP(1);
                  vLISTA_VALORES_SUBSIDIO_DEP := vLISTA_VALORES_SUBSIDIO;

                for i in 1..vLISTA_VALORES_SUBSIDIO_DEP.count
                loop
                     REG_VALOR_PS := vLISTA_VALORES_SUBSIDIO_DEP(i);
                     REG_VALOR_PS.PLANOS_VALORES := REG_VALOR_PS_AUX_SUB_DEP.PLANOS_VALORES;

                     vLISTA_VALORES_SUBSIDIO_DEP(i) := REG_VALOR_PS;
                end loop;

               END IF;
            ELSE
                IF vLISTA_VALORES_SUBSIDIO_DEP.count <> vLISTA_VALORES_SUBSIDIO.count THEN
                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_VALORES_PS_QTDE_DIF_SUB, 'QUANTIDADE DE REGISTROS DE SUBSIDIO DEPENDENTE DIFERE DO TOTAL ESPERADO. ' || vQTDE_FAIXA_SALARIAL || ' | ' || vQTDE_FAIXA_ETARIA || ' | ' || vLISTA_VALORES_SUBSIDIO.count);
                END IF;


            END IF;



            -- Valida quantidade
            IF (vQTDE_FAIXA_ETARIA <> vLISTA_VALORES_MENSALIDADE.count) THEN
               GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_VALORES_PS_QTDE_DIF_MENS, 'QUANTIDADE DE REGISTROS DE MENSALIDADE DIFERE DO TOTAL ESPERADO. ' || vQTDE_PLANO || ' | ' || vLISTA_VALORES_MENSALIDADE.count);
            END IF;

            IF ((vQTDE_FAIXA_SALARIAL * vQTDE_FAIXA_ETARIA) <> vLISTA_VALORES_SUBSIDIO.count) THEN
               GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_VALORES_PS_QTDE_DIF_SUB, 'QUANTIDADE DE REGISTROS DE SUBSIDIO DIFERE DO TOTAL ESPERADO. ' || vQTDE_FAIXA_SALARIAL || ' | ' || vQTDE_FAIXA_ETARIA || ' | ' || vLISTA_VALORES_SUBSIDIO.count);
            END IF;

            IF ((vQTDE_FAIXA_SALARIAL * vQTDE_FAIXA_ETARIA) <> vLISTA_VALORES_SUBSIDIO_DEP.count) THEN
               GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_VALORES_PS_QTDE_DIF_SUB, 'QUANTIDADE DE REGISTROS DE SUBSIDIO DEPENDENTE DIFERE DO TOTAL ESPERADO. ' || vQTDE_FAIXA_SALARIAL || ' | ' || vQTDE_FAIXA_ETARIA || ' | ' || vLISTA_VALORES_SUBSIDIO_DEP.count);
            END IF;

            -- Validações
            for i in 1..vLISTA_VALORES.count
            loop
                REG_VALOR_PS := vLISTA_VALORES(i);

                vTABELA_LINHA := REG_VALOR_PS.TIPO_REGISTRO || ';'|| REG_VALOR_PS.FAIXA_SALARIAL || ';'||REG_VALOR_PS.FAIXA_ETARIA;

                -- Valida o tipo de registro
                IF REG_VALOR_PS.TIPO_REGISTRO not in('mensalidade','subsidio','subsidio_dependente') THEN
                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_PS.NUMERO_LINHA, LOG_TIPO_REGISTRO_INVALIDO, ' TIPO_REGISTRO = '||REG_VALOR_PS.TIPO_REGISTRO);
                END IF;

                -- Valida faixa salarial nao informada
                IF REG_VALOR_PS.TIPO_REGISTRO not in ('mensalidade') and REG_VALOR_PS.FAIXA_SALARIAL IS NULL THEN
                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_PS.NUMERO_LINHA, LOG_FAIXA_SALARIAL_NULA, ' FAIXA SALARIAL NAO INFORMADA. PARA ESTE TIPO DE REGISTRO A INFORMACAO E OBRIGATORIA. ');
                END IF;

                -- Valida faixa salarial
                IF REG_VALOR_PS.TIPO_REGISTRO not in ('mensalidade') and REG_VALOR_PS.FAIXA_SALARIAL <> 'TODOS' THEN
                    BEGIN
                         select DESCRICAO
                           into vFAIXA_SALARIAL
                           from RHPBH_PS_FAIXA_SALARIAL
                          where ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_SALARIAL
                            and DESCRICAO = REG_VALOR_PS.FAIXA_SALARIAL;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                         GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_PS.NUMERO_LINHA, LOG_FAIXA_SALARIAL_INVALIDA, 'FAIXA SALARIAL INVALIDA = ' || REG_VALOR_PS.FAIXA_SALARIAL );
                    WHEN OTHERS THEN
                         GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_PS.NUMERO_LINHA, LOG_FAIXA_SALARIAL_INVALIDA, 'ERRO AO TENTAR VALIDAR FAIXA SALARIAL.');
                    END;
                END IF;

                -- Valida faixa etaria
                IF REG_VALOR_PS.FAIXA_ETARIA <> 'TODOS' THEN
                    BEGIN
                         select DESCRICAO
                           into vFAIXA_ETARIA
                           from RHPBH_PS_FAIXA_ETARIA
                          where ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_ETARIA
                            and DESCRICAO = REG_VALOR_PS.FAIXA_ETARIA;
                    EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                         GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_PS.NUMERO_LINHA, LOG_FAIXA_ETARIA_INVALIDA, 'FAIXA ETARIA INVALIDA = ' || REG_VALOR_PS.FAIXA_ETARIA );
                    WHEN OTHERS THEN
                         GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_PS.NUMERO_LINHA, LOG_FAIXA_ETARIA_INVALIDA, 'ERRO AO TENTAR VALIDAR FAIXA ETARIA.');
                    END;
                END IF;
                -- FAIXA ETARIA
                IF REG_VALOR_PS.FAIXA_ETARIA IS NOT NULL THEN
                    vREGISTRO_EXISTENTE := FALSE;
                    for j in 1..vLISTA_FAIXA_ETARIA.count
                    loop

                         IF vLISTA_FAIXA_ETARIA(j) = REG_VALOR_PS.FAIXA_ETARIA THEN
                            vREGISTRO_EXISTENTE := TRUE;
                            EXIT;
                         END IF;

                    end loop;

                    IF NOT vREGISTRO_EXISTENTE THEN
                      vLISTA_FAIXA_ETARIA.Extend;
                      vLISTA_FAIXA_ETARIA(vLISTA_FAIXA_ETARIA.count) := REG_VALOR_PS.FAIXA_ETARIA;
                    END IF;
                END IF;

                -- FAIXA SALARIAL
                IF REG_VALOR_PS.FAIXA_SALARIAL IS NOT NULL THEN
                    vREGISTRO_EXISTENTE := FALSE;
                    for j in 1..vLISTA_FAIXA_SALARIAL.count
                    loop

                         IF vLISTA_FAIXA_SALARIAL(j) = REG_VALOR_PS.FAIXA_SALARIAL THEN
                            vREGISTRO_EXISTENTE := TRUE;
                            EXIT;
                         END IF;

                    end loop;

                    IF NOT vREGISTRO_EXISTENTE THEN
                      vLISTA_FAIXA_SALARIAL.Extend;
                      vLISTA_FAIXA_SALARIAL(vLISTA_FAIXA_SALARIAL.count) := REG_VALOR_PS.FAIXA_SALARIAL;
                    END IF;
                END IF;

                -- PLANO

                for k in 1..REG_VALOR_PS.PLANOS_VALORES.count
                loop
                    IF REG_VALOR_PS.PLANOS_VALORES(k).PLANO IS NOT NULL THEN
                        vREGISTRO_EXISTENTE := FALSE;
                        for j in 1..vLISTA_PLANO.count
                        loop

                             IF vLISTA_PLANO(j) = REG_VALOR_PS.PLANOS_VALORES(k).PLANO THEN
                                vREGISTRO_EXISTENTE := TRUE;
                                EXIT;
                             END IF;

                        end loop;

                        IF NOT vREGISTRO_EXISTENTE THEN
                          vLISTA_PLANO.Extend;
                          vLISTA_PLANO(vLISTA_PLANO.count) := REG_VALOR_PS.PLANOS_VALORES(k).PLANO;
                        END IF;
                    END IF;
                end loop;

            end loop;

            -- Validações
            -- Valida se para todas as faixas salariais possui valores de mensalidade
            for C1 in (
                     select DESCRICAO
                       from RHPBH_PS_FAIXA_ETARIA
                      where ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_ETARIA
                      --union
                      --select 'TESTE' from dual
            )
            loop
                vREGISTRO_EXISTENTE := FALSE;
                for i in 1..vLISTA_VALORES_MENSALIDADE.count
                loop
                    REG_VALOR_PS := vLISTA_VALORES_MENSALIDADE(i);
                    IF REG_VALOR_PS.FAIXA_ETARIA = C1.DESCRICAO THEN
                       vREGISTRO_EXISTENTE := TRUE;
                       EXIT;
                    END IF;

                end loop;

                IF NOT vREGISTRO_EXISTENTE THEN
                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_FALTA_VALOR_FX_ETARIA, 'FAIXA ETARIA = ' || C1.DESCRICAO );
                END IF;
            end loop;

            -- Valida se para todas as faixas salariais e faixas etarias possui valores de subsidio
            for C1 in (
                     select (RHPBH_PS_FAIXA_SALARIAL.DESCRICAO || RHPBH_PS_FAIXA_ETARIA.DESCRICAO) AS DESCRICAO
                       from RHPBH_PS_FAIXA_SALARIAL, RHPBH_PS_FAIXA_ETARIA
                      where RHPBH_PS_FAIXA_SALARIAL.ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_SALARIAL
                        and RHPBH_PS_FAIXA_ETARIA.ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_ETARIA
                      --union
                      --select 'TESTE' from dual
            )
            loop
                -- Lista de Subsídio
                vREGISTRO_EXISTENTE := FALSE;
                for i in 1..vLISTA_VALORES_SUBSIDIO.count
                loop
                    REG_VALOR_PS := vLISTA_VALORES_SUBSIDIO(i);
                    IF (REG_VALOR_PS.FAIXA_SALARIAL || REG_VALOR_PS.FAIXA_ETARIA) = C1.DESCRICAO THEN
                       vREGISTRO_EXISTENTE := TRUE;
                       EXIT;
                    END IF;

                end loop;

                IF NOT vREGISTRO_EXISTENTE THEN
                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_FALTA_VALOR_FX_SAL_ETARIA, 'FAIXA SALARIAL/ETARIA = ' || C1.DESCRICAO );
                END IF;

                -- Lista de Subsídio Dependente
                vREGISTRO_EXISTENTE := FALSE;
                for i in 1..vLISTA_VALORES_SUBSIDIO_DEP.count
                loop
                    REG_VALOR_PS := vLISTA_VALORES_SUBSIDIO_DEP(i);
                    IF (REG_VALOR_PS.FAIXA_SALARIAL || REG_VALOR_PS.FAIXA_ETARIA) = C1.DESCRICAO THEN
                       vREGISTRO_EXISTENTE := TRUE;
                       EXIT;
                    END IF;

                end loop;

                IF NOT vREGISTRO_EXISTENTE THEN
                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, 0, LOG_FALTA_VALOR_FX_SAL_ETARIA, 'FAIXA SALARIAL/ETARIA = ' || C1.DESCRICAO );
                END IF;
            end loop;

            -- IMPRIME FAIXA ETARIA
            --IMPRIMIR_LISTA(vLISTA_FAIXA_ETARIA);

            -- IMPRIME FAIXA SALARIAL
            --IMPRIMIR_LISTA(vLISTA_FAIXA_SALARIAL);

            -- IMPRIME MENSALIDADE
            --IMPRIMIR_MENSALIDADE(vLISTA_VALORES_MENSALIDADE);

            -- IMPRIME SUBSIDIO
            --IMPRIMIR_SUBSIDIO(vLISTA_VALORES_SUBSIDIO);



            /*
            dbms_output.put_line('##############################################################################');
            dbms_output.put_line('######################      MONTA LISTA FINAL      ###########################');
            dbms_output.put_line('##############################################################################');
            -- TABELA DE VALORES
            dbms_output.put_line('TABELA DE VALORES');
            */

            -- Monta lista final para a inserção da tabela de valores
            for i in 1..vLISTA_VALORES_SUBSIDIO.count
            loop
                 REG_VALOR_PS := vLISTA_VALORES_SUBSIDIO(i);
                 REG_VALOR_PS_AUX_SUB_DEP := vLISTA_VALORES_SUBSIDIO_DEP(i);


                 REG_VALOR_FINAL.ID_ARQUIVO := REG_VALOR_PS.ID_ARQUIVO;
                 REG_VALOR_FINAL.NUMERO_LINHA := REG_VALOR_PS.NUMERO_LINHA;
                 REG_VALOR_FINAL.ANO_MES_REFERENCIA := REG_VALOR_PS.ANO_MES_REFERENCIA;
                 REG_VALOR_FINAL.FAIXA_SALARIAL := REG_VALOR_PS.FAIXA_SALARIAL;
                 REG_VALOR_FINAL.FAIXA_ETARIA := REG_VALOR_PS.FAIXA_ETARIA;
                 REG_VALOR_FINAL.VALORES_SUBSIDIOS := REG_VALOR_PS.PLANOS_VALORES;

                 -- Valores Subsidios de Dependentes
                 REG_VALOR_FINAL.VALORES_SUBSIDIOS_DEP := REG_VALOR_PS_AUX_SUB_DEP.PLANOS_VALORES;

                 -- Valores de Mensalidade
                 for i in 1..vLISTA_VALORES_MENSALIDADE.count
                 loop
                     REG_VALOR_PS_AUX := vLISTA_VALORES_MENSALIDADE(i);

                     IF REG_VALOR_PS_AUX.FAIXA_ETARIA = REG_VALOR_PS.FAIXA_ETARIA THEN
                         REG_VALOR_FINAL.VALORES_MENSALIDADES := REG_VALOR_PS_AUX.PLANOS_VALORES;
                     END IF;

                 end loop;

                 vLISTA_VALOR_FINAL.Extend;
                 vLISTA_VALOR_FINAL(vLISTA_VALOR_FINAL.count) := REG_VALOR_FINAL;


                 vTABELA_LINHA := RPAD(REG_VALOR_FINAL.ANO_MES_REFERENCIA, 15, ' ') || '     ' ||
                                  RPAD(NVL(REG_VALOR_FINAL.FAIXA_SALARIAL, 'Não aplicável'), 30, ' ') || '     ' ||
                                  RPAD(REG_VALOR_FINAL.FAIXA_ETARIA, 30, ' ');



                 for j in 1..REG_VALOR_FINAL.VALORES_MENSALIDADES.count
                 loop
                     REG_PLANO_VALOR := REG_VALOR_FINAL.VALORES_MENSALIDADES(j);
                     vTABELA_LINHA := vTABELA_LINHA || RPAD(REG_PLANO_VALOR.VALOR, 15, ' ');
                 end loop;

                 vTABELA_LINHA := RPAD(' ', 15, ' ') || '     ' ||
                                  RPAD(' ', 30, ' ') || '     ' ||
                                  RPAD(' ', 30, ' ');



                 for j in 1..REG_VALOR_FINAL.VALORES_SUBSIDIOS.count
                 loop
                     REG_PLANO_VALOR := REG_VALOR_FINAL.VALORES_SUBSIDIOS(j);
                     vTABELA_LINHA := vTABELA_LINHA || RPAD(REG_PLANO_VALOR.VALOR, 15, ' ');
                 end loop;


             end loop;
             commit;

             IF PACAO in (3, 10) THEN
                vCONTADOR := 0;
                PR_SET_SITUACAO_PROCESSAMENTO('06');
                PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

                vCONTADOR_INCONFORMIDADES := -1;
                BEGIN
                   select count(1)
                     into vCONTADOR_INCONFORMIDADES
                     from RHPBH_ARQUIVO_LOG
                    where ID_ARQUIVO = PID_ARQUIVO
                      and TIPO = 99;
                EXCEPTION
                WHEN OTHERS THEN
                     NULL;
                END;

                IF vCONTADOR_INCONFORMIDADES = 0 THEN

                    vCONTADOR := 0;

                    for i in 1..vLISTA_PLANO.count
                    loop
                      for j in 1..vLISTA_VALOR_FINAL.count
                      loop
                           REG_VALOR_FINAL := vLISTA_VALOR_FINAL(j);

                           for k in 1..REG_VALOR_FINAL.VALORES_SUBSIDIOS.count
                           loop
                           IF REG_VALOR_FINAL.VALORES_SUBSIDIOS(k).PLANO = vLISTA_PLANO(i) THEN

                               vCONTADOR := vCONTADOR + 1;
                               vTABELA_LINHA := LPAD(vCONTADOR, 3, '0') || '     ' ||
                                                RPAD(REG_VALOR_FINAL.ANO_MES_REFERENCIA, 15, ' ') || '     ' ||
                                                RPAD(REG_VALOR_FINAL.VALORES_SUBSIDIOS(k).PLANO, 15, ' ') || '     ' ||
                                                RPAD(NVL(REG_VALOR_FINAL.FAIXA_SALARIAL, 'Não aplicável'), 30, ' ') || '     ' ||
                                                RPAD(REG_VALOR_FINAL.FAIXA_ETARIA, 30, ' ')  || '     ' ||
                                                RPAD(REG_VALOR_FINAL.VALORES_MENSALIDADES(k).VALOR, 30, ' ')  || '     ' ||
                                                RPAD(REG_VALOR_FINAL.VALORES_SUBSIDIOS(k).VALOR, 30, ' ')  || '     '
                                                ;

                              REG_VALORES_PLANO_SAUDE.ANO_MES_REFERENCIA := REG_VALOR_FINAL.ANO_MES_REFERENCIA;
                              REG_VALORES_PLANO_SAUDE.ANO_MES_REF_PLANO := vANO_MES_REF_PLANO;
                              REG_VALORES_PLANO_SAUDE.ANO_MES_REF_FAIXA_SALARIAL := vANO_MES_REF_FAIXA_SALARIAL;
                              REG_VALORES_PLANO_SAUDE.ANO_MES_REF_FAIXA_ETARIA := vANO_MES_REF_FAIXA_ETARIA;
                              REG_VALORES_PLANO_SAUDE.DATA_CRIACAO := sysdate;

                              REG_VALORES_PLANO_SAUDE.IDENTIFICADOR_PLANO := REG_VALOR_FINAL.VALORES_SUBSIDIOS(k).PLANO;
                              REG_VALORES_PLANO_SAUDE.IDENTIFICADOR_FAIXA_SALARIAL := NULL;
                              REG_VALORES_PLANO_SAUDE.IDENTIFICADOR_FAIXA_ETARIA := NULL;

                              BEGIN
                                   select IDENTIFICADOR
                                     into REG_VALORES_PLANO_SAUDE.IDENTIFICADOR_FAIXA_SALARIAL
                                     from RHPBH_PS_FAIXA_SALARIAL
                                    where ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_SALARIAL
                                      and DESCRICAO = REG_VALOR_FINAL.FAIXA_SALARIAL;
                              EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_FINAL.NUMERO_LINHA, LOG_FAIXA_SALARIAL_INVALIDA, 'FAIXA SALARIAL INVALIDA = ' || REG_VALOR_FINAL.FAIXA_SALARIAL );
                              WHEN OTHERS THEN
                                   dbms_output.put_line('ERRO AO TENTAR RECUPERAR FAIXA SALARIAL. ' || REG_VALOR_FINAL.FAIXA_SALARIAL );
                              END;

                              BEGIN
                                   select IDENTIFICADOR
                                     into REG_VALORES_PLANO_SAUDE.IDENTIFICADOR_FAIXA_ETARIA
                                     from RHPBH_PS_FAIXA_ETARIA
                                    where ANO_MES_REFERENCIA = vANO_MES_REF_FAIXA_ETARIA
                                      and DESCRICAO = REG_VALOR_FINAL.FAIXA_ETARIA;
                              EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                   GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, PID_ARQUIVO, REG_VALOR_FINAL.NUMERO_LINHA, LOG_FAIXA_ETARIA_INVALIDA, 'FAIXA ETARIA INVALIDA = ' || REG_VALOR_FINAL.FAIXA_ETARIA );
                              WHEN OTHERS THEN
                                   dbms_output.put_line('ERRO AO TENTAR RECUPERAR FAIXA ETARIA. ' || REG_VALOR_FINAL.FAIXA_ETARIA );
                              END;



                              REG_VALORES_PLANO_SAUDE.VALOR_MENSALIDADE := TO_NUMBER(REPLACE(REG_VALOR_FINAL.VALORES_MENSALIDADES(k).VALOR,',','.'));
                              REG_VALORES_PLANO_SAUDE.VALOR_SUBSIDIO := TO_NUMBER(REPLACE(REG_VALOR_FINAL.VALORES_SUBSIDIOS(k).VALOR,',','.'));
                              REG_VALORES_PLANO_SAUDE.VALOR_SUBSIDIO_DEP := TO_NUMBER(REPLACE(REG_VALOR_FINAL.VALORES_SUBSIDIOS_DEP(k).VALOR,',','.'));
                              REG_VALORES_PLANO_SAUDE.LOGIN_USUARIO := 'IMPORT_TABELA_PS';
                              REG_VALORES_PLANO_SAUDE.DT_ULT_ALTER_USUA := sysdate;

                              BEGIN
                                   Insert into RHPBH_PS_VALORES_PLANO_SAUDE values REG_VALORES_PLANO_SAUDE;
                                   vQTDE_LINHAS_AFETADAS := sql%rowcount;

                                   IF vQTDE_LINHAS_AFETADAS > 0 THEN
                                      -- Log sucesso inclusao
                                      GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, PID_ARQUIVO, REG_VALOR_FINAL.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL );
                                   END IF;

                              EXCEPTION
                              WHEN OTHERS THEN
                                   raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
                              END;


                             EXIT;
                           END IF;
                           end loop;
                      end loop;

                    end loop;

                END IF;


                PR_SET_SITUACAO_PROCESSAMENTO('07');
                PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
             END IF;

             /*
        dbms_output.put_line('##############################################################################');
        dbms_output.put_line('#####################    VALORES PARA INCLUSAO    ############################');
        dbms_output.put_line('##############################################################################');
            */
            /*
        for i in 1..vLISTA_VALORES.count
        loop
             REG_VALOR_PS := vLISTA_VALORES(i);

             vTABELA_LINHA := RPAD(REG_VALOR_PS.ANO_MES_REFERENCIA, 15, ' ') ||
                              RPAD(NVL(REG_VALOR_PS.FAIXA_SALARIAL, 'Não aplicável'), 30, ' ') ||
                              RPAD(REG_VALOR_PS.FAIXA_ETARIA, 30, ' ');



             for j in 1..REG_VALOR_PS.PLANOS_VALORES.count
             loop
                 REG_PLANO_VALOR := REG_VALOR_PS.PLANOS_VALORES(j);
                 vTABELA_LINHA := vTABELA_LINHA || RPAD(REG_PLANO_VALOR.VALOR, 15, ' ');
             end loop;

             --dbms_output.put_line(vTABELA_LINHA);
         end loop;
        dbms_output.put_line('##############################################################################');

            */

            /*
        dbms_output.put_line('##############################################################################');
        dbms_output.put_line('#####################           INSERTS           ############################');
        dbms_output.put_line('##############################################################################');

        */
        /*
        vCONTADOR := 0;
        for i in 1..vLISTA_VALOR_FINAL.count
        loop
             REG_VALOR_FINAL := vLISTA_VALOR_FINAL(i);


             for j in 1..vLISTA_PLANO.count
               loop
               vCONTADOR := vCONTADOR + 1;
             vTABELA_LINHA := LPAD(vCONTADOR, 3, '0') || '     ' ||
                              RPAD(REG_VALOR_FINAL.ANO_MES_REFERENCIA, 15, ' ') || '     ' ||
                              RPAD(vLISTA_PLANO(j), 15, ' ') || '     ' ||
                              RPAD(NVL(REG_VALOR_FINAL.FAIXA_SALARIAL, 'Não aplicável'), 30, ' ') || '     ' ||
                              RPAD(REG_VALOR_FINAL.FAIXA_ETARIA, 30, ' ')  || '     ' ||
                              RPAD(REG_VALOR_FINAL.VALORES_MENSALIDADES(j).VALOR, 30, ' ')  || '     ' ||
                              RPAD(REG_VALOR_FINAL.VALORES_SUBSIDIOS(j).VALOR, 30, ' ')  || '     '
                              ;

             dbms_output.put_line(vTABELA_LINHA);


              end loop;

         end loop;
        dbms_output.put_line('##############################################################################');

        */

        /*
        dbms_output.put_line('##############################################################################');
        dbms_output.put_line('#####################     INSERTS ORDENADOS       ############################');
        dbms_output.put_line('##############################################################################');

        */

        PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '80');
        --dbms_output.put_line('##############################################################################');

         end;

     END IF;
     commit;



    PR_STATS_PROCESSA_ARQUIVO(PID_ARQUIVO);
------------------------------------------------------------------------

--dbms_output.put_line('PROCESSAMENTO FINALIZADO.');
--dbms_output.put_line('REGISTROS PROCESSADOS = ' || vCONTADOR);
end;