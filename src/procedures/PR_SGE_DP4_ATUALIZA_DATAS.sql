
  CREATE OR REPLACE EDITIONABLE PROCEDURE "PONTO_ELETRONICO"."PR_SGE_DP4_ATUALIZA_DATAS" (DATA_INICIO IN DATE)
AS 
BEGIN 

--Kellysson em 19/1/24 baseado (sql_atualiza_data_horarios_b2.sql)

--B2 Kellysson em 28/8/23 baseado no (sql_atualiza_data_horarios_b1.sql) para ajustar e aceitar proximas cargas que nao seja a primeira mundando o select do for, TAMBEM ALTERANDO DATA_INICIO e DATA_FIM para INICIO_JORNADA e FIM_JORNADA
--Kellysson em 23/7/23 -sql_atualiza_data_horarios_b1.sql migrou para este devido performace ruim do (sql_gera_marcacoes_dia_b4.sql) baseado no (sql_gera_marcacoes_dia_b4.sql )
--Kellysson em 15/7/23 virou sql_gera_marcacoes_dia_b4.sql derivado do sql_novo_12-7-23_para sql_gera_marcacoes_dia_b3.sql
--Kellysson novo em 11/7/23 ---para criar os registros diarios por CPF para o DE/PARA 2023 DE EXTENSOES E 2024 PARA FRENTE
DECLARE 
vCONTADOR_C3 NUMBER;
vFIM_REGENCIA_ATUAL NUMBER;
vOBS_REGISTRO VARCHAR2(4000);
vDATA_INICIO DATE;

BEGIN
dbms_output.enable(null);
vCONTADOR_C3 := 0;
vFIM_REGENCIA_ATUAL := 0;
vOBS_REGISTRO := NULL;
vDATA_INICIO := DATA_INICIO;


--INICIO C3-------------------------------------------------------LOOP PARA PASSAR POR TODOS OS REGISTROS DE 1 DIA DE 1 SEMANA EXISTENTES DE UM CPF-----------------------------------------------------------------------------------------
FOR C3 IN (

--SELECT COUNT(1) FROM(---COUNT
--SELECT ID_HORARIO, COUNT(1) FROM(---COUNT
--SELECT CPF, COUNT(1) FROM(---COUNT

SELECT
CASE WHEN D.NRO_DIA_SEMANA = 1 THEN D.DATA_DIA ELSE TRUNC(TO_DATE(X2.DATA,'DD/MM/YYYY'))-(D.NRO_DIA_SEMANA-1)END DOMINGO_ANTERIOR,
CASE WHEN D.NRO_DIA_SEMANA = 1 THEN TRUNC(D.DATA_DIA)+1 ELSE TRUNC(TO_DATE(X2.DATA,'DD/MM/YYYY'))-(D.NRO_DIA_SEMANA-2)END SEGUNDA_ANTERIOR, 
CASE WHEN D.NRO_DIA_SEMANA = 6 THEN X2.DATA WHEN D.NRO_DIA_SEMANA = 7 THEN TRUNC(X2.DATA)-1 WHEN D.NRO_DIA_SEMANA = 1 THEN TRUNC(X2.DATA)-2 ELSE TRUNC(TO_DATE(X2.DATA,'DD/MM/YYYY'))+(6-D.NRO_DIA_SEMANA)END SEXTA_SEGUINTE,
CASE WHEN D.NRO_DIA_SEMANA = 1 THEN D.DATA_DIA WHEN D.NRO_DIA_SEMANA = 7 THEN TRUNC(D.DATA_DIA)+1 ELSE TRUNC(TO_DATE(X2.DATA,'DD/MM/YYYY'))+(7-D.NRO_DIA_SEMANA+1)END DOMINGO_SEGUINTE,
X2.* FROM(    

SELECT  
CASE WHEN X.DT_CANCELAMENTO_USAR IS NULL THEN '1_CRIAR_MARCACOES_DIA_CPF'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') > TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') THEN '2_CRIAR_MARCACOES_DIA_CPF_DATA_APOS_CANCELAMENTO'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') <  TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN '3_CRIAR_MARCACOES_DIA_CPF_DATA_ANTES_CANCELAMENTO'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') >= TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN '4_NAO_CRIAR_MARCACOES_DIA_CPF_DATA_NO_DIA_OU_APOS_CANCELAMENTO'
ELSE 'NAO_MAPEADO_AINDA' END CENARIO_ACAO,
CASE WHEN X.DT_CANCELAMENTO_USAR IS NULL THEN '1_CRIAR_MARCACOES_DIA_CPF'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') > TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') THEN '2_CRIAR_MARCACOES_DIA_CPF_DATA_APOS_CANCELAMENTO'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') <  TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN '3_CRIAR_MARCACOES_DIA_CPF_DATA_ANTES_CANCELAMENTO'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') >= TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN '4_NAO_CRIAR_MARCACOES_DIA_CPF_DATA_NO_DIA_OU_APOS_CANCELAMENTO'
ELSE 'NAO_MAPEADO_AINDA' END CENARIO_ACAO2,

CASE WHEN X.DT_CANCELAMENTO_USAR IS NULL THEN 'INCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') > TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') THEN 'INCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') <  TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN 'INCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') >= TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN 'EXCLUI'
ELSE NULL END ACAO,
CASE WHEN X.DT_CANCELAMENTO_USAR IS NULL THEN 'INCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') > TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') <  TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN 'INCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') > TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') >= TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN 'EXCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') <  TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN 'INCLUI'
WHEN X.DT_CANCELAMENTO_USAR IS NOT NULL AND TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY')<= TO_DATE(X.FIM_JORNADA,'DD/MM/YYYY') AND TO_DATE(X.DATA,'DD/MM/YYYY') >= TO_DATE(X.DT_CANCELAMENTO_USAR,'DD/MM/YYYY') THEN 'EXCLUI'
ELSE NULL END ACAO2,
X.*
FROM 
(

SELECT 
ROW_NUMBER() OVER(PARTITION BY G2.CPF, G2.DATA ORDER BY G2.CPF, G2.DATA, G2.INICIO_TURNO, G2.INICIO_REGENCIA, G2.ID_HORARIO )ORDEM_DIA_CPF, 
ROW_NUMBER() OVER (PARTITION BY G2.CPF, TRUNC(G2.DATA), G2.INICIO_TURNO, G2.INICIO_REGENCIA ORDER BY G2.CPF, G2.DATA, G2.INICIO_TURNO, G2.INICIO_REGENCIA, G2.ID_HORARIO )ORDEM_REG,
A.ID_JORNADA, A.BM, A.TIPO_JORNADA, A.TURNO, A.INICIO_JORNADA, A.FIM_JORNADA, A.DT_CANCELAMENTO_USAR,
A.DURACAO_AULA, A.CARGA_HORARIA, A.COORDENACAO,
CASE WHEN A.TURNO = 'MANHÃƒ' THEN 1 WHEN A.TURNO = 'INTEGRAL' THEN 1 WHEN A.TURNO = 'TARDE' THEN 2 WHEN A.TURNO = 'NOITE' THEN 3 END ORDEM_TURNO,
G2.*
--G2.ID_HORARIO,
--LEAD(G.ID_HORARIO,1, NULL) OVER(PARTITION BY G.CPF, G.DATA ORDER BY G.CPF, G.DATA, G.INICIO_TURNO, G.INICIO_REGENCIA, G.ID_HORARIO, G.DATA_PROCESSAMENTO )PROXIMO_ID_HORARIO,

FROM(
SELECT G2.CPF, G2.ID_HORARIO, G2.DATA, G2.TIPO, G2.INICIO_TURNO, G2.INICIO_REGENCIA, G2.FIM_REGENCIA, COUNT(1)QTD_REG FROM (
SELECT G.CPF, G.ID_HORARIO, G.DATA, G.TIPO, G.INICIO_TURNO, G.INICIO_REGENCIA, G.FIM_REGENCIA, 
D.* 
FROM PONTO_ELETRONICO.SUGESP_SGE_PAR_REGE_ARQ_DATAS G
LEFT OUTER JOIN (
SELECT CPF CPF_D, TRUNC(DATA)DATA_D, COUNT(1)QTD_D
FROM PONTO_ELETRONICO.SUGESP_SGE_PAR_REGE_ARQ_DATAS WHERE TRUNC(DATA_PROCESSAMENTO) = TRUNC(SYSDATE)
AND TIPO_REGISTRO = 'DE/PARA_EXTENSOES_2023'
GROUP BY CPF, TRUNC(DATA)
)D ON G.CPF = D.CPF_D AND TRUNC(G.DATA) = TRUNC(D.DATA_D)
WHERE D.CPF_D IS NOT NULL -----AQUI GARANTE QUE PEGA OS DEMAIS REGISTROS JA EXISTENTES PARA O CPF / DATAS DOS NOVOS REGISTROS PARA DEFINIR SE CONCOMITAM ENTRE OS JA EXISTENTE E NOVOS
AND G.TIPO_REGISTRO = 'DE/PARA_EXTENSOES_2023'
)G2 

/*--COMENTADO EM 16/10/23
--INICIO NOVO 20/9/23
LEFT OUTER JOIN 
(SELECT  E.* FROM SMARH_INT_PE_EXTENSOES_JORNAD E WHERE TRUNC(DT_INICIO) >= TO_DATE('01/01/2023','DD/MM/YYYY') AND TIPO_EXTENSAO LIKE 'EXTENSAO_SGE_DE_PARA_2023%')E ON E.ID_HORARIO = G2.ID_HORARIO --2600
WHERE E.ID_HORARIO IS NOT NULL --DE 1817 PARA 1787 EM 20/9/23
--FIM NOVO 20/9/23
*/--COMENTADO EM 16/10/23

GROUP BY G2.CPF, G2.TIPO, G2.ID_HORARIO, G2.DATA, G2.INICIO_TURNO, G2.INICIO_REGENCIA, G2.FIM_REGENCIA ORDER BY G2.CPF, G2.TIPO, G2.ID_HORARIO, G2.DATA, G2.INICIO_TURNO, G2.INICIO_REGENCIA, G2.FIM_REGENCIA
)G2

LEFT OUTER JOIN (SELECT * FROM PONTO_ELETRONICO.SUGESP_SGE_JORNADAS_GERAL  WHERE TRUNC(DATA_PROCESSAMENTO)= (SELECT TRUNC(MAX(DATA_PROCESSAMENTO)) FROM PONTO_ELETRONICO.SUGESP_SGE_JORNADAS_GERAL WHERE TIPO_REGISTRO = 'DE/PARA_EXTENSOES_2023'
                                  AND TO_DATE(DATA_INICIO,'DD/MM/YYYY')>=  TO_DATE(vDATA_INICIO,'DD/MM/YYYY')--NOVO A PARTIR DE 2024
                                   ) 
)A ON A.ID_HORARIO = G2.ID_HORARIO

ORDER BY G2.CPF, G2.DATA, G2.INICIO_TURNO, G2.INICIO_REGENCIA, G2.ID_HORARIO--, G.DATA_PROCESSAMENTO --DESC

)X 
)X2
LEFT OUTER JOIN ARTERH.RHTABS_DATAS D ON TRUNC(D.DATA_DIA) = TO_DATE(X2.DATA,'DD/MM/YYYY') 

ORDER BY X2.CPF, X2.DATA, X2.INICIO_TURNO, X2.INICIO_REGENCIA, X2.ID_HORARIO--, TRUNC(X2.DATA_PROCESSAMENTO)--DESC

--)GROUP BY CPF-- ID_HORARIO---COUNT
--)GROUP BY ID_HORARIO---COUNT
--)--COUNT


)LOOP


IF C3.ORDEM_DIA_CPF = 1 THEN 
vFIM_REGENCIA_ATUAL := 0; --LIMPAR POR DIA A COMPARACAO DE CONCOMITANCIA INCLUIDO DIA 23/7/23 AS 10H
END IF;
--dbms_output.put_line('--vFIM_REGENCIA_ATUAL: '||vFIM_REGENCIA_ATUAL);

vCONTADOR_C3 := vCONTADOR_C3 +1;
--dbms_output.put_line('--vCONTADOR_C3: '||vCONTADOR_C3||' C3.DATA: '||C3.DATA||' C3.ID_HORARIO: '||C3.ID_HORARIO||' C3.INICIO_TURNO: '||C3.INICIO_TURNO||' C3.INICIO_REGENCIA: '||C3.INICIO_REGENCIA||' C3.FIM_REGENCIA: '||C3.FIM_REGENCIA);
--dbms_output.put_line(C3.DADOS);
--dbms_output.put_line(C3.ACAO||'-'||C3.CENARIO_ACAO);

IF C3.ACAO2 = 'EXCLUI' THEN
--dbms_output.put_line('EXCLUI');
vOBS_REGISTRO := 'EXCLUI';
ELSE
--dbms_output.put_line('INCLUI'); ---PARTE VALIDAR CONCOMITANCIA ENTRE PARES DE MARCACOES
    IF C3.INICIO_REGENCIA > 0 AND vFIM_REGENCIA_ATUAL - 1 < C3.INICIO_REGENCIA THEN ----PAR MARCACOES DE REGENCIA *NAO* CONCOMITANTES
   -- dbms_output.put_line('ACUMULA'); --  dbms_output.put_line('ACUMULA NO DIA PAR MARCACAO DO ID_HORARIO ATUAL');
    vOBS_REGISTRO := 'ACUMULA';--'ACUMULA NO DIA PAR MARCACAO DO ID_HORARIO ATUAL';
    --PARTE CONTROLE DAS HORAS DE REGENCIA
    vFIM_REGENCIA_ATUAL := C3.FIM_REGENCIA;
    ELSIF C3.INICIO_REGENCIA > 0 AND vFIM_REGENCIA_ATUAL - 1 >= C3.INICIO_REGENCIA THEN ----PAR MARCACOES DE REGENCIA CONCOMITANTES
    --dbms_output.put_line('CONCOMITA'); -- dbms_output.put_line('ACUMULA NO DIA PAR MARCACAO DO ID_HORARIO ATUAL');
    vOBS_REGISTRO := 'CONCOMITA';--'ACUMULA NO DIA PAR MARCACAO DO ID_HORARIO ATUAL';
    --PARTE CONTROLE DAS HORAS DE REGENCIA    
    ELSIF C3.INICIO_REGENCIA = 0 THEN
   --dbms_output.put_line('TOTALIZADOR');-- dbms_output.put_line('DESCONSIDERA NO DIA PAR MARCACAO DO ID_HORARIO ATUAL');
    vOBS_REGISTRO := 'TOTALIZA';--'DESCONSIDERA NO DIA PAR MARCACAO DO ID_HORARIO ATUAL';
    vFIM_REGENCIA_ATUAL := C3.FIM_REGENCIA;
    END IF;
    --TROCANDO DE LOCAL EM 24/7 AS 11H08--vFIM_REGENCIA_ATUAL := C3.FIM_REGENCIA;
    --dbms_output.put_line('--vFIM_REGENCIA_ATUAL: '||vFIM_REGENCIA_ATUAL);

END IF;--IF C3.ACAO = 'EXCLUI' THEN

--IF TRUNC(C3.DATA_PROCESSAMENTO) = TRUNC(SYSDATE) THEN--IF NOVO EM 4/9/23
--dbms_output.put_line('--******FIM DE CADA REGISTRO C3 NO DIA*******UPDATE SUGESP_SGE_PAR_REGE_ARQ_DATAS--');
--comentado em 4/9/23--UPDATE PONTO_ELETRONICO.SUGESP_SGE_PAR_REGE_ARQ_DATAS SET OBS_PROCESSAMENTO = vOBS_REGISTRO WHERE ID_HORARIO = C3.ID_HORARIO AND DATA = C3.DATA AND	INICIO_TURNO = C3.INICIO_TURNO AND INICIO_REGENCIA = C3.INICIO_REGENCIA 
--comentado em 4/9/23--AND TRUNC(DATA_PROCESSAMENTO) = TRUNC(C3.DATA_PROCESSAMENTO); COMMIT;
--comentado em 4/9/23--ELSE
INSERT INTO PONTO_ELETRONICO.SUGESP_SGE_PAR_REGE_ARQ_DATAS(CPF, TIPO, DATA_PROCESSAMENTO, ID_HORARIO, DATA, INICIO_TURNO, INICIO_REGENCIA, FIM_REGENCIA, OBS_PROCESSAMENTO, TOTAL_REGENCIA, TIPO_REGISTRO)
                                VALUES (C3.CPF, C3.TIPO, SYSDATE, C3.ID_HORARIO, TO_DATE(C3.DATA,'DD/MM/YYYY'), C3.INICIO_TURNO, C3.INICIO_REGENCIA, C3.FIM_REGENCIA, vOBS_REGISTRO, C3.FIM_REGENCIA-C3.INICIO_REGENCIA, 'DE/PARA_EXTENSOES_2023');COMMIT;
--END IF;--IF NOVO EM 4/9/23

--vFIM_REGENCIA_ATUAL := 0;
vOBS_REGISTRO := NULL;

END LOOP; --FIM C3
--FIM C3-------------------------------------------------------LOOP PARA PASSAR POR TODOS OS REGISTROS DE 1 DIA DE 1 SEMANA EXISTENTES DE UM CPF-----------------------------------------------------------------------------------------


--INICIO--NOVO EM 4/8/23--AJUSTE FINO PARA TIRAR TODOS OS DIAS DE UM ID_HORARIO CASO ALGUM DIA DO MESMO CONCOMITE COM OUTROS
FOR C4 IN (
SELECT ID_HORARIO, COUNT(1)QTD FROM PONTO_ELETRONICO.SUGESP_SGE_PAR_REGE_ARQ_DATAS  WHERE TRUNC(DATA_PROCESSAMENTO)= TRUNC(SYSDATE) AND TIPO = 'DIA' AND OBS_PROCESSAMENTO = 'CONCOMITA'
GROUP BY  ID_HORARIO
)LOOP
UPDATE PONTO_ELETRONICO.SUGESP_SGE_PAR_REGE_ARQ_DATAS SET OBS_PROCESSAMENTO = 'CONCOMITA' WHERE ID_HORARIO = C4.ID_HORARIO AND TRUNC(DATA_PROCESSAMENTO) = TRUNC(SYSDATE) AND TIPO = 'DIA' AND TIPO_REGISTRO = 'DE/PARA_EXTENSOES_2023'; COMMIT;
END LOOP;
--FIM--NOVO EM 4/8/23--AJUSTE FINO PARA TIRAR TODOS OS DIAS DE UM ID_HORARIO CASO ALGUM DIA DO MESMO CONCOMITE COM OUTROS

END;
END;