
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."PR_PS_PROCESSAR_MOV_DIRF" (PCODIGO_EMPRESA CHAR, PTIPO_CONTRATO CHAR, PANO_MES_REFERENCIA DATE, PID_ARQUIVO NUMBER, PACAO NUMBER ) as

  V_DETALHE_0001 VARCHAR2(4000);
  V_DETALHE_0002 VARCHAR2(4000);
  ARQUIVO_CONCESSOES      CONSTANT CHAR(4) := '0001';
  ARQUIVO_BENEFICIARIOS   CONSTANT CHAR(4) := '0002';
  ARQUIVO_MOVIMENTOS      CONSTANT CHAR(4) := '0003';
  ARQUIVO_MOVIMENTOS_DIRF CONSTANT CHAR(4) := '0004';

  EMPRESA_ATIVOS        CONSTANT CHAR(4) := '0001';
  EMPRESA_APOSENTADOS   CONSTANT CHAR(4) := '1700';
  EMPRESA_PENSIONISTAS  CONSTANT CHAR(4) := '0011';

  STATUS_CARREGADO    CONSTANT NUMBER := 0;
  STATUS_VALIDADO     CONSTANT NUMBER := 1;
  STATUS_INVALIDADO   CONSTANT NUMBER := 2;
  STATUS_PROCESSADO   CONSTANT NUMBER := 3;
  STATUS_EFETIVADO    CONSTANT NUMBER := 4;

  TIPO_LOG_SUCESSO       CONSTANT NUMBER := 0;
  TIPO_LOG_INFO          CONSTANT NUMBER := 2;
  TIPO_LOG_ALERTA        CONSTANT NUMBER := 2;
  TIPO_LOG_ERRO          CONSTANT NUMBER := 99;
  TIPO_LOG_PROCESSAMENTO CONSTANT NUMBER := 50;

  CODIGO_LOG_PROCESSAMENTO_02 CONSTANT CHAR(4) := 'P002';
  CODIGO_LOG_PROCESSAMENTO_03 CONSTANT CHAR(4) := 'P003';
  CODIGO_LOG_PROCESSAMENTO_04 CONSTANT CHAR(4) := 'P004';
  CODIGO_LOG_PROCESSAMENTO_05 CONSTANT CHAR(4) := 'P005';
  CODIGO_LOG_PROCESSAMENTO_06 CONSTANT CHAR(4) := 'P006';
  CODIGO_LOG_PROCESSAMENTO_07 CONSTANT CHAR(4) := 'P007';
  CODIGO_LOG_PROCESSAMENTO_50 CONSTANT CHAR(4) := 'P050';

  CATEGORIA_LOG_VALIDACAO  CONSTANT NUMBER := 0;
  CATEGORIA_LOG_EXECUCAO   CONSTANT NUMBER := 1;
  CATEGORIA_LOG_LEIAUTE    CONSTANT NUMBER := 2;
  CATEGORIA_LOG_REGRAS     CONSTANT NUMBER := 3;
  CATEGORIA_LOG_EFETIVACAO CONSTANT NUMBER := 4;

  NAO_EXISTE_TP_RELACIONAMENTO  EXCEPTION;
  MAIS_DE_UM_TP_RELACIONAMENTO  EXCEPTION;
  BENEFICIO_NAO_ENCONTRADO      EXCEPTION;
  MAIS_DE_UM_BENEFICIO          EXCEPTION;
  ERRO_AO_TENTAR_RECUPERAR_DADO EXCEPTION;
  ERRO_GENERICO                 EXCEPTION;


  RET_ENCONTRADO CONSTANT NUMBER := 0;
  RET_NAO_ENCONTRADO CONSTANT NUMBER := 97;
  RET_MAIS_DE_UM_REGISTRO CONSTANT NUMBER := 98;
  RET_ERRO CONSTANT NUMBER := 99;

  LISTA_VERBAS_DIRF  LISTA:=LISTA('24I8','24I9','16I8', '16I5', '24I5');

  vCONTADOR NUMBER;

  vSITUACAO_PROCESSAMENTO CHAR(2);
  vCODIGO_EMPRESA CHAR(4);
  vTIPO_CONTRATO CHAR(4);
  vID_ARQUIVO NUMBER;
  vSITUACAO_ARQUIVO CHAR(2);
  vCPF_VALIDO BOOLEAN;
  VCPF_EXISTENTE NUMBER;
  NENHUM_ARQUIVO_PROCESSAR EXCEPTION;

  vCODIGO_PESSOA_BENEFICIARIO CHAR(15);
  vTIPO_RELACIONAMENTO CHAR(4);
  vCODIGO_BENEFICIO VARCHAR2(15);
  VCPF_TITULAR CHAR(11);
  vIDENTIFICADOR_REGRA VARCHAR2(30);

  vCONC_CODIGO_BENEFICIARIO CHAR(15);
  vCONC_CPF_BENEFICIARIO CHAR(11);
  vCONC_CODIGO_CONTRATO CHAR(15);
  vCONC_CODIGO_BENEFICIO CHAR(15);
  vCONC_DATA_CONCESSAO DATE;
  vCONC_DATA_CANCELAMENTO DATE;
  vCONC_NUMERO_CARTEIRA VARCHAR2(4000);

-- Contantes
C_MES_INCIDENCIA CHAR(2);
C_TIPO_MOVIMENTO CHAR(2);
C_MODO_OPERACAO CHAR(1);
C_FASE CHAR(1);
C_CONSIDERA_DIRF CHAR(1);
C_CONTROLE_LANCAMENTO CHAR(1);
C_LOGIN_USUARIO VARCHAR2(40);
C_C_LIVRE_SELEC01 NUMBER(4);
C_C_LIVRE_VALOR01 NUMBER(16,4);
C_C_LIVRE_OPCAO01 CHAR(1);
C_REF_VERBA NUMBER(11,4);
C_ID_CLIENTE NUMBER(7);

/*
123456789012345678901234567890
*/
LOG_CODIGO_EMPRESA_INVALIDO    CONSTANT CHAR(4) := 'E001';
LOG_CODIGO_CONTRATO_INVALIDO   CONSTANT CHAR(4) := 'E002';
LOG_CODIGO_FORNECEDOR_INVALIDO CONSTANT CHAR(4) := 'E003';
LOG_CODIGO_VERBA_INVALIDO      CONSTANT CHAR(4) := 'E004';
LOG_VALOR_VERBA_INVALIDO       CONSTANT CHAR(4) := 'E005';
LOG_VALOR_ZERADO               CONSTANT CHAR(4) := 'E006';
LOG_ANO_MES_REF_INVALIDO       CONSTANT CHAR(4) := 'E007';
LOG_ANO_MES_REF_NAO_RELAC      CONSTANT CHAR(4) := 'E008';
LOG_NUM_CARTEIRA_INVALIDO      CONSTANT CHAR(4) := 'E009';
LOG_NUM_CARTEIRA_NAO_VIGENTE   CONSTANT CHAR(4) := 'E010';
LOG_CONCESSAO_NAO_ENCONTRADA   CONSTANT CHAR(4) := 'E011';
LOG_CPF_NAO_ENCONTRADO         CONSTANT CHAR(4) := 'E012';
LOG_CPF_INVALIDO               CONSTANT CHAR(4) := 'E013';
LOG_DUPLICIDADE_REGISTRO       CONSTANT CHAR(4) := 'E014';
LOG_TP_RELAC_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E015';
LOG_TP_RELAC_MAIS_DE_UM        CONSTANT CHAR(4) := 'E016';
LOG_TP_RELAC_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E017';
LOG_BENEFICIO_NAO_ENCONTRADO   CONSTANT CHAR(4) := 'E018';
LOG_CARTEIRA_OUTRO_CONTRATO    CONSTANT CHAR(4) := 'E019';
LOG_CARTEIRA_OUTRO_CPF         CONSTANT CHAR(4) := 'E020';
LOG_REGISTRO_ANTES_CONCESSAO   CONSTANT CHAR(4) := 'E021';
LOG_REGISTRO_APOS_CANCEL       CONSTANT CHAR(4) := 'E022';
LOG_CONCESSAO_DUPLICADA        CONSTANT CHAR(4) := 'E023';
LOG_CONCESSAO_ERRO_RECUPERACAO CONSTANT CHAR(4) := 'E024';
LOG_REGISTRO_JA_EXISTENTE      CONSTANT CHAR(4) := 'E025';
LOG_TIPO_BENEFICIO_INVALIDO    CONSTANT CHAR(4) := 'E026';
LOG_CNPJ_NAO_ENCONTRADO        CONSTANT CHAR(4) := 'E027';
LOG_CNPJ_INVALIDO              CONSTANT CHAR(4) := 'E028';
LOG_TP_RELAC_NAO_CONFORME      CONSTANT CHAR(4) := 'E029';
LOG_TP_RELAC_DEP_NAO_INFORMADO CONSTANT CHAR(4) := 'E030';
LOG_CODIGO_VERBA_NAO_CONFORME  CONSTANT CHAR(4) := 'E031';
LOG_TIPO_RELAC_INVALIDO        CONSTANT CHAR(4) := 'E032';

LOG_SUCESSO_INCLUSAO           CONSTANT CHAR(4) := 'S001';

-- Mapeamento
TYPE LISTA_CAMPOS is RECORD (
    CONTEUDO    VARCHAR2(1000)
    );

   TYPE LISTA_EXCECOES IS VARRAY(10000) OF LISTA_CAMPOS;
   LISTA_MAPEAMENTOS_INVALIDOS LISTA_EXCECOES;

  COD_CONVER_TIPO_RELACIONAMENTO CONSTANT CHAR(4) := 'PS01';
  COD_CONVER_TIPO_LOGRADOURO     CONSTANT CHAR(4) := 'PS02';
  COD_CONVER_ESTADO_CIVIL        CONSTANT CHAR(4) := 'PS03';
  COD_CONVER_TIPO_BENEFICIO      CONSTANT CHAR(4) := 'PS04';
  COD_CONVER_MOTIVO_CONCESSAO    CONSTANT CHAR(4) := 'PS05';
  COD_CONVER_BENEFICIO           CONSTANT CHAR(4) := 'PS06';
  COD_CONVER_MOTIVO_CANCELAMENTO CONSTANT CHAR(4) := 'PS07';
  COD_CONVER_CATEGORIA_PESSOA    CONSTANT CHAR(4) := 'PS08';
  COD_CONVER_SEXO                CONSTANT CHAR(4) := 'PS09';

  -- Mapeamentos
  LISTA_MAPEA_SEXO LISTA;
  LISTA_MAPEA_TIPO_RELACI LISTA;
  LISTA_MAPEA_ESTADO_CIVIL LISTA;
  LISTA_MAPEA_TIPO_LOGRADOURO LISTA;

  LISTA_MAPEA_TIPO_BENEFICIO LISTA;
  LISTA_MAPEA_MOTIVO_CONCESSAO LISTA;
  LISTA_MAPEA_MOTIVO_CANCEL LISTA;
  LISTA_MAPEA_BENEFICIO LISTA;
  LISTA_MAPEA_CATEGORIA_PESSOA LISTA;

  -- Lista de valores validos esperados na Interface de Software (IS)
  -- Sexo
  LISTA_SEXO_IS LISTA:= LISTA('0001','0002');

  -- Tipo de Relacionamento
 LISTA_TIPO_RELACI_IS LISTA;

  -- Estado Civil
  LISTA_ESTADO_CIVIL_IS LISTA;

  -- Tipo de Logadouro
 LISTA_TIPO_LOGRADOURO_IS LISTA;

  -- Tipo de Beneficio
  LISTA_TIPO_BENEFICIO_IS LISTA;
  C_INDICE_TIPO_BENEFICIO_MEDICO NUMBER := 1;
  C_INDICE_TIPO_BENEFICIO_ODONTO NUMBER := 2;


  -- Motivo Concessao
  LISTA_MOTIVO_CONCESSSAO_IS LISTA;

  -- Motivo Cancelamento
  LISTA_MOTIVO_CANCEL_IS LISTA;

  -- Beneficio
  LISTA_BENEFICIO_IS LISTA;

  -- Categoria de pessoa
 LISTA_CATEGORIA_PESSOA_IS lista;
  TEXTO_MENSAGEM_MAPEA_INVALIDO VARCHAR2(4000);
  vCONTADOR_MAPEAMENTO_INVALIDO NUMBER;
  MAPEAMENTO_EXCEPTION EXCEPTION;

  FUNCTION MONTA_LISTA( pcodigo_conversao CHAR)

    RETURN lista
  IS

    CURSOR cdado_destino
    IS
      SELECT dado_ORIGEM
      FROM RHINTE_ED_IT_CONV
      WHERE CODIGO_CONVERSAO =pcodigo_conversao;
    V lista;
    vdado VARCHAR2 (400);
    I PLS_INTEGER;
    vcontador NUMBER;
  BEGIN
  DBMS_Output.PUT_LINE(pcodigo_conversao);
    FOR c1 IN
    (SELECT COUNT (1)AS quantidade
    FROM RHINTE_ED_IT_CONV
    WHERE CODIGO_CONVERSAO =pcodigo_conversao
    )
    LOOP
      vcontador:=c1.quantidade;
    END LOOP;
    V:=lista();
    V.EXTEND(vcontador);
    I:=1;
    OPEN cdado_destino;
    LOOP
      FETCH cdado_destino
      INTO vdado;
      EXIT
    WHEN cdado_destino%notfound;
      V(I) := vdado;
      I    := I+1;
    END LOOP;
    CLOSE cdado_destino;
    RETURN v;
  END;

FUNCTION MAPEAR_VALORES(plista LISTA, pcodigo_conversao CHAR) return LISTA as
lista_map LISTA;
vDADO_DESTINO VARCHAR2(4000);
vCONTADOR_NAO_ENCONTRADO NUMBER;

BEGIN
  lista_map := plista;
  vCONTADOR_NAO_ENCONTRADO := 0;
  --DBMS_Output.PUT_LINE('MAPEAMENTO. pcodigo_conversao = ' || pcodigo_conversao || ';');
  for i in 1..plista.count()
    loop
       begin
          vDADO_DESTINO := NULL;
          select DADO_DESTINO
            into vDADO_DESTINO
            from RHINTE_ED_IT_CONV
           where CODIGO_CONVERSAO = pcodigo_conversao
             and DADO_ORIGEM = plista(i)
             ;
       exception
       when NO_DATA_FOUND then
         vCONTADOR_NAO_ENCONTRADO := vCONTADOR_NAO_ENCONTRADO + 1;
         vDADO_DESTINO := NULL;
         --DBMS_Output.PUT_LINE('VALOR_NAO_ENCONTRADO. pcodigo_conversao = ' || pcodigo_conversao || '; DADO_ORIGEM = ' || plista(i));
       end;

       lista_map(i) := vDADO_DESTINO;
   end loop;

   IF vCONTADOR_NAO_ENCONTRADO > 0 THEN
      RAISE MAPEAMENTO_EXCEPTION;
   END IF;

   return lista_map;

END;

PROCEDURE IMPRIMIR_VALORES_MAPEADOS(descricao_lista varchar2, lista LISTA, lista_mapeada LISTA) as
BEGIN
      DBMS_Output.PUT_LINE('IMPRIMINDO LISTA MAPEADA' || ' - ' || descricao_lista);
       for i in 1..lista.count()
         loop
             DBMS_Output.PUT_LINE(RPAD('lista('||i||')',10,' ') || ' = ' || lista(i) || ' -> ' || lista_mapeada(i));
         end loop;
END;


PROCEDURE GRAVA_LOG(CodigoEmpresa IN CHAR, CategoriaLog IN NUMBER, TipoLog IN NUMBER, IdArquivo IN NUMBER, Numero_linha IN NUMBER, CodigoLog IN CHAR, DetalheLog IN VARCHAR2) AS
BEGIN

     INSERT INTO RHPBH_ARQUIVO_LOG(ID_LOG, DATA_LOG, CATEGORIA, TIPO, ID_ARQUIVO, NUMERO_LINHA, CODIGO_LOG, DETALHE, CODIGO_EMPRESA)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CategoriaLog, TipoLog, IdArquivo, Numero_linha, CodigoLog, DetalheLog, CodigoEmpresa);
     COMMIT;

END;

PROCEDURE PR_CONTROLE_PROCESSAMENTO(CODIGO_EMPRESA IN CHAR, ID_ARQUIVO IN NUMBER, SITUACAO_PROCESSAMENTO IN CHAR, POBSERVACAO IN VARCHAR2 DEFAULT NULL) AS
BEGIN
    PR_GRAVA_LOG_PROCESSA_ARQUIVO(CODIGO_EMPRESA, ID_ARQUIVO, SITUACAO_PROCESSAMENTO, POBSERVACAO);
END;

PROCEDURE PR_SET_SITUACAO_PROCESSAMENTO(PSITUACAO_PROCESSAMENTO IN CHAR) AS
BEGIN
    IF PSITUACAO_PROCESSAMENTO IS NULL THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO NULA.');
    END IF;

    IF PSITUACAO_PROCESSAMENTO NOT IN ('00','01','02','03','04','05','06','07') THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO INVALIDA.');
    END IF;

    vSITUACAO_PROCESSAMENTO := PSITUACAO_PROCESSAMENTO;
END;

PROCEDURE PR_ATUALIZAR_SITUACAO_REGISTR0 AS
BEGIN
   BEGIN
      update RHPBH_ARQUIVO_LINHA AL
         set SITUACAO = 99
       where ID_ARQUIVO = PID_ARQUIVO
         and exists(
      select *
        from RHPBH_ARQUIVO_LOG
       where ID_ARQUIVO = AL.ID_ARQUIVO
         and NUMERO_LINHA = AL.NUMERO_LINHA
         and TIPO = 99
      );

      commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
END;

begin
-- INICIO MAPEAMENTO
 --------------montar lista Gabriel em 06/05/2019

BEGIN
LISTA_TIPO_RELACI_IS := MONTA_LISTA(COD_CONVER_TIPO_RELACIONAMENTO);
LISTA_ESTADO_CIVIL_IS := MONTA_LISTA(COD_CONVER_ESTADO_CIVIL);
LISTA_TIPO_LOGRADOURO_IS:= MONTA_LISTA(COD_CONVER_TIPO_LOGRADOURO);
LISTA_TIPO_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_TIPO_BENEFICIO);
LISTA_MOTIVO_CONCESSSAO_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CONCESSAO);
LISTA_MOTIVO_CANCEL_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CANCELAMENTO);
LISTA_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_BENEFICIO);
LISTA_CATEGORIA_PESSOA_IS := MONTA_LISTA(COD_CONVER_CATEGORIA_PESSOA);
END;
------------------------------------------
-- INICIO MAPEAMENTO
  BEGIN

  LISTA_MAPEAMENTOS_INVALIDOS := LISTA_EXCECOES();
  /*
  -- Mapeamento valores - Sexo
  BEGIN
       LISTA_MAPEA_SEXO := MAPEAR_VALORES(LISTA_SEXO_IS, COD_CONVER_SEXO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'SEXO';
  END;
  */
  -- Mapeamento valores - Tipo de Relacionamento
  BEGIN
       LISTA_MAPEA_TIPO_RELACI := MAPEAR_VALORES(LISTA_TIPO_RELACI_IS, COD_CONVER_TIPO_RELACIONAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
  END;
  -- Mapeamento valores - Estado Civil
  BEGIN
       LISTA_MAPEA_ESTADO_CIVIL := MAPEAR_VALORES(LISTA_ESTADO_CIVIL_IS, COD_CONVER_ESTADO_CIVIL);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
  END;
  -- Mapeamento valores - Tipo de Logradouro
  BEGIN
       LISTA_MAPEA_TIPO_LOGRADOURO := MAPEAR_VALORES(LISTA_TIPO_LOGRADOURO_IS, COD_CONVER_TIPO_LOGRADOURO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
  END;

  -- Mapeamento valores - Tipo de Beneficio
  BEGIN
      LISTA_MAPEA_TIPO_BENEFICIO := MAPEAR_VALORES(LISTA_TIPO_BENEFICIO_IS, COD_CONVER_TIPO_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
  END;
  -- Mapeamento valores - Motivo Concessao
  BEGIN
       LISTA_MAPEA_MOTIVO_CONCESSAO := MAPEAR_VALORES(LISTA_MOTIVO_CONCESSSAO_IS, COD_CONVER_MOTIVO_CONCESSAO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
  END;
  -- Mapeamento valores - Motivo Cancelamento
  BEGIN
       LISTA_MAPEA_MOTIVO_CANCEL := MAPEAR_VALORES(LISTA_MOTIVO_CANCEL_IS, COD_CONVER_MOTIVO_CANCELAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
  END;
  -- Mapeamento valores - Beneficio
  BEGIN
       LISTA_MAPEA_BENEFICIO := MAPEAR_VALORES(LISTA_BENEFICIO_IS, COD_CONVER_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
  END;
  -- Mapeamento valores - Categoria de Beneficiario
  BEGIN
       LISTA_MAPEA_CATEGORIA_PESSOA := MAPEAR_VALORES(LISTA_CATEGORIA_PESSOA_IS, COD_CONVER_CATEGORIA_PESSOA);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
  END;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT > 0 THEN
     RAISE MAPEAMENTO_EXCEPTION;
  END IF;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT = 0 THEN
  -- Verifica se os codigos mapeados existem na base de dados
  BEGIN
    -- Tipo de Relacionamento
    vCONTADOR_MAPEAMENTO_INVALIDO := 0;
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_TIPO_RELAC.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_TIPO_RELAC
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_RELACIONAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_TIPO_RELAC.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
    END IF;

    -- Estado Civil
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_EST_CIVIL.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_EST_CIVIL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_ESTADO_CIVIL
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_EST_CIVIL.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
    END IF;

    -- Tipo de Logradouro
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_TP_LOGRAD.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_TP_LOGRAD
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_LOGRADOURO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_TP_LOGRAD.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
    END IF;

    -- Tipo de Beneficio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_TIPO_BENEF.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_TIPO_BENEF
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_TIPO_BENEF.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
    END IF;

    -- Motivo Concessao
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CONCES.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CONCES
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CONCESSAO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CONCES.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
    END IF;

    -- Motivo de Cancelamento
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CANCEL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CANCELAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
    END IF;

    -- Beneficio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_BENEFICIO.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_BENEFICIO
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_BENEFICIO.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
    END IF;

    -- Categoria de Pessoa
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_CAT_PESSOA.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_CAT_PESSOA
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_CATEGORIA_PESSOA
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_CAT_PESSOA.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
    END IF;

    IF LISTA_MAPEAMENTOS_INVALIDOS.count() > 0 THEN
       for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
       loop
           IF i = 1 THEN
              TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           ELSE
              TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           END IF;
       end loop;

       raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. HA PRESENÿA DE CODIGO INEXISTENTES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
     END IF;
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
  END;
  END IF;

  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN

     for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
     loop
         IF i = 1 THEN
            TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         ELSE
            TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         END IF;
     end loop;

     raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
  WHEN OTHERS THEN
     raise_application_error (-20001,'ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES.' ||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
  END;

-- FIM MAPEAMENTO
------------------------------------------


    -- Verifica se o codigo de empresa informado e valido
    IF PCODIGO_EMPRESA IS NULL THEN
       raise_application_error (-20001,'CODIGO_EMPRESA NAO INFORMADO.');
    END IF;

    BEGIN
         vCODIGO_EMPRESA := null;
         select CODIGO into vCODIGO_EMPRESA from RHORGA_EMPRESA where CODIGO = PCODIGO_EMPRESA;

         IF vCODIGO_EMPRESA IS NULL THEN
            raise_application_error (-20001,'CODIGO_EMPRESA INVALIDO.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O CODIGO_EMPRESA');
    END;

    -- Verifica se o Tipo de contrato informado e valido
    IF PTIPO_CONTRATO IS NULL THEN
       raise_application_error (-20001,'TIPO_CONTRATO NAO INFORMADO.');
    END IF;

    BEGIN
         vTIPO_CONTRATO := null;
         select CODIGO into vTIPO_CONTRATO from RHPESS_TP_CONTRATO where CODIGO = PTIPO_CONTRATO;

         IF vTIPO_CONTRATO IS NULL THEN
            raise_application_error (-20001,'TIPO_CONTRATO INVALIDO.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O TIPO DE CONTRATO');
    END;

    BEGIN
         vID_ARQUIVO := null;
         select ID_ARQUIVO, SITUACAO into vID_ARQUIVO, vSITUACAO_ARQUIVO from RHPBH_ARQUIVO where ID_ARQUIVO = PID_ARQUIVO;

         IF vID_ARQUIVO IS NULL THEN
            raise_application_error (-20001,'ID ARQUIVO INVALIDO.');
         END IF;

         IF vSITUACAO_ARQUIVO NOT IN ('00','01','02','03','04','05','06','07') THEN
            raise_application_error (-20001,'O ARQUIVO INFORMADO ESTA COM SITUACAO INVALIDA. ENTRE EM CONTATO COM O SUPORTE TECNICO DA PBH.');
         END IF;

         CASE WHEN vSITUACAO_ARQUIVO = '07' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA COM PROCESSAMENTO JA CONCLUIDO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO = '01' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA CANCELADO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO in ('02','04','06') THEN raise_application_error (-20002,'O ARQUIVO INFORMADO JA ESTO EM PROCESSAMENTO E NAO PODE HAVER PROCESSAMENTOS COMCOMITANTES PARA O MESMO ARQUIVO.');
              WHEN vSITUACAO_ARQUIVO = '00' THEN
                   IF PACAO NOT IN (1,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO E COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTA COM A SITUACAO CARREGADO E AS ACOES PERMITIDA SAO 1 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '03' THEN
                   IF PACAO NOT IN (2,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO E COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTA COM A SITUACAO VALIDACAO DE LEIAUTE PROCESSADA E AS ACOES PERMITIDA SAO 2 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '05' THEN
                   IF PACAO NOT IN (3,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO E COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTA COM A SITUACAO PROCESSADO E AS ACOES PERMITIDA SAO 3 ou 10.');
                   END IF;
              ELSE
                  NULL;
         END CASE;

         PR_SET_SITUACAO_PROCESSAMENTO(vSITUACAO_ARQUIVO);
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O ARQUIVO COM O ID_ARQUIVO INFORMADO.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '70');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '71');

    -- Verifica se a data informada e valida
    IF PANO_MES_REFERENCIA IS NULL THEN
      raise_application_error (-20001,'ANO_MES_REFERENCIA NAO INFORMADO.');
    ELSE

        BEGIN
             VCONTADOR := null;
             select count(1) into VCONTADOR
               from RHBENF_MOV_BENEFIC
           where CODIGO_EMPRESA = PCODIGO_EMPRESA
             and TIPO_CONTR_TITULAR = PTIPO_CONTRATO
             and ANO_MES_REFERENCIA = PANO_MES_REFERENCIA
             and CODIGO_VERBA member (LISTA_VERBAS_DIRF);

             IF VCONTADOR > 0 THEN
                raise_application_error (-20001,'JA EXISTE MOVIMENTO DIRF CARREGADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
             END IF;
        EXCEPTION
        WHEN OTHERS THEN
           raise_application_error (-20002,'JA EXISTE MOVIMENTO DIRF CARREGADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
        END;

    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '72');

    -- Verifica se ha algum arquivo de movimento DIRF
    -- a ser processado
    BEGIN
         IF PACAO = 1 THEN
             VCONTADOR := null;
             select count(1) into VCONTADOR
               from RHPBH_ARQUIVO
              where CODIGO_EMPRESA = PCODIGO_EMPRESA
                and TIPO_ARQUIVO = '0004'
                and ID_ARQUIVO = PID_ARQUIVO
                and SITUACAO in ('00');

             IF VCONTADOR = 0 THEN
                raise_application_error (-20002,'NAO EXISTE ARQUIVO DE MOVIMENTO DIRF A SER PROCESSADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
             END IF;
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO EXISTE ARQUIVO DE MOVIMENTO DIRF A SER PROCESSADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
    END;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '73');

    -- VALIDAR LEIAUTE ARQUIVO
    IF PACAO in (1, 10) THEN
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = ARQUIVO_MOVIMENTOS_DIRF
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('00')
         order by ID_ARQUIVO)
         loop
            PR_SET_SITUACAO_PROCESSAMENTO('02');
            PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

            BEGIN
                PR_VALIDAR_LEIAUTE_ARQUIVO (C1.ID_ARQUIVO);
            EXCEPTION
            WHEN OTHERS THEN
                 raise_application_error (-20002,'ERRO AO TENTAR VALIDAR O LEIAUTE DO ARQUIVO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

         end loop;

         PR_SET_SITUACAO_PROCESSAMENTO('03');
         PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
         PR_ATUALIZAR_SITUACAO_REGISTR0;

         commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DIRF. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '74');

    IF PACAO in (2, 10) THEN
    -- PROCESSAR ARQUIVO
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = ARQUIVO_MOVIMENTOS_DIRF
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('03', '05')
         order by ID_ARQUIVO)
         loop

            BEGIN

            PR_SET_SITUACAO_PROCESSAMENTO('04');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

             BEGIN
                delete from RHPBH_PS_DIRF where ID_ARQUIVO = C1.ID_ARQUIVO;
             EXCEPTION
             WHEN OTHERS THEN
                NULL;
             END;

             BEGIN
                insert into RHPBH_PS_DIRF(
                ID_ARQUIVO,
                NUMERO_LINHA,
                ANO_MES_REFERENCIA,
                CODIGO_EMPRESA,
                TIPO_CONTRATO,
                CODIGO_CONTRATO,
                CPF,
                NUMERO_CARTEIRA,
                CODIGO_FORNECEDOR,
                CODIGO_VERBA,
                VALOR_VERBA,
                CNPJ_FORNECEDOR,
                TIPO_BENEFICIO
                )
                (
                select ID_ARQUIVO,
                       NUMERO_LINHA,
                        ANO_MES_REFERENCIA,
                       CODIGO_EMPRESA,
                       PTIPO_CONTRATO AS TIPO_CONTRATO,
                        CODIGO_CONTRATO,
                       CPF,
                       null AS NUMERO_CARTEIRA,
                       null AS CODIGO_FORNECEDOR,
                       CODIGO_VERBA,
                        CASE WHEN CODIGO_VERBA LIKE'%16%'THEN VALOR_VERBA*(-1)
                      ELSE  VALOR_VERBA
                      END VALOR_VERBA,
                       CNPJ_FORNECEDOR,
                       TIPO_BENEFICIO
               FROM
               ( select ID_ARQUIVO,
                       NUMERO_LINHA,
                       TRUNC(TO_DATE(PERIODO_REFERENCIA,'DD/MM/YYYY HH24:MI:SS')) AS ANO_MES_REFERENCIA,
                       CODIGO_EMPRESA,
                       PTIPO_CONTRATO AS TIPO_CONTRATO,
                       LPAD(CODIGO_CONTRATO, 15,'0') AS CODIGO_CONTRATO,
                       CPF,
                       null AS NUMERO_CARTEIRA,
                       null AS CODIGO_FORNECEDOR,
                       CODIGO_VERBA,
                       TO_NUMBER(REPLACE(VALOR_VERBA,',','.')) AS VALOR_VERBA,
                       CNPJ_FORNECEDOR,
                       TIPO_BENEFICIO
                  from (select
RHPBH_ARQUIVO.ID_ARQUIVO,
RHPBH_ARQUIVO.CODIGO_EMPRESA AS CODIGO_EMPRESA_ARQUIVO,
RHPBH_ARQUIVO.SITUACAO AS SITUACAO_ARQUIVO,
RHPBH_ARQUIVO.DATA_CARGA,
RHPBH_ARQUIVO_LINHA.NUMERO_LINHA,
RHPBH_ARQUIVO_LINHA.SITUACAO AS SITUACAO_LINHA,
RHPBH_ARQUIVO_LINHA.LINHA AS LINHA_ORIGINAL,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 1)	AS	PERIODO_REFERENCIA,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 2)	AS	CODIGO_EMPRESA,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 3)	AS	CODIGO_CONTRATO,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 4)	AS	CPF,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 5)	AS	CNPJ_FORNECEDOR,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 6)	AS	TIPO_BENEFICIO,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 7)	AS	CODIGO_VERBA,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 8)	AS	VALOR_VERBA
  from RHPBH_ARQUIVO, RHPBH_ARQUIVO_LINHA
 where RHPBH_ARQUIVO.ID_ARQUIVO = RHPBH_ARQUIVO_LINHA.ID_ARQUIVO
   and RHPBH_ARQUIVO.TIPO_ARQUIVO = '0004') VW_ARQUIVO_0004
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO
                   and SITUACAO_LINHA = '00'
               )
                );
                COMMIT;

                select max(SITUACAO_ARQUIVO) into VCONTADOR
                  from (select
RHPBH_ARQUIVO.ID_ARQUIVO,
RHPBH_ARQUIVO.CODIGO_EMPRESA AS CODIGO_EMPRESA_ARQUIVO,
RHPBH_ARQUIVO.SITUACAO AS SITUACAO_ARQUIVO,
RHPBH_ARQUIVO.DATA_CARGA,
RHPBH_ARQUIVO_LINHA.NUMERO_LINHA,
RHPBH_ARQUIVO_LINHA.SITUACAO AS SITUACAO_LINHA,
RHPBH_ARQUIVO_LINHA.LINHA AS LINHA_ORIGINAL,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 1)	AS	PERIODO_REFERENCIA,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 2)	AS	CODIGO_EMPRESA,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 3)	AS	CODIGO_CONTRATO,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 4)	AS	CPF,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 5)	AS	CNPJ_FORNECEDOR,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 6)	AS	TIPO_BENEFICIO,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 7)	AS	CODIGO_VERBA,
regexp_substr(REPLACE(RHPBH_ARQUIVO_LINHA.LINHA,';;','; ;'), '[^;]+', 1, 8)	AS	VALOR_VERBA
  from RHPBH_ARQUIVO, RHPBH_ARQUIVO_LINHA
 where RHPBH_ARQUIVO.ID_ARQUIVO = RHPBH_ARQUIVO_LINHA.ID_ARQUIVO
   and RHPBH_ARQUIVO.TIPO_ARQUIVO = '0004') VW_ARQUIVO_0004
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;

                select count(1) into VCONTADOR
                  from RHPBH_PS_DIRF
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;

             EXCEPTION
             WHEN OTHERS THEN
             NULL;
             END;

            EXCEPTION
            WHEN OTHERS THEN

               raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DIRF. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            -- Regra 1
            --
            for R2 in (
            select * from RHPBH_PS_DIRF where CODIGO_EMPRESA||CODIGO_CONTRATO||CPF||CODIGO_VERBA||CNPJ_FORNECEDOR||TIPO_BENEFICIO in(
            select CODIGO_EMPRESA||CODIGO_CONTRATO||CPF||CODIGO_VERBA||CNPJ_FORNECEDOR|| TIPO_BENEFICIO
             from RHPBH_PS_DIRF CS
            where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
            group by CODIGO_EMPRESA, CODIGO_CONTRATO, CPF, CODIGO_VERBA, CNPJ_FORNECEDOR, TIPO_BENEFICIO
            having count(1) > 1
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DUPLICIDADE_REGISTRO, 'CODIGO_CONTRATO = '||R2.CODIGO_CONTRATO || ';' ||
                                                                                                                                            'CPF = '||R2.CPF || ';' ||
                                                                                                                                            'CODIGO_VERBA = '||R2.CODIGO_VERBA || ';' ||
                                                                                                                                            'CODIGO_FORNECEDOR = '||R2.CODIGO_FORNECEDOR
                                                                                                                                            );
            end loop;

            vIDENTIFICADOR_REGRA := '1';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 2
            -- Valida Empresa
            for R2 in (
            select * from RHPBH_PS_DIRF CS
             where ID_ARQUIVO = C1.ID_ARQUIVO
              and not exists(
            select CODIGO from RHORGA_EMPRESA where CODIGO = CS.CODIGO_EMPRESA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_EMPRESA_INVALIDO, R2.CODIGO_EMPRESA);
            end loop;

            vIDENTIFICADOR_REGRA := '2';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 3
            -- Valida Contrato
            for R2 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and not exists(
            select CODIGO_CONTRATO from RHPESS_CONTR_MEST
             where CODIGO_EMPRESA = CS.CODIGO_EMPRESA
               and CODIGO_CONTRATO = CS.CODIGO_CONTRATO
               and TIPO_CONTRATO=CS.TIPO_CONTRATO
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_CONTRATO_INVALIDO, R2.CODIGO_CONTRATO);
            end loop;

            vIDENTIFICADOR_REGRA := '3';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 4
            -- Codigo Verba nao encontrado
            for R2 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and not exists(
            select CODIGO from RHPARM_VERBA where CODIGO = CS.CODIGO_VERBA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_VERBA_INVALIDO,R2.CODIGO_VERBA);
            end loop;

            vIDENTIFICADOR_REGRA := '4';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 5
            -- Codigo Verba Invalido
            for R2 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CODIGO_VERBA NOT IN('16I8','24I8','24I9','16I5','24I5')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_VERBA_INVALIDO, R2.CODIGO_VERBA);
            end loop;

            vIDENTIFICADOR_REGRA := '5';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 6
            -- Codigo Verba e Tipo de Beneficio Invalido
            for R2 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and TIPO_BENEFICIO = 'M'
              and CODIGO_VERBA NOT IN('16I8','24I8','24I9')
            union
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and TIPO_BENEFICIO = 'O'
              and CODIGO_VERBA NOT IN('16I5','24I5')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_VERBA_NAO_CONFORME, R2.CODIGO_VERBA);
            end loop;

            vIDENTIFICADOR_REGRA := '6';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 7
            -- Valor zerado
            for R10 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and VALOR_VERBA = 0
            )
            loop
                GRAVA_LOG(R10.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R10.ID_ARQUIVO, R10.NUMERO_LINHA, LOG_VALOR_ZERADO,R10.VALOR_VERBA);
            end loop;

            vIDENTIFICADOR_REGRA := '7';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 8
            -- Ano mes referencia
            for R13 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and ANO_MES_REFERENCIA <> PANO_MES_REFERENCIA
            )
            loop
                GRAVA_LOG(R13.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R13.ID_ARQUIVO, R13.NUMERO_LINHA, LOG_ANO_MES_REF_NAO_RELAC,R13.ANO_MES_REFERENCIA);
            end loop;

            vIDENTIFICADOR_REGRA := '8';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 9
            -- Ano mes referencia iniciando em 01
            for R13 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and TO_CHAR(ANO_MES_REFERENCIA,'DD') <> '01'
            )
            loop
                GRAVA_LOG(R13.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R13.ID_ARQUIVO, R13.NUMERO_LINHA, LOG_ANO_MES_REF_INVALIDO,R13.ANO_MES_REFERENCIA);
            end loop;

            vIDENTIFICADOR_REGRA := '9';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 10
            -- Tipo de Beneficio Invalido
            for R2 in (
            select * from RHPBH_PS_DIRF CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and TIPO_BENEFICIO NOT IN('M','O')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_TIPO_BENEFICIO_INVALIDO, R2.TIPO_BENEFICIO);
            end loop;

            vIDENTIFICADOR_REGRA := '10';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');


            PR_SET_SITUACAO_PROCESSAMENTO('05');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

         end loop;

         commit;

    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DIRF. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

END IF; -- FIM PACAO = 2

IF PACAO in (2, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('04');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    -- Constantes

    C_MES_INCIDENCIA := to_CHAR(pano_mes_referencia, 'MM');
    C_CONSIDERA_DIRF := 'S';
    C_CONTROLE_LANCAMENTO := '0';
    C_LOGIN_USUARIO := 'IMPORT';
    C_C_LIVRE_SELEC01 := 0;
    C_C_LIVRE_VALOR01 := 0;
    C_C_LIVRE_OPCAO01 := 'N';
    C_REF_VERBA := 0;
    C_ID_CLIENTE := 0;
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_DIRF CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
         order by CS.NUMERO_LINHA
    )
    loop

    -- CNPJ do Fornecedor deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CNPJ_FORNECEDOR);

    IF NOT vCPF_VALIDO THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_INVALIDO, C_INC.CNPJ_FORNECEDOR);
    ELSE

    NULL;

      BEGIN
           VCPF_EXISTENTE := 0;
            select count(1)
              into VCPF_EXISTENTE
              from RHORGA_FORNECEDOR
             where CGC_CPF = C_INC.CNPJ_FORNECEDOR;

           IF VCPF_EXISTENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_NAO_ENCONTRADO,C_INC.CNPJ_FORNECEDOR);
           END IF;
      EXCEPTION
      WHEN OTHERS THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_NAO_ENCONTRADO,C_INC.CNPJ_FORNECEDOR);
      END;

    END IF;

    -- CPF deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CPF);

    IF NOT vCPF_VALIDO THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_INVALIDO, C_INC.CPF);
    ELSE

    NULL;

      BEGIN
           VCPF_EXISTENTE := 0;
            select count(1)
              into VCPF_EXISTENTE
              from RHPESS_PESSOA
             where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
               and CPF = C_INC.CPF
               AND DT_TERMINO IS NULL;

           IF VCPF_EXISTENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF);
           END IF;
      EXCEPTION
      WHEN OTHERS THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF);
      END;

    END IF;

    VCPF_TITULAR := null;
    BEGIN
         select LPAD(RHPESS_PESSOA.CPF,11,'0') into VCPF_TITULAR
           from RHPESS_CONTRATO, RHPESS_PESSOA
          where RHPESS_CONTRATO.CODIGO_EMPRESA = RHPESS_PESSOA.CODIGO_EMPRESA
            and RHPESS_CONTRATO.CODIGO_PESSOA = RHPESS_PESSOA.CODIGO
            and RHPESS_CONTRATO.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
            and RHPESS_CONTRATO.CODIGO = C_INC.CODIGO_CONTRATO
            AND RHPESS_CONTRATO.TIPO_CONTRATO=C_INC.TIPO_CONTRATO
            AND RHPESS_PESSOA.DT_TERMINO IS NULL
            and RHPESS_CONTRATO.ANO_MES_REFERENCIA = (
                select max(ANO_MES_REFERENCIA)
                  from RHPESS_CONTRATO AUX
                 where AUX.CODIGO_EMPRESA = RHPESS_CONTRATO.CODIGO_EMPRESA
                   and AUX.TIPO_CONTRATO = RHPESS_CONTRATO.TIPO_CONTRATO
                   and AUX.CODIGO = RHPESS_CONTRATO.CODIGO
                   and AUX.ANO_MES_REFERENCIA <= PANO_MES_REFERENCIA
            );
    EXCEPTION
    WHEN OTHERS THEN
    VCPF_TITULAR := null;
    END;


    V_DETALHE_0001 := 'codigo_empresa = '  || C_INC.CODIGO_EMPRESA  || ';' ||
                      'tipo_contrato = '   || C_INC.TIPO_CONTRATO   || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = '             || C_INC.CPF             || ';' ||
                      'tipo_beneficio = '  || C_INC.TIPO_BENEFICIO;

    V_DETALHE_0002 := 'codigo_empresa = '  || C_INC.CODIGO_EMPRESA  || ';' ||
                      'tipo_contrato = '   || C_INC.TIPO_CONTRATO   || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = '             || C_INC.CPF             || ';' ||
                      'tipo_beneficio = '  || C_INC.TIPO_BENEFICIO  || ';' ||
                      'cpf do titular = '  || VCPF_TITULAR;

  -- Recuperacao do Tipo de Relacionamento
  IF ((VCPF_TITULAR IS NOT NULL) AND (VCPF_TITULAR <> C_INC.CPF) AND vCPF_VALIDO AND VCPF_EXISTENTE > 0) THEN

    BEGIN
      vTIPO_RELACIONAMENTO := NULL;
      vTIPO_RELACIONAMENTO  := FU_PS_OBTER_TP_RELACIONAMENTO(C_INC.CODIGO_EMPRESA,LISTA_MAPEA_TIPO_RELACI, VCPF_TITULAR, C_INC.CPF);
      CASE WHEN vTIPO_RELACIONAMENTO = RET_NAO_ENCONTRADO THEN
                RAISE NAO_EXISTE_TP_RELACIONAMENTO;
           WHEN vTIPO_RELACIONAMENTO = RET_MAIS_DE_UM_REGISTRO THEN
                RAISE MAIS_DE_UM_TP_RELACIONAMENTO;
           WHEN vTIPO_RELACIONAMENTO = RET_ERRO THEN
                RAISE ERRO_AO_TENTAR_RECUPERAR_DADO;
           ELSE NULL;
      END CASE;

      IF vTIPO_RELACIONAMENTO IS NULL THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_NAO_ENCONTRADO,V_DETALHE_0002);
      END IF;

    EXCEPTION
    WHEN NAO_EXISTE_TP_RELACIONAMENTO THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_NAO_ENCONTRADO, V_DETALHE_0002);
    WHEN MAIS_DE_UM_TP_RELACIONAMENTO THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_MAIS_DE_UM,V_DETALHE_0002);
    WHEN ERRO_AO_TENTAR_RECUPERAR_DADO THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_ERRO_RECUPERACAO,V_DETALHE_0002);
    WHEN OTHERS THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);

    END;
--raise_application_error (-20002,' rETORNO FUNCAO 1 : '||vTIPO_RELACIONAMENTO);
  END IF;


     -- Recuperacao da concessao de beneficio
     begin
     select CONC.CODIGO_BENEFIC,
            PESS.CPF,
            CONC.CODIGO_CONTRATO,
            CONC.CODIGO_BENEFICIO,
            CONC.DATA_CONCESSAO,
            CONC.DATA_CANCELAMENTO,
            CONC.C_LIVRE_DESCR08
       into vCONC_CODIGO_BENEFICIARIO,
            vCONC_CPF_BENEFICIARIO,
            vCONC_CODIGO_CONTRATO,
            vCONC_CODIGO_BENEFICIO,
            vCONC_DATA_CONCESSAO,
            vCONC_DATA_CANCELAMENTO,
            vCONC_NUMERO_CARTEIRA
      from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
     where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
       AND PESS.DT_TERMINO IS NULL
       and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
       and CONC.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
       and CONC.CODIGO_BENEFICIO = BENF.CODIGO
       and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
       and CONC.CODIGO_BENEFIC = PESS.CODIGO
       and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
       and BENF.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
       and CONC.DATA_CANCELAMENTO IS NULL
       and PESS.CPF = C_INC.CPF;

       IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
       END IF;

       IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
       END IF;

      exception
      WHEN NO_DATA_FOUND then

         begin
         select CONC.CODIGO_BENEFIC,
                PESS.CPF,
                CONC.CODIGO_CONTRATO,
                CONC.CODIGO_BENEFICIO,
                CONC.DATA_CONCESSAO,
                CONC.DATA_CANCELAMENTO,
                CONC.C_LIVRE_DESCR08
           into vCONC_CODIGO_BENEFICIARIO,
                vCONC_CPF_BENEFICIARIO,
                vCONC_CODIGO_CONTRATO,
                vCONC_CODIGO_BENEFICIO,
                vCONC_DATA_CONCESSAO,
                vCONC_DATA_CANCELAMENTO,
                vCONC_NUMERO_CARTEIRA
          from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
         where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
           and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
           and CONC.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
           and CONC.CODIGO_BENEFICIO = BENF.CODIGO
           and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
           and CONC.CODIGO_BENEFIC = PESS.CODIGO
           and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
           and BENF.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
           and CONC.DATA_CANCELAMENTO IS NOT NULL
           AND PESS.DT_TERMINO IS NULL
           and CONC.DATA_CANCELAMENTO = (
               select max(DATA_CANCELAMENTO)
                 from RHBENF_CONCESSOES CONC_AUX, RHBENF_BENEFICIO BENF_AUX, RHPESS_PESSOA PESS_AUX
                where CONC_AUX.CODIGO_EMPRESA = CONC.CODIGO_EMPRESA
                AND PESS_AUX.DT_TERMINO IS NULL
                  and CONC_AUX.TIPO_CONTRATO = CONC.TIPO_CONTRATO
                  and CONC_AUX.CODIGO_CONTRATO = CONC.CODIGO_CONTRATO
                  and CONC_AUX.CODIGO_BENEFICIO = BENF_AUX.CODIGO
                  and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
                  and CONC_AUX.CODIGO_BENEFIC = PESS_AUX.CODIGO
                  and CONC_AUX.CODIGO_EMPRESA = PESS_AUX.CODIGO_EMPRESA
                  and PESS_AUX.CPF = PESS.CPF
                  and BENF_AUX.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
                  and CONC.DATA_CANCELAMENTO IS NOT NULL

           )
           and PESS.CPF = C_INC.CPF;

           IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
           END IF;

           IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
           END IF;

          exception
          WHEN NO_DATA_FOUND then

         begin
         select CONC.CODIGO_BENEFIC,
                PESS.CPF,
                CONC.CODIGO_CONTRATO,
                CONC.CODIGO_BENEFICIO,
                CONC.DATA_CONCESSAO,
                CONC.DATA_CANCELAMENTO,
                CONC.C_LIVRE_DESCR08
           into vCONC_CODIGO_BENEFICIARIO,
                vCONC_CPF_BENEFICIARIO,
                vCONC_CODIGO_CONTRATO,
                vCONC_CODIGO_BENEFICIO,
                vCONC_DATA_CONCESSAO,
                vCONC_DATA_CANCELAMENTO,
                vCONC_NUMERO_CARTEIRA
          from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
         where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
           and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
           and CONC.CODIGO_BENEFICIO = BENF.CODIGO
           and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
           AND PESS.DT_TERMINO IS NULL
           and CONC.CODIGO_BENEFIC = PESS.CODIGO
           and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
           and BENF.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
           and CONC.DATA_CANCELAMENTO IS NULL
           and PESS.CPF = C_INC.CPF;

           IF vCONC_CODIGO_CONTRATO <> C_INC.CODIGO_CONTRATO THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_CONTRATO, 'CONTRATO INFORMADO = ' || C_INC.CODIGO_CONTRATO || ';' || 'CONTRATO RECUPERADO = '||vCONC_CODIGO_CONTRATO);
           END IF;

           IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
           END IF;

           IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
           END IF;

          exception
          WHEN NO_DATA_FOUND then
               vCODIGO_PESSOA_BENEFICIARIO := NULL;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_NAO_ENCONTRADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
          WHEN TOO_MANY_ROWS then
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
          when others then
               vCODIGO_PESSOA_BENEFICIARIO := NULL;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
          end;

          WHEN TOO_MANY_ROWS then
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
          when others then
               vCODIGO_PESSOA_BENEFICIARIO := NULL;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
          end;

      WHEN TOO_MANY_ROWS then
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
      when others then
           vCODIGO_PESSOA_BENEFICIARIO := NULL;
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      end;


    IF MOD(vCONTADOR,1000) = 0 THEN
       COMMIT;
    END IF;

    vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;

    -- Atualizar a situacao dos registros
    PR_ATUALIZAR_SITUACAO_REGISTR0;

    PR_SET_SITUACAO_PROCESSAMENTO('05');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;


IF PACAO in (3, 10) THEN

   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('06');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    -- Constantes
    C_MES_INCIDENCIA := to_CHAR(pano_mes_referencia, 'MM');
    C_TIPO_MOVIMENTO := 'ME';
    C_MODO_OPERACAO := 'R';
    C_FASE := 0;
    C_CONSIDERA_DIRF := 'S';
    C_CONTROLE_LANCAMENTO := '0';
    C_LOGIN_USUARIO := 'IMPORT';
    C_C_LIVRE_SELEC01 := 0;
    C_C_LIVRE_VALOR01 := 0;
    C_C_LIVRE_OPCAO01 := 'N';
    C_REF_VERBA := 0;
    C_ID_CLIENTE := 0;
    FOR C_INC in(

        select CS.*
          from RHPBH_PS_DIRF CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
         order by CS.NUMERO_LINHA
    )
    loop
    -- CNPJ do Fornecedor deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CNPJ_FORNECEDOR);

    IF NOT vCPF_VALIDO THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_INVALIDO, C_INC.CNPJ_FORNECEDOR);
    ELSE

    NULL;

      BEGIN
           VCPF_EXISTENTE := 0;
            select count(1)
              into VCPF_EXISTENTE
              from RHORGA_FORNECEDOR
             where CGC_CPF = C_INC.CNPJ_FORNECEDOR;

           IF VCPF_EXISTENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_NAO_ENCONTRADO,C_INC.CNPJ_FORNECEDOR);
           END IF;
      EXCEPTION
      WHEN OTHERS THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_NAO_ENCONTRADO,C_INC.CNPJ_FORNECEDOR);
      END;

    END IF;

    -- CPF deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CPF);

    IF NOT vCPF_VALIDO THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_INVALIDO, C_INC.CPF);
    ELSE

    NULL;

      BEGIN
           VCPF_EXISTENTE := 0;
            select count(1)
              into VCPF_EXISTENTE
              from RHPESS_PESSOA
             where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
               and CPF = C_INC.CPF
               AND DT_TERMINO IS NULL;

           IF VCPF_EXISTENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF);
           END IF;
      EXCEPTION
      WHEN OTHERS THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF);
      END;

    END IF;
    VCPF_TITULAR := null;
    vTIPO_RELACIONAMENTO := null;
    BEGIN
         select LPAD(RHPESS_PESSOA.CPF,11,'0') into VCPF_TITULAR
           from RHPESS_CONTRATO, RHPESS_PESSOA
          where RHPESS_CONTRATO.CODIGO_EMPRESA = RHPESS_PESSOA.CODIGO_EMPRESA
          AND RHPESS_PESSOA.DT_TERMINO IS NULL
            and RHPESS_CONTRATO.CODIGO_PESSOA = RHPESS_PESSOA.CODIGO
            and RHPESS_CONTRATO.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
            and RHPESS_CONTRATO.CODIGO = C_INC.CODIGO_CONTRATO
            AND RHPESS_CONTRATO.TIPO_CONTRATO=C_INC.TIPO_CONTRATO
            and RHPESS_CONTRATO.ANO_MES_REFERENCIA = (
                select max(ANO_MES_REFERENCIA)
                  from RHPESS_CONTRATO AUX
                 where AUX.CODIGO_EMPRESA = RHPESS_CONTRATO.CODIGO_EMPRESA
                   and AUX.TIPO_CONTRATO = RHPESS_CONTRATO.TIPO_CONTRATO
                   and AUX.CODIGO = RHPESS_CONTRATO.CODIGO
                   and AUX.ANO_MES_REFERENCIA <= PANO_MES_REFERENCIA
            );

    EXCEPTION
    WHEN OTHERS THEN
    VCPF_TITULAR := null;
    END;
    V_DETALHE_0001 := 'codigo_empresa = '  || C_INC.CODIGO_EMPRESA  || ';' ||
                      'tipo_contrato = '   || C_INC.TIPO_CONTRATO   || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = '             || C_INC.CPF             || ';' ||
                      'tipo_beneficio = '  || C_INC.TIPO_BENEFICIO;

    V_DETALHE_0002 := 'codigo_empresa = '  || C_INC.CODIGO_EMPRESA  || ';' ||
                      'tipo_contrato = '   || C_INC.TIPO_CONTRATO   || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = '             || C_INC.CPF             || ';' ||
                      'tipo_beneficio = '  || C_INC.TIPO_BENEFICIO  || ';' ||
                      'cpf do titular = '  || VCPF_TITULAR;



  -- Recuperacao do Tipo de Relacionamento
  IF ((VCPF_TITULAR IS NOT NULL) AND (VCPF_TITULAR <> C_INC.CPF) AND vCPF_VALIDO AND VCPF_EXISTENTE > 0) THEN




    BEGIN
      vTIPO_RELACIONAMENTO := NULL;
      vTIPO_RELACIONAMENTO  := FU_PS_OBTER_TP_RELACIONAMENTO(C_INC.CODIGO_EMPRESA,LISTA_MAPEA_TIPO_RELACI, VCPF_TITULAR, C_INC.CPF);

      CASE WHEN vTIPO_RELACIONAMENTO = RET_NAO_ENCONTRADO THEN
                RAISE NAO_EXISTE_TP_RELACIONAMENTO;
           WHEN vTIPO_RELACIONAMENTO = RET_MAIS_DE_UM_REGISTRO THEN
                RAISE MAIS_DE_UM_TP_RELACIONAMENTO;
           WHEN vTIPO_RELACIONAMENTO = RET_ERRO THEN
                RAISE ERRO_AO_TENTAR_RECUPERAR_DADO;
           ELSE NULL;
      END CASE;

      IF vTIPO_RELACIONAMENTO IS NULL THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_NAO_ENCONTRADO,V_DETALHE_0002);
      END IF;

    EXCEPTION
    WHEN NAO_EXISTE_TP_RELACIONAMENTO THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_NAO_ENCONTRADO, V_DETALHE_0002);
    WHEN MAIS_DE_UM_TP_RELACIONAMENTO THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_MAIS_DE_UM,V_DETALHE_0002);
    WHEN ERRO_AO_TENTAR_RECUPERAR_DADO THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_ERRO_RECUPERACAO,V_DETALHE_0002);
    WHEN OTHERS THEN
         vTIPO_RELACIONAMENTO := NULL;
         GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_TP_RELAC_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);

    END;
  END IF;

     -- Recuperacao da concessao de beneficio
     begin
     select CONC.CODIGO_BENEFIC,
            PESS.CPF,
            CONC.CODIGO_CONTRATO,
            CONC.CODIGO_BENEFICIO,
            CONC.DATA_CONCESSAO,
            CONC.DATA_CANCELAMENTO,
            CONC.C_LIVRE_DESCR08
       into vCONC_CODIGO_BENEFICIARIO,
            vCONC_CPF_BENEFICIARIO,
            vCONC_CODIGO_CONTRATO,
            vCONC_CODIGO_BENEFICIO,
            vCONC_DATA_CONCESSAO,
            vCONC_DATA_CANCELAMENTO,
            vCONC_NUMERO_CARTEIRA
      from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS,rhorga_fornecedor f
     where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
     AND PESS.DT_TERMINO IS NULL
       and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
       and CONC.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
        and  f.codigo=BENF.entidade_forneced
       and CONC.CODIGO_BENEFICIO = BENF.CODIGO
       and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
       and CONC.CODIGO_BENEFIC = PESS.CODIGO
       and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
       and BENF.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
       and CONC.DATA_CANCELAMENTO IS NULL
       and PESS.CPF = C_INC.CPF
       AND   f.cgc_cpf=C_INC.CNPJ_FORNECEDOR;

       IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
       END IF;

       IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
       END IF;

      exception
      WHEN NO_DATA_FOUND then

         begin
         select CONC.CODIGO_BENEFIC,
                PESS.CPF,
                CONC.CODIGO_CONTRATO,
                CONC.CODIGO_BENEFICIO,
                CONC.DATA_CONCESSAO,
                CONC.DATA_CANCELAMENTO,
                CONC.C_LIVRE_DESCR08
           into vCONC_CODIGO_BENEFICIARIO,
                vCONC_CPF_BENEFICIARIO,
                vCONC_CODIGO_CONTRATO,
                vCONC_CODIGO_BENEFICIO,
                vCONC_DATA_CONCESSAO,
                vCONC_DATA_CANCELAMENTO,
                vCONC_NUMERO_CARTEIRA
          from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS,rhorga_fornecedor f
         where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
           and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
           AND PESS.DT_TERMINO IS NULL
           and  f.codigo=BENF.entidade_forneced
           and CONC.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
           and CONC.CODIGO_BENEFICIO = BENF.CODIGO
           and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
           and CONC.CODIGO_BENEFIC = PESS.CODIGO
           and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
           and BENF.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
           and CONC.DATA_CANCELAMENTO IS NOT NULL
           and CONC.DATA_CANCELAMENTO = (
               select max(DATA_CANCELAMENTO)
                 from RHBENF_CONCESSOES CONC_AUX, RHBENF_BENEFICIO BENF_AUX, RHPESS_PESSOA PESS_AUX
                where CONC_AUX.CODIGO_EMPRESA = CONC.CODIGO_EMPRESA
                AND PESS_AUX.DT_TERMINO IS NULL
                  and CONC_AUX.TIPO_CONTRATO = CONC.TIPO_CONTRATO
                  and CONC_AUX.CODIGO_CONTRATO = CONC.CODIGO_CONTRATO
                  and CONC_AUX.CODIGO_BENEFICIO = BENF_AUX.CODIGO
                  and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
                  and CONC_AUX.CODIGO_BENEFIC = PESS_AUX.CODIGO
                  and CONC_AUX.CODIGO_EMPRESA = PESS_AUX.CODIGO_EMPRESA
                  and PESS_AUX.CPF = PESS.CPF
                  and BENF_AUX.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
                  and CONC.DATA_CANCELAMENTO IS NOT NULL

           )
           and PESS.CPF = C_INC.CPF
           AND   f.cgc_cpf=C_INC.CNPJ_FORNECEDOR;

           IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
           END IF;

           IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
           END IF;

          exception
          WHEN NO_DATA_FOUND then

         begin
         select CONC.CODIGO_BENEFIC,
                PESS.CPF,
                CONC.CODIGO_CONTRATO,
                CONC.CODIGO_BENEFICIO,
                CONC.DATA_CONCESSAO,
                CONC.DATA_CANCELAMENTO,
                CONC.C_LIVRE_DESCR08
           into vCONC_CODIGO_BENEFICIARIO,
                vCONC_CPF_BENEFICIARIO,
                vCONC_CODIGO_CONTRATO,
                vCONC_CODIGO_BENEFICIO,
                vCONC_DATA_CONCESSAO,
                vCONC_DATA_CANCELAMENTO,
                vCONC_NUMERO_CARTEIRA
          from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
         where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
           and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
           AND PESS.DT_TERMINO IS NULL
           and CONC.CODIGO_BENEFICIO = BENF.CODIGO
           and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
           and CONC.CODIGO_BENEFIC = PESS.CODIGO
           and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
           and BENF.COD_TIPO_BENEFICIO = DECODE(C_INC.TIPO_BENEFICIO,'M',LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_MEDICO), LISTA_MAPEA_TIPO_BENEFICIO(C_INDICE_TIPO_BENEFICIO_ODONTO))
           and CONC.DATA_CANCELAMENTO IS NULL
           and PESS.CPF = C_INC.CPF;

           IF vCONC_CODIGO_CONTRATO <> C_INC.CODIGO_CONTRATO THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_CONTRATO, 'CONTRATO INFORMADO = ' || C_INC.CODIGO_CONTRATO || ';' || 'CONTRATO RECUPERADO = '||vCONC_CODIGO_CONTRATO);
           END IF;

           IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
           END IF;

           IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
           END IF;

          exception
          WHEN NO_DATA_FOUND then
               vCODIGO_PESSOA_BENEFICIARIO := NULL;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_NAO_ENCONTRADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
          WHEN TOO_MANY_ROWS then
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
          when others then
               vCODIGO_PESSOA_BENEFICIARIO := NULL;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
          end;

          WHEN TOO_MANY_ROWS then
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
          when others then
               vCODIGO_PESSOA_BENEFICIARIO := NULL;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
          end;

      WHEN TOO_MANY_ROWS then
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001 || ';' || 'vCODIGO_BENEFICIO - '||vCODIGO_BENEFICIO);
      when others then
           vCODIGO_PESSOA_BENEFICIARIO := NULL;
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      end;

         -- Inclui movimento de beneficiario
        BEGIN
        insert into RHBENF_MOV_BENEFIC (CODIGO_EMPRESA,
                                        TIPO_CONTR_TITULAR,
                                        COD_CONTR_TITULAR,
                                        CODIGO_PESSOA,
                                        TP_RELACIONAMENTO,
                                        CODIGO_BENEFICIO,
                                        ANO_MES_REFERENCIA,
                                        MES_INCIDENCIA,
                                        TIPO_MOVIMENTO,
                                        MODO_OPERACAO,
                                        FASE,
                                        VALOR_BENEFICIO,
                                        CODIGO_VERBA,
                                        REF_VERBA,
                                        CONSIDERA_DIRF,
                                        CTRL_LANCAMENTO,
                                        C_LIVRE_SELEC01,
                                        C_LIVRE_VALOR01,
                                        C_LIVRE_OPCAO01,
                                        ID_CLIENTE,
                                        LOGIN_USUARIO,
                                        DT_ULT_ALTER_USUA )
        values(
              C_INC.CODIGO_EMPRESA,
              C_INC.TIPO_CONTRATO,
              C_INC.CODIGO_CONTRATO,
              vCONC_CODIGO_BENEFICIARIO,
              vTIPO_RELACIONAMENTO,
              vCONC_CODIGO_BENEFICIO,
              pano_mes_referencia,
              C_MES_INCIDENCIA,
              C_TIPO_MOVIMENTO,
              C_MODO_OPERACAO,
              C_FASE,
              C_INC.VALOR_VERBA,
              C_INC.CODIGO_VERBA,
              C_REF_VERBA,
              C_CONSIDERA_DIRF,
              C_CONTROLE_LANCAMENTO,
              C_C_LIVRE_SELEC01,
              C_C_LIVRE_VALOR01,
              C_C_LIVRE_OPCAO01,
              C_ID_CLIENTE,
              C_LOGIN_USUARIO,
              SYSDATE
        );

        GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL);
        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);
           WHEN OTHERS THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

    IF MOD(vCONTADOR,1000) = 0 THEN
       COMMIT;
    END IF;

    vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;

    PR_SET_SITUACAO_PROCESSAMENTO('07');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;
    PR_STATS_PROCESSA_ARQUIVO(PID_ARQUIVO);
------------------------------------------------------------------------
end;