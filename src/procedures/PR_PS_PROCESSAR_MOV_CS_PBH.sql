
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."PR_PS_PROCESSAR_MOV_CS_PBH" (PCODIGO_EMPRESA CHAR, PTIPO_CONTRATO CHAR,PANO_MES_REFERENCIA DATE, PDATA_CORTE DATE, PID_ARQUIVO NUMBER, PACAO NUMBER ) as
  /*
  ALTERAÇÃO EM 02/03/2023 
  DE   PR_PS_PROCESSAR_MOV_CS(PCODIGO_EMPRESA CHAR, PANO_MES_REFERENCIA DATE, PDATA_CORTE DATE, PID_ARQUIVO NUMBER, PACAO NUMBER ) as
  PARA PR_PS_PROCESSAR_MOV_CS_NEW (PCODIGO_EMPRESA CHAR, PTIPO_CONTRATO CHAR,PANO_MES_REFERENCIA DATE, PDATA_CORTE DATE, PID_ARQUIVO NUMBER, PACAO NUMBER ) as

  LINHAS AFETADAS
  1178-1556-2058-2077-2110-2452
  RETIRADA DO PARÂMETRO FIXO TIPO DE CONTRATO

  DE C_TIPO_CONTRATO := '0001';
  PARA C_TIPO_CONTRATO := PTIPO_CONTRATO;

  DE '0001' AS TIPO_CONTRATO,
  PARA PTIPO_CONTRATO AS TIPO_CONTRATO,

  */
  vRETORNO RETORNO_PROCESSAMENTO := RETORNO_PROCESSAMENTO(null,null,null);
  REG_LOG LOG_PROCESSAMENTO;
  vLISTA_LOG LISTA_LOG := LISTA_LOG(null,null,null);
  REG_PBH_CS RHPBH_CS%ROWTYPE;
  vQTDE_LINHAS_AFETADAS NUMBER;
  --vBENEFICIO RETORNO_PS_CONCESSAO_BENEFICIO;
  V_DETALHE_0001 VARCHAR2(4000);
  V_DETALHE_0002 VARCHAR2(4000);
  ARQUIVO_CONCESSOES      CONSTANT CHAR(4) := '0001';
  ARQUIVO_BENEFICIARIOS   CONSTANT CHAR(4) := '0002';
  ARQUIVO_MOVIMENTOS      CONSTANT CHAR(4) := '0003';
  ARQUIVO_MOVIMENTOS_DIRF CONSTANT CHAR(4) := '0004';
  EMPRESA_ATIVOS        CONSTANT CHAR(4) := '0001';
  EMPRESA_APOSENTADOS   CONSTANT CHAR(4) := '1700';
  EMPRESA_PENSIONISTAS  CONSTANT CHAR(4) := '0011';
  STATUS_CARREGADO    CONSTANT NUMBER := 0;
  STATUS_VALIDADO     CONSTANT NUMBER := 1;
  STATUS_INVALIDADO   CONSTANT NUMBER := 2;
  STATUS_PROCESSADO   CONSTANT NUMBER := 3;
  STATUS_EFETIVADO    CONSTANT NUMBER := 4;
  /*
  SITUACAO_CARREGADO    CONSTANT CHAR(2) := 0;
  SITUACAO_VALIDADO     CONSTANT CHAR(2) := 1;
  SITUACAO_INVALIDADO   CONSTANT CHAR(2) := 2;
  SITUACAO_PROCESSADO   CONSTANT CHAR(2) := 3;
  SITUACAO_EFETIVADO    CONSTANT CHAR(2) := 4;
*/
  TIPO_LOG_SUCESSO       CONSTANT NUMBER := 0;
  TIPO_LOG_INFO          CONSTANT NUMBER := 2;
  TIPO_LOG_ALERTA        CONSTANT NUMBER := 2;
  TIPO_LOG_ERRO          CONSTANT NUMBER := 99;
  TIPO_LOG_PROCESSAMENTO CONSTANT NUMBER := 50;
  CODIGO_LOG_PROCESSAMENTO_02 CONSTANT CHAR(4) := 'P002';
  CODIGO_LOG_PROCESSAMENTO_03 CONSTANT CHAR(4) := 'P003';
  CODIGO_LOG_PROCESSAMENTO_04 CONSTANT CHAR(4) := 'P004';
  CODIGO_LOG_PROCESSAMENTO_05 CONSTANT CHAR(4) := 'P005';
  CODIGO_LOG_PROCESSAMENTO_06 CONSTANT CHAR(4) := 'P006';
  CODIGO_LOG_PROCESSAMENTO_07 CONSTANT CHAR(4) := 'P007';
  CODIGO_LOG_PROCESSAMENTO_50 CONSTANT CHAR(4) := 'P050';
  CATEGORIA_LOG_VALIDACAO  CONSTANT NUMBER := 0;
  CATEGORIA_LOG_EXECUCAO   CONSTANT NUMBER := 1;
  CATEGORIA_LOG_LEIAUTE    CONSTANT NUMBER := 2;
  CATEGORIA_LOG_REGRAS     CONSTANT NUMBER := 3;
  CATEGORIA_LOG_EFETIVACAO CONSTANT NUMBER := 4;
  NAO_EXISTE_TP_RELACIONAMENTO  EXCEPTION;
  MAIS_DE_UM_TP_RELACIONAMENTO  EXCEPTION;
  BENEFICIO_NAO_ENCONTRADO      EXCEPTION;
  MAIS_DE_UM_BENEFICIO          EXCEPTION;
  ERRO_AO_TENTAR_RECUPERAR_DADO EXCEPTION;
  ERRO_GENERICO                 EXCEPTION;
  RET_ENCONTRADO CONSTANT NUMBER := 0;
  RET_NAO_ENCONTRADO CONSTANT NUMBER := 97;
  RET_MAIS_DE_UM_REGISTRO CONSTANT NUMBER := 98;
  RET_ERRO CONSTANT NUMBER := 99;
  --LISTA_TIPO_BENEFICIO_PENSAO LISTA:=LISTA('0025','0026');
  --LISTA_TIPO_BENEFICIO_GERAL  LISTA:=LISTA('0005','0006');
  LISTA_VERBAS_DIRF  LISTA:=LISTA('24I8','24I9','16I8', '16I5', '24I5');
  LISTA_MUNICIPALIZADOS  LISTA:=LISTA('000000000000699','000000000011747', '000000000011399');
  --LISTA_TIPO_BENEFICIO LISTA;
  LISTA_FORNECEDORES CLOB;
  vLISTA_FORNECEDORES CLOB;
  vIDENTIFICADOR_FORNECEDOR VARCHAR2(15);
  vIDENTIFICADOR_BENEFICIO VARCHAR2(15);
  vIDENTIFICADOR_VERBA VARCHAR2(4);
  vCONTADOR NUMBER;
  vTIPO_ARQUIVO CHAR(4);
  vDATA_PROCESSAMENTO DATE;
  vIS_TESTE BOOLEAN;
  vSITUACAO_PROCESSAMENTO CHAR(2);
  vCODIGO_EMPRESA CHAR(4);
  vID_ARQUIVO NUMBER;
  vSITUACAO_ARQUIVO CHAR(2);
  vANO_MES_REFERENCIA DATE;
  vCATEGORIA_LOG NUMBER;
  vTIPO_LOG NUMBER;
  vADE_NUMERO_MAP NUMBER;
  vCPF_VALIDO BOOLEAN;
  VCPF_EXISTENTE NUMBER;
  NENHUM_ARQUIVO_PROCESSAR EXCEPTION;
  vCODIGO_PESSOA_BENEFICIARIO CHAR(15);
  vTIPO_RELACIONAMENTO CHAR(4);
  vCODIGO_BENEFICIO VARCHAR2(15);
  VCPF_TITULAR CHAR(11);
  vIDENTIFICADOR_REGRA VARCHAR2(30);
  vTIPO_BENEFICIO CHAR(2);
  vVALOR_REMUNERACAO_BASE_PS NUMBER(15,2);
  vCONC_CODIGO_BENEFICIARIO CHAR(15);
  vCONC_CPF_BENEFICIARIO CHAR(11);
  vCONC_DATA_NASC_BENEFICIARIO DATE;
  vCONC_IDADE_BENEFICIARIO NUMBER;
  vCONC_CODIGO_CONTRATO CHAR(15);
  vCONC_CODIGO_BENEFICIO CHAR(15);
  vCONC_DATA_CONCESSAO DATE;
  vCONC_DATA_CANCELAMENTO DATE;
  vCONC_NUMERO_CARTEIRA VARCHAR2(4000);
  vCONC_CATEGORIA_BENEFICIARIO CHAR(4);
  vCONC_VALOR_MENSALIDADE NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_MO NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_ME NUMBER(15,2);
  vCONC_VALOR_SUBSIDIO_OD NUMBER(15,2);
  vCONC_REMUNERACAO_BASE_PS NUMBER(15,2);
  vSOL_MOVI_DATA_SOLICITACAO DATE;
  vSOL_MOVI_DATA_INI_VIGENCIA DATE;
  vSOL_MOVI_DATA_FIM_VIGENCIA DATE;

  vQTDE_REG_EXCLUSAO_INCLUSAO NUMBER;

-- Contantes
C_TIPO_CONTRATO CHAR(4);
C_MES_INCIDENCIA CHAR(2);
C_CONSIDERA_DIRF CHAR(1);
C_CONTROLE_LANCAMENTO CHAR(1);
C_LOGIN_USUARIO VARCHAR2(40);
C_C_LIVRE_SELEC01 NUMBER(4);
C_C_LIVRE_VALOR01 NUMBER(16,4);
C_C_LIVRE_OPCAO01 CHAR(1);
C_REF_VERBA NUMBER(11,4);
C_ID_CLIENTE NUMBER(7);

/*
123456789012345678901234567890
*/
LOG_CODIGO_EMPRESA_INVALIDO    CONSTANT CHAR(4) := 'E001';
LOG_CODIGO_CONTRATO_INVALIDO   CONSTANT CHAR(4) := 'E002';
LOG_CODIGO_FORNECEDOR_INVALIDO CONSTANT CHAR(4) := 'E003';
LOG_CODIGO_VERBA_INVALIDO      CONSTANT CHAR(4) := 'E004';
LOG_VALOR_VERBA_INVALIDO       CONSTANT CHAR(4) := 'E005';
LOG_VALOR_ZERADO               CONSTANT CHAR(4) := 'E006';
LOG_ANO_MES_REF_INVALIDO       CONSTANT CHAR(4) := 'E007';
LOG_ANO_MES_REF_NAO_RELAC      CONSTANT CHAR(4) := 'E008';
LOG_NUM_CARTEIRA_INVALIDO      CONSTANT CHAR(4) := 'E009';
LOG_NUM_CARTEIRA_NAO_VIGENTE   CONSTANT CHAR(4) := 'E010';
LOG_CONCESSAO_NAO_ENCONTRADA   CONSTANT CHAR(4) := 'E011';
LOG_CPF_NAO_ENCONTRADO         CONSTANT CHAR(4) := 'E012';
LOG_CPF_INVALIDO               CONSTANT CHAR(4) := 'E013';
LOG_DUPLICIDADE_REGISTRO       CONSTANT CHAR(4) := 'E014';
LOG_TP_RELAC_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E015';
LOG_TP_RELAC_MAIS_DE_UM        CONSTANT CHAR(4) := 'E016';
LOG_TP_RELAC_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E017';
LOG_BENEFICIO_NAO_ENCONTRADO   CONSTANT CHAR(4) := 'E018';
LOG_CARTEIRA_OUTRO_CONTRATO    CONSTANT CHAR(4) := 'E019';
LOG_CARTEIRA_OUTRO_CPF         CONSTANT CHAR(4) := 'E020';
LOG_REGISTRO_ANTES_CONCESSAO   CONSTANT CHAR(4) := 'E021';
LOG_REGISTRO_APOS_CANCEL       CONSTANT CHAR(4) := 'E022';
LOG_CONCESSAO_DUPLICADA        CONSTANT CHAR(4) := 'E023';
LOG_CONCESSAO_ERRO_RECUPERACAO CONSTANT CHAR(4) := 'E024';
LOG_REGISTRO_JA_EXISTENTE      CONSTANT CHAR(4) := 'E025';
LOG_TIPO_BENEFICIO_INVALIDO    CONSTANT CHAR(4) := 'E026';
LOG_CNPJ_NAO_ENCONTRADO        CONSTANT CHAR(4) := 'E027';
LOG_CNPJ_INVALIDO              CONSTANT CHAR(4) := 'E028';
LOG_TP_RELAC_NAO_CONFORME      CONSTANT CHAR(4) := 'E029';
LOG_TP_RELAC_DEP_NAO_INFORMADO CONSTANT CHAR(4) := 'E030';
LOG_CODIGO_VERBA_NAO_CONFORME  CONSTANT CHAR(4) := 'E031';
LOG_TIPO_RELAC_INVALIDO        CONSTANT CHAR(4) := 'E032';

LOG_OPERACAO_INVALIDA          CONSTANT CHAR(4) := 'E033';
LOG_DATA_INICIAL_MENOR_PERMIT  CONSTANT CHAR(4) := 'E034';
LOG_DATA_FUTURA                CONSTANT CHAR(4) := 'E035';
LOG_CONTRATO_MUNICIPALIZADO    CONSTANT CHAR(4) := 'E036';

LOG_SOL_MOVI_NAO_ENCONTRADA    CONSTANT CHAR(4) := 'E037';
LOG_SOL_MOVI_DUPLICADA         CONSTANT CHAR(4) := 'E038';
LOG_SOL_MOVI_ERRO_RECUPERACAO  CONSTANT CHAR(4) := 'E039';
LOG_DUPLICIDADE_ADE_NUMERO     CONSTANT CHAR(4) := 'E040';
LOG_VERBA_NAO_PERMITE_ALTERAR  CONSTANT CHAR(4) := 'E041';
LOG_SOL_MOVI_NAO_VIGENTE       CONSTANT CHAR(4) := 'E042';
LOG_SOL_MOVI_OUTRA_DATA_SOLIC  CONSTANT CHAR(4) := 'E043';
LOG_SOL_MOVI_JA_EXISTENTE      CONSTANT CHAR(4) := 'E044';
LOG_PS_MENSALIDADE_VALOR_DIF   CONSTANT CHAR(4) := 'E045';
LOG_PS_SUBSIDIO_VALOR_DIF      CONSTANT CHAR(4) := 'E046';
LOG_PS_VALOR_NAO_ENCONTRADO    CONSTANT CHAR(4) := 'E047';
LOG_PS_VERBA_NAO_CONFERE       CONSTANT CHAR(4) := 'E120';
LOG_PS_NRO_CONTRATO_NAO_CONFERE       CONSTANT CHAR(4) := 'E121';
LOG_SUCESSO_INCLUSAO           CONSTANT CHAR(4) := 'S001';

-- Mapeamento
TYPE LISTA_CAMPOS is RECORD (
    CONTEUDO    VARCHAR2(1000)
    );

   TYPE LISTA_EXCECOES IS VARRAY(10000) OF LISTA_CAMPOS;
   LISTA_MAPEAMENTOS_INVALIDOS LISTA_EXCECOES;

  COD_CONVER_TIPO_RELACIONAMENTO CONSTANT CHAR(4) := 'PS01';
  COD_CONVER_TIPO_LOGRADOURO     CONSTANT CHAR(4) := 'PS02';
  COD_CONVER_ESTADO_CIVIL        CONSTANT CHAR(4) := 'PS03';
  COD_CONVER_TIPO_BENEFICIO      CONSTANT CHAR(4) := 'PS04';
  COD_CONVER_MOTIVO_CONCESSAO    CONSTANT CHAR(4) := 'PS05';
  COD_CONVER_BENEFICIO           CONSTANT CHAR(4) := 'PS06';
  COD_CONVER_MOTIVO_CANCELAMENTO CONSTANT CHAR(4) := 'PS07';
  COD_CONVER_CATEGORIA_PESSOA    CONSTANT CHAR(4) := 'PS08';
  COD_CONVER_SEXO                CONSTANT CHAR(4) := 'PS09';

  COD_STATUS_SOLIC_INCLUSAO      CONSTANT CHAR(4) := 'CS01';
  COD_STATUS_SOLIC_EXCLUSAO      CONSTANT CHAR(4) := 'CS02';
  COD_STATUS_SOLIC_ALTERACAO_OLD CONSTANT CHAR(4) := 'CS03';
  COD_STATUS_SOLIC_ALTERACAO_NEW CONSTANT CHAR(4) := 'CS04';


  -- Mapeamentos
  LISTA_MAPEA_SEXO LISTA;
  LISTA_MAPEA_TIPO_RELACI LISTA;
  LISTA_MAPEA_ESTADO_CIVIL LISTA;
  LISTA_MAPEA_TIPO_LOGRADOURO LISTA;

  LISTA_MAPEA_TIPO_BENEFICIO LISTA;
  LISTA_MAPEA_MOTIVO_CONCESSAO LISTA;
  LISTA_MAPEA_MOTIVO_CANCEL LISTA;
  LISTA_MAPEA_BENEFICIO LISTA;
  LISTA_MAPEA_CATEGORIA_PESSOA LISTA;

  LISTA_SERVIDORES_VERBAS_PS LISTA;
  LISTA_VERBAS_MENSALIDADE LISTA;
  LISTA_VERBAS_SUBSIDIO LISTA;

  -- Lista de valores vÃ¡lidos esperados na Interface de Software (IS)
  -- Sexo
  LISTA_SEXO_IS LISTA:= LISTA('0001','0002');
 ----------------------------GABRIEL ADICIONADO AQUI EM 01/07/2019 PARA MONTAR A LISTA DINAMICAMENTE E RETIRAR OS COGIGOS FIXOS -------------------------------------
------------------------------------------------------------------------------INICIO------------------------------------------------------------------------------------------------------------

  LISTA_TIPO_RELACI_IS LISTA;
LISTA_ESTADO_CIVIL_IS LISTA;
LISTA_TIPO_LOGRADOURO_IS LISTA;
LISTA_TIPO_BENEFICIO_IS LISTA;
LISTA_MOTIVO_CONCESSSAO_IS LISTA;
LISTA_MOTIVO_CANCEL_IS LISTA;
LISTA_BENEFICIO_IS LISTA;
LISTA_CATEGORIA_PESSOA_IS lista;
--------------------------------------------------------------------------------FIM-------------------------------------------------------------------------------------------------------------

  TEXTO_MENSAGEM_MAPEA_INVALIDO VARCHAR2(4000);
  vCONTADOR_MAPEAMENTO_INVALIDO NUMBER;
  MAPEAMENTO_EXCEPTION EXCEPTION;
-------------GABRIEL AQUI TAMBEM PARA RETIDA DOS CODIGOS FIXO
    FUNCTION MONTA_LISTA( pcodigo_conversao CHAR)

    RETURN lista
  IS

    CURSOR cdado_destino
    IS
      SELECT dado_ORIGEM
      FROM RHINTE_ED_IT_CONV
      WHERE CODIGO_CONVERSAO =pcodigo_conversao;
    V lista;
    vdado VARCHAR2 (400);
    I PLS_INTEGER;
    vcontador NUMBER;
  BEGIN
  DBMS_Output.PUT_LINE(pcodigo_conversao);
    FOR c1 IN
    (SELECT COUNT (1)AS quantidade
    FROM RHINTE_ED_IT_CONV
    WHERE CODIGO_CONVERSAO =pcodigo_conversao
    )
    LOOP
      vcontador:=c1.quantidade;
    END LOOP;
    V:=lista();
    V.EXTEND(vcontador);
    I:=1;
    OPEN cdado_destino;
    LOOP
      FETCH cdado_destino
      INTO vdado;
      EXIT
    WHEN cdado_destino%notfound;
      V(I) := vdado;
      I    := I+1;
    END LOOP;
    CLOSE cdado_destino;
    RETURN v;
  END;
-----------FIM
FUNCTION MAPEAR_VALORES(plista LISTA, pcodigo_conversao CHAR) return LISTA as
lista_map LISTA;
vDADO_DESTINO VARCHAR2(4000);
vCONTADOR_NAO_ENCONTRADO NUMBER;

BEGIN
  lista_map := plista;
  vCONTADOR_NAO_ENCONTRADO := 0;
  DBMS_Output.PUT_LINE('MAPEAMENTO. pcodigo_conversao = ' || pcodigo_conversao || ';');
  for i in 1..plista.count()
    loop
       begin
          vDADO_DESTINO := NULL;
          select DADO_DESTINO
            into vDADO_DESTINO
            from RHINTE_ED_IT_CONV
           where CODIGO_CONVERSAO = pcodigo_conversao
             and DADO_ORIGEM = plista(i)
             ;
       exception
       when NO_DATA_FOUND then
         vCONTADOR_NAO_ENCONTRADO := vCONTADOR_NAO_ENCONTRADO + 1;
         vDADO_DESTINO := NULL;
         DBMS_Output.PUT_LINE('VALOR_NAO_ENCONTRADO. pcodigo_conversao = ' || pcodigo_conversao || '; DADO_ORIGEM = ' || plista(i));
       end;

       lista_map(i) := vDADO_DESTINO;
   end loop;

   IF vCONTADOR_NAO_ENCONTRADO > 0 THEN
      RAISE MAPEAMENTO_EXCEPTION;
   END IF;

   return lista_map;

END;

PROCEDURE IMPRIMIR_VALORES_MAPEADOS(descricao_lista varchar2, lista LISTA, lista_mapeada LISTA) as
vCONTEUDO VARCHAR2(4);
BEGIN
      DBMS_Output.PUT_LINE('IMPRIMINDO LISTA MAPEADA' || ' - ' || descricao_lista);
       for i in 1..lista.count()
         loop
             DBMS_Output.PUT_LINE(RPAD('lista('||i||')',10,' ') || ' = ' || lista(i) || ' -> ' || lista_mapeada(i));
         end loop;
END;

PROCEDURE REGISTRA_LOG(TipoLog IN NUMBER, Numero_linha IN NUMBER, DescricaoLog IN VARCHAR2, DetalheLog IN VARCHAR2) AS
BEGIN

REG_LOG.TIPO_LOG := TipoLog;
REG_LOG.DESCRICAO_LOG := DescricaoLog;
REG_LOG.DETALHE_LOG := DetalheLog;

vLISTA_LOG.Extend;
vLISTA_LOG(vLISTA_LOG.count) := REG_LOG;
END;

PROCEDURE GRAVA_LOG(CodigoEmpresa IN CHAR, CategoriaLog IN NUMBER, TipoLog IN NUMBER, IdArquivo IN NUMBER, Numero_linha IN NUMBER, CodigoLog IN CHAR, DetalheLog IN VARCHAR2) AS
BEGIN
/*
     INSERT INTO RHPBH_PS_IMPORTACAO_LOG(ID_LOG, DATA_LOG, CODIGO_EMPRESA, TIPO_ARQUIVO, DATA_IMPORTACAO, CATEGORIA, TIPO, LINHA, DESCRICAO, DETALHE)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CodigoEmpresa, TipoArquivo, DataImportacao, CategoriaLog, TipoLog, Numero_linha, DescricaoLog, DetalheLog);
     COMMIT;
*/
/*
     IF TipoLog = TIPO_LOG_PROCESSAMENTO THEN
        dbms_output.put_line(CodigoLog);                                                                        SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL
     END IF;
*/
     INSERT INTO RHPBH_ARQUIVO_LOG(ID_LOG, DATA_LOG, CATEGORIA, TIPO, ID_ARQUIVO, NUMERO_LINHA, CODIGO_LOG, DETALHE, CODIGO_EMPRESA)
     values (SQ_RHPBH_PS_IMPORTACAO_LOG.NEXTVAL, sysdate, CategoriaLog, TipoLog, IdArquivo, Numero_linha, CodigoLog, DetalheLog, CodigoEmpresa);
     COMMIT;
/*
create table RHPBH_ARQUIVO_LOG
(
  ID_LOG          NUMBER not null,
  DATA_LOG        DATE not null,
  CATEGORIA       NUMBER not null,
  TIPO            NUMBER not null,
  ID_ARQUIVO      NUMBER not null,
  NUMERO_LINHA    NUMBER not null,
  DESCRICAO       VARCHAR2(4000) not null,
  DETALHE         VARCHAR2(4000)
)
*/
END;
                                                                     -------PAREI AQUI EM 22/03/2019 GABRIEL ----------------
PROCEDURE PR_CONTROLE_PROCESSAMENTO(CODIGO_EMPRESA IN CHAR, ID_ARQUIVO IN NUMBER, SITUACAO_PROCESSAMENTO IN CHAR, POBSERVACAO IN VARCHAR2 DEFAULT NULL) AS
BEGIN
     PR_GRAVA_LOG_PROCESSA_ARQUIVO(CODIGO_EMPRESA, ID_ARQUIVO, SITUACAO_PROCESSAMENTO, POBSERVACAO);
END;

PROCEDURE PR_SET_SITUACAO_PROCESSAMENTO(PSITUACAO_PROCESSAMENTO IN CHAR) AS
BEGIN
    IF PSITUACAO_PROCESSAMENTO IS NULL THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO NULA.');
    END IF;

    IF PSITUACAO_PROCESSAMENTO NOT IN ('00','01','02','03','04','05','06','07') THEN
       raise_application_error (-20001,'ERRO NO CONTROLE DE PROCESSAMENTO. SITUACAO INVALIDA.');
    END IF;

    vSITUACAO_PROCESSAMENTO := PSITUACAO_PROCESSAMENTO;
END;

PROCEDURE PR_ATUALIZAR_SITUACAO_REGISTR0 AS
BEGIN
   BEGIN
      update RHPBH_ARQUIVO_LINHA AL
         set SITUACAO = 99
       where ID_ARQUIVO = PID_ARQUIVO
         and exists(
      select *
        from RHPBH_ARQUIVO_LOG
       where ID_ARQUIVO = AL.ID_ARQUIVO
         and NUMERO_LINHA = AL.NUMERO_LINHA
         and TIPO = 99
      );

      commit;

    EXCEPTION
    WHEN OTHERS THEN
       ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCEÃ¿Ã¿O AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
END;

--PROCEDURE FINALIZAR_CS(var RHPBH_CS%ROWTYPE) AS
FUNCTION FINALIZAR_CS(vCODIGO_EMPRESA IN CHAR, vTIPO_CONTRATO IN CHAR, vCODIGO_CONTRATO IN CHAR, vCODIGO_VERBA IN CHAR, vDATA_SOLICITACAO IN DATE, vANO_MES_REFERENCIA IN DATE, vCOD_STATUS_SOLIC IN CHAR) RETURN NUMBER IS
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
     vQTDE_LINHAS_AFETADAS := 0;
     BEGIN

        update RHMOVI_SOL_MOVI
           set DATA_FIM_VIGENCIA = ADD_MONTHS(vANO_MES_REFERENCIA,-1),
               COD_STATUS_SOLIC = vCOD_STATUS_SOLIC,
               LOGIN_USUARIO = 'IMPORT_CS',
               DT_ULT_ALTER_USUA = sysdate
         where RHMOVI_SOL_MOVI.CODIGO_EMPRESA = vCODIGO_EMPRESA
           and RHMOVI_SOL_MOVI.TIPO_CONTRATO = vTIPO_CONTRATO
           and RHMOVI_SOL_MOVI.CODIGO_CONTRATO = vCODIGO_CONTRATO
           and RHMOVI_SOL_MOVI.TIPO_MOVIMENTO = 'CS'
           and RHMOVI_SOL_MOVI.CODIGO_VERBA = vCODIGO_VERBA
           and RHMOVI_SOL_MOVI.DATA_SOLICITACAO = vDATA_SOLICITACAO
		   and RHMOVI_SOL_MOVI.OCORRENCIA = (

            select MAX(OCORRENCIA)
              from RHMOVI_SOL_MOVI AUX
             where AUX.CODIGO_EMPRESA = RHMOVI_SOL_MOVI.CODIGO_EMPRESA
               and AUX.TIPO_CONTRATO = RHMOVI_SOL_MOVI.TIPO_CONTRATO
               and AUX.CODIGO_CONTRATO = RHMOVI_SOL_MOVI.CODIGO_CONTRATO
               and AUX.TIPO_MOVIMENTO = RHMOVI_SOL_MOVI.TIPO_MOVIMENTO
               and AUX.CODIGO_VERBA = RHMOVI_SOL_MOVI.CODIGO_VERBA
               and AUX.DATA_SOLICITACAO = RHMOVI_SOL_MOVI.DATA_SOLICITACAO
               and (DATA_FIM_VIGENCIA IS NULL OR DATA_FIM_VIGENCIA >= vANO_MES_REFERENCIA)
           );

           vQTDE_LINHAS_AFETADAS := sql%rowcount;

     EXCEPTION
     WHEN OTHERS THEN
          raise_application_error (-20002,'[VALIDACAO_REGRAS] -   ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM
          || vCODIGO_EMPRESA || vTIPO_CONTRATO || vCODIGO_CONTRATO || vCODIGO_VERBA || vDATA_SOLICITACAO || vCOD_STATUS_SOLIC
          );
     END;
     RETURN vQTDE_LINHAS_AFETADAS;
END;

FUNCTION INCLUIR_CS(var RHPBH_CS%ROWTYPE, vCOD_STATUS_SOLIC IN CHAR) RETURN NUMBER IS
reg_cs RHMOVI_SOL_MOVI%ROWTYPE;
vQTDE_LINHAS_AFETADAS NUMBER;
BEGIN
    vQTDE_LINHAS_AFETADAS := 0;

    reg_cs.CODIGO_EMPRESA := var.Codigo_Empresa;
    reg_cs.TIPO_CONTRATO := var.tipo_contrato;
    reg_cs.CODIGO_CONTRATO := var.codigo_contrato;
    reg_cs.TIPO_MOVIMENTO := 'CS';
    reg_cs.DATA_SOLICITACAO := var.data_solicitacao_inicial;
    reg_cs.CODIGO_VERBA := var.codigo_verba;

    reg_cs.DATA_LIMITE_ATENDE := null;
    reg_cs.DATA_AUTORIZA := var.data_autorizacao_corrente;
    reg_cs.DATA_INI_VIGENCIA := var.ano_mes_referencia;

    IF (var.Numero_Parcelas = 999) THEN
       reg_cs.DATA_FIM_VIGENCIA := null;
    ELSE
       reg_cs.DATA_FIM_VIGENCIA := ADD_MONTHS(var.ano_mes_referencia, var.Numero_Parcelas-1);
    END IF;


    reg_cs.FASE := '0';
    reg_cs.MODO_OPERACAO := 'R';
    reg_cs.ANO_MES_REFERENCIA := null;
    reg_cs.MES_INCIDENCIA := null;
    reg_cs.CTRL_DEMO := 'N';
    reg_cs.REF_VERBA := '0';
    reg_cs.CTRL_PROP_REF := 'N';
    reg_cs.VALOR_VERBA := var.Valor_Verba;
    reg_cs.CTRL_LANCAMENTO := 0;
    reg_cs.CONTADOR := var.numero_parcelas;
	/*MARCOS ALTERAÇÃO DO PROJETA PARA SIM SDM Ticket N° 3060734 EM 28/07/2022*/
    reg_cs.PROJ_CONTADOR := 'S';
    reg_cs.CONTROLE_GERACAO := 'I';
    reg_cs.DESTINO_GERACAO := 'M';
    reg_cs.DOCUMENTO_PUBLIC := null;
    reg_cs.ASSINATURA_01 := null;
    reg_cs.ASSINATURA_02 := null;
    reg_cs.C_LIVRE_SELEC01 := null;
    reg_cs.C_LIVRE_SELEC02 := null;
    reg_cs.C_LIVRE_VALOR01 := var.Ade_Numero;
    reg_cs.C_LIVRE_VALOR02 := var.numero_contrato_operadora;
    reg_cs.C_LIVRE_DESCR01 := var.cpf_beneficiario;
    reg_cs.C_LIVRE_DESCR02 := var.numero_carteira;
    reg_cs.C_LIVRE_OPCAO01 := null;
    reg_cs.C_LIVRE_OPCAO02 := null;
    reg_cs.C_LIVRE_DATA01 := sysdate;
    reg_cs.C_LIVRE_DATA02 := '';
    reg_cs.TEXTO_ASSOCIADO := '';
    reg_cs.LOGIN_USUARIO := 'IMPORT_CS';
    reg_cs.DT_ULT_ALTER_USUA := sysdate;
    reg_cs.CODIGO_FORNECEDOR := var.Codigo_Fornecedor;
    reg_cs.COD_STATUS_SOLIC := vCOD_STATUS_SOLIC;

    BEGIN
         select max(OCORRENCIA)
           into reg_cs.OCORRENCIA
           from RHMOVI_SOL_MOVI
          where RHMOVI_SOL_MOVI.CODIGO_EMPRESA = reg_cs.CODIGO_EMPRESA
            and RHMOVI_SOL_MOVI.TIPO_CONTRATO = reg_cs.TIPO_CONTRATO
            and RHMOVI_SOL_MOVI.CODIGO_CONTRATO = reg_cs.CODIGO_CONTRATO
            and RHMOVI_SOL_MOVI.TIPO_MOVIMENTO = 'CS'
            and RHMOVI_SOL_MOVI.CODIGO_VERBA = reg_cs.CODIGO_VERBA
            and RHMOVI_SOL_MOVI.DATA_SOLICITACAO = reg_cs.DATA_SOLICITACAO;

            IF reg_cs.OCORRENCIA IS NOT NULL THEN
               reg_cs.OCORRENCIA := reg_cs.OCORRENCIA + 1;
            ELSE
               reg_cs.OCORRENCIA := 1;
            END IF;
    EXCEPTION
    WHEN OTHERS THEN
         reg_cs.OCORRENCIA := 1;
    END;

    BEGIN
         Insert into RHMOVI_SOL_MOVI values reg_cs;
         vQTDE_LINHAS_AFETADAS := sql%rowcount;
         commit;

    EXCEPTION
    WHEN OTHERS THEN
         raise_application_error (-20002,'[VALIDACAO_REGRAS] - OCORREU UMA EXCECAO AO TENTAR ATUALIZAR A SITUACAO DOS REGISTROS VALIDADOS. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    RETURN vQTDE_LINHAS_AFETADAS;

END;

begin

    vLISTA_LOG := LISTA_LOG();
    REG_LOG := LOG_PROCESSAMENTO(null, null,null, null);
    vRETORNO := RETORNO_PROCESSAMENTO(null,null,null);


------------------------------------------
-- INICIO MAPEAMENTO


-- INICIO MAPEAMENTO
 --------------montar lista Gabriel em 06/05/2019

BEGIN
LISTA_TIPO_RELACI_IS := MONTA_LISTA(COD_CONVER_TIPO_RELACIONAMENTO);
LISTA_ESTADO_CIVIL_IS := MONTA_LISTA(COD_CONVER_ESTADO_CIVIL);
LISTA_TIPO_LOGRADOURO_IS:= MONTA_LISTA(COD_CONVER_TIPO_LOGRADOURO);
LISTA_TIPO_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_TIPO_BENEFICIO);
LISTA_MOTIVO_CONCESSSAO_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CONCESSAO);
LISTA_MOTIVO_CANCEL_IS := MONTA_LISTA(COD_CONVER_MOTIVO_CANCELAMENTO);
LISTA_BENEFICIO_IS := MONTA_LISTA(COD_CONVER_BENEFICIO);
LISTA_CATEGORIA_PESSOA_IS := MONTA_LISTA(COD_CONVER_CATEGORIA_PESSOA);
END;
  BEGIN

  LISTA_MAPEAMENTOS_INVALIDOS := LISTA_EXCECOES();

  /*
  -- Mapeamento valores - Sexo
  BEGIN
       LISTA_MAPEA_SEXO := MAPEAR_VALORES(LISTA_SEXO_IS, COD_CONVER_SEXO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'SEXO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
  END;
  */

  -- Mapeamento valores - Tipo de Relacionamento
  BEGIN
       LISTA_MAPEA_TIPO_RELACI := MAPEAR_VALORES(LISTA_TIPO_RELACI_IS, COD_CONVER_TIPO_RELACIONAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE RELACIONAMENTO.');
  END;
  -- Mapeamento valores - Estado Civil
  BEGIN
       LISTA_MAPEA_ESTADO_CIVIL := MAPEAR_VALORES(LISTA_ESTADO_CIVIL_IS, COD_CONVER_ESTADO_CIVIL);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE ESTADO CIVIL.');
  END;
  -- Mapeamento valores - Tipo de Logradouro
  BEGIN
       LISTA_MAPEA_TIPO_LOGRADOURO := MAPEAR_VALORES(LISTA_TIPO_LOGRADOURO_IS, COD_CONVER_TIPO_LOGRADOURO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;

  -- Mapeamento valores - Tipo de BenefÃ­cio
  BEGIN
       LISTA_MAPEA_TIPO_BENEFICIO := MAPEAR_VALORES(LISTA_TIPO_BENEFICIO_IS, COD_CONVER_TIPO_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       --raise_application_error (-20001,'ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE SEXO.');
  END;
  -- Mapeamento valores - Motivo ConcessÃ£o
  BEGIN
       LISTA_MAPEA_MOTIVO_CONCESSAO := MAPEAR_VALORES(LISTA_MOTIVO_CONCESSSAO_IS, COD_CONVER_MOTIVO_CONCESSAO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE RELACIONAMENTO.');
  END;
  -- Mapeamento valores - Motivo Cancelamento
  BEGIN
       LISTA_MAPEA_MOTIVO_CANCEL := MAPEAR_VALORES(LISTA_MOTIVO_CANCEL_IS, COD_CONVER_MOTIVO_CANCELAMENTO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE ESTADO CIVIL.');
  END;
  -- Mapeamento valores - BenefÃ­cio
  BEGIN
       LISTA_MAPEA_BENEFICIO := MAPEAR_VALORES(LISTA_BENEFICIO_IS, COD_CONVER_BENEFICIO);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;
  -- Mapeamento valores - Categoria de Beneficiario
  BEGIN
       LISTA_MAPEA_CATEGORIA_PESSOA := MAPEAR_VALORES(LISTA_CATEGORIA_PESSOA_IS, COD_CONVER_CATEGORIA_PESSOA);
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;

  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT > 0 THEN
     RAISE MAPEAMENTO_EXCEPTION;
  END IF;

  /*
  IF LISTA_MAPEAMENTOS_INVALIDOS.COUNT = 0 THEN
  -- Verifica se os cÃ³digos mapeados existem na base de dados
  BEGIN
    -- Tipo de Relacionamento
    vCONTADOR_MAPEAMENTO_INVALIDO := 0;
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_TIPO_RELAC.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_TIPO_RELAC
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_RELACIONAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_TIPO_RELAC.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_RELACIONAMENTO';
    END IF;

    -- Estado Civil
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_EST_CIVIL.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_EST_CIVIL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_ESTADO_CIVIL
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_EST_CIVIL.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'ESTADO_CIVIL';
    END IF;

    -- Tipo de Logradouro
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHTABS_TP_LOGRAD.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHTABS_TP_LOGRAD
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_LOGRADOURO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHTABS_TP_LOGRAD.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_LOGRADOURO';
    END IF;

    -- Tipo de BenefÃ­cio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_TIPO_BENEF.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_TIPO_BENEF
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_TIPO_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_TIPO_BENEF.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'TIPO_BENEFICIO';
    END IF;

    -- Motivo ConcessÃ£o
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CONCES.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CONCES
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CONCESSAO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CONCES.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CONCESSAO';
    END IF;

    -- Motivo de Cancelamento
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_MOT_CANCEL
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_MOTIVO_CANCELAMENTO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_MOT_CANCEL.CODIGO_MOT_CANCEL (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'MOTIVO_CANCELAMENTO';
    END IF;

    -- BenefÃ­cio
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHBENF_BENEFICIO.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHBENF_BENEFICIO
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_BENEFICIO
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHBENF_BENEFICIO.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'BENEFICIO';
    END IF;

    -- Categoria de Pessoa
    select COUNT(1)
      into  vCONTADOR_MAPEAMENTO_INVALIDO
      from(
              select DADO_ORIGEM, DADO_DESTINO, RHPESS_CAT_PESSOA.CODIGO AS CODIGO_MAPEADO
                    from RHINTE_ED_IT_CONV, RHPESS_CAT_PESSOA
                   where RHINTE_ED_IT_CONV.CODIGO_CONVERSAO = COD_CONVER_CATEGORIA_PESSOA
                     and RHINTE_ED_IT_CONV.DADO_DESTINO = RHPESS_CAT_PESSOA.CODIGO (+)
    )
    where CODIGO_MAPEADO IS NULL;

    IF vCONTADOR_MAPEAMENTO_INVALIDO > 0 THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
    END IF;

    IF LISTA_MAPEAMENTOS_INVALIDOS.count() > 0 THEN
       for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
       loop
           IF i = 1 THEN
              TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           ELSE
              TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
           END IF;
       end loop;

       raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. HA PRESENÃ¿A DE CODIGO INEXISTENTES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
     END IF;
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN
       LISTA_MAPEAMENTOS_INVALIDOS.EXTEND;
       LISTA_MAPEAMENTOS_INVALIDOS(LISTA_MAPEAMENTOS_INVALIDOS.LAST).CONTEUDO := 'CATEGORIA_PESSOA';
       DBMS_Output.PUT_LINE('ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE TIPO DE LOGRADOURO.');
  END;
  END IF;
  */
  EXCEPTION
  WHEN MAPEAMENTO_EXCEPTION THEN

     for i in 1..LISTA_MAPEAMENTOS_INVALIDOS.count()
     loop
         IF i = 1 THEN
            TEXTO_MENSAGEM_MAPEA_INVALIDO := LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         ELSE
            TEXTO_MENSAGEM_MAPEA_INVALIDO := TEXTO_MENSAGEM_MAPEA_INVALIDO || ';' ||LISTA_MAPEAMENTOS_INVALIDOS(i).CONTEUDO;
         END IF;
     end loop;

     raise_application_error (-20001,'VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES. CODIGO ENTIDADE(S): ' || TEXTO_MENSAGEM_MAPEA_INVALIDO);
  WHEN OTHERS THEN
     raise_application_error (-20001,'ERRO ENCONTRADO AO VERIFICAR MAPEAMENTO DE CODIGOS DE TABELAS AUXILIARES.' ||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
  END;

-- FIM MAPEAMENTO
------------------------------------------

------------------------------------------
-- INICIO LISTAS VERBAS PLANO DE SAUDE

begin


LISTA_VERBAS_MENSALIDADE := LISTA();

LISTA_VERBAS_SUBSIDIO := LISTA();

for c1 in(
    select CODIGO from RHPBH_PS_VERBAS_PADRAO where RHPBH_PS_VERBAS_PADRAO.NATUREZA_VERBA_PLANO = 'MENSALIDADE'
)
loop
    LISTA_VERBAS_MENSALIDADE.EXTEND;
    LISTA_VERBAS_MENSALIDADE(LISTA_VERBAS_MENSALIDADE.LAST) := C1.CODIGO;
end loop;

for c1 in(
    select CODIGO from RHPBH_PS_VERBAS_PADRAO where RHPBH_PS_VERBAS_PADRAO.NATUREZA_VERBA_PLANO in ( 'SUBSIDIO', 'SUBSIDIO PRO_RATA')
)
loop
    LISTA_VERBAS_SUBSIDIO.EXTEND;
    LISTA_VERBAS_SUBSIDIO(LISTA_VERBAS_SUBSIDIO.LAST) := C1.CODIGO;
end loop;

end;
-- FIM LISTAS VERBAS PLANO DE SAUDE
------------------------------------------

    -- Verifica se o codigo de empresa informado e valido
    IF PCODIGO_EMPRESA IS NULL THEN
       raise_application_error (-20001,'CODIGO_EMPRESA NAO INFORMADO.');
    END IF;

    BEGIN
         vCODIGO_EMPRESA := null;
         select CODIGO into vCODIGO_EMPRESA from RHORGA_EMPRESA where CODIGO = PCODIGO_EMPRESA;

         IF vCODIGO_EMPRESA IS NULL THEN
            raise_application_error (-20001,'CODIGO_EMPRESA INVALIDO.');
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O CODIGO_EMPRESA');
    END;

    BEGIN
         vID_ARQUIVO := null;
         select ID_ARQUIVO, SITUACAO into vID_ARQUIVO, vSITUACAO_ARQUIVO from RHPBH_ARQUIVO where ID_ARQUIVO = PID_ARQUIVO;

         IF vID_ARQUIVO IS NULL THEN
            raise_application_error (-20001,'ID ARQUIVO INVALIDO.');
         END IF;

         IF vSITUACAO_ARQUIVO NOT IN ('00','01','02','03','04','05','06','07') THEN
            raise_application_error (-20001,'O ARQUIVO INFORMADO ESTA COM SITUACAO INVALIDA. ENTRE EM CONTATO COM O SUPORTE TECNICO DA PBH.');
         END IF;

         CASE WHEN vSITUACAO_ARQUIVO = '07' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA COM PROCESSAMENTO JÃ¿ CONCLUIDO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO = '01' THEN raise_application_error (-20002,'O ARQUIVO INFORMADO ESTA CANCELADO E NAO PODE SER MAIS PROCESSADO.');
              WHEN vSITUACAO_ARQUIVO in ('02','04','06') THEN raise_application_error (-20002,'O ARQUIVO INFORMADO JÃ¿ ESTÃ¿ EM PROCESSAMENTO E NAO PODE HAVER PROCESSAMENTOS COMCOMITANTES PARA O MESMO ARQUIVO.');
              WHEN vSITUACAO_ARQUIVO = '00' THEN
                   IF PACAO NOT IN (1,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO Ã¿ COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO CARREGADO E AS ACOES PERMITIDA SAO 1 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '03' THEN
                   IF PACAO NOT IN (2,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO Ã¿ COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO VALIDACAO DE LEIAUTE PROCESSADA E AS ACOES PERMITIDA SAO 2 ou 10.');
                   END IF;
              WHEN vSITUACAO_ARQUIVO = '05' THEN
                   IF PACAO NOT IN (3,4,10) THEN
                      raise_application_error (-20002,'A ACAO INFORMADA NAO Ã¿ COMPATIVEL COM A SITUACAO DO ARQUIVO. O ARQUIVO ESTÃ¿ COM A SITUACAO PROCESSADO E AS ACOES PERMITIDA SAO 3 ou 10.');
                   END IF;
              ELSE
                  NULL;
         END CASE;

         PR_SET_SITUACAO_PROCESSAMENTO(vSITUACAO_ARQUIVO);
    EXCEPTION
    WHEN OTHERS THEN
       raise_application_error (-20002,'NAO FOI POSSIVEL RECUPERAR O ARQUIVO COM O ID_ARQUIVO INFORMADO.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '70');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '71');

    -- Verifica se a data de referÂ¿ia informada e valida
    IF PANO_MES_REFERENCIA IS NULL THEN
      raise_application_error (-20001,'ANO_MES_REFERENCIA NAO INFORMADO.');
    END IF;

    -- Verifica se a data de corte informada e valida
    -- A data de corte deve ser menor que data corrente
    IF PDATA_CORTE IS NULL THEN
      raise_application_error (-20001,'DATA DE CORTE NAO INFORMADA.');
    ELSE
        IF PDATA_CORTE > TRUNC(sysdate) THEN
           raise_application_error (-20001,'DATA DE CORTE NAO PODE SER DATA FUTURA. DEVE SER MENOR QUE DATA CORRENTE.');
        END IF;

        IF TO_CHAR(PDATA_CORTE, 'MMYYYY') <> TO_CHAR(PANO_MES_REFERENCIA, 'MMYYYY') THEN
           raise_application_error (-20001,'DATA DE CORTE DEVE SER DENTRO DO MESMO ANO E MES DE REFERENCIA DO MOVIMENTO.');
        END IF;
    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '72');

    -- Verifica se hÃ¡ algum arquivo de movimento DIRF
    -- a ser processado
    BEGIN
         IF PACAO = 1 THEN
             VCONTADOR := null;
             select count(1) into VCONTADOR
               from RHPBH_ARQUIVO
              where CODIGO_EMPRESA = PCODIGO_EMPRESA
                and TIPO_ARQUIVO = '0003'
                and ID_ARQUIVO = PID_ARQUIVO
                and SITUACAO in ('00');

             IF VCONTADOR = 0 THEN
                raise_application_error (-20002,'NAO EXISTE ARQUIVO DE MOVIMENTO DE CONSIGNA!O A SER PROCESSADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
             END IF;
         END IF;
    EXCEPTION
    WHEN OTHERS THEN
       --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO EXISTE ARQUIVO DE MOVIMENTO DE CONSIGNA!O A SER PROCESSADO PARA A EMPRESA E ANO_MES_REFERENCIA INFORMADOS.');
    END;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '73');

    -- VALIDAR LEIAUTE ARQUIVO
    IF PACAO in (1, 10) THEN
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = '0003'
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('00')
         order by ID_ARQUIVO)
         loop
            PR_SET_SITUACAO_PROCESSAMENTO('02');
            PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

            BEGIN
                PR_VALIDAR_LEIAUTE_ARQUIVO (C1.ID_ARQUIVO);
            EXCEPTION
            WHEN OTHERS THEN
                 --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
                 raise_application_error (-20002,'ERRO AO TENTAR VALIDAR O LEIAUTE DO ARQUIVO. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

         end loop;

         PR_SET_SITUACAO_PROCESSAMENTO('03');
         PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
         PR_ATUALIZAR_SITUACAO_REGISTR0;

         commit;

    EXCEPTION
    WHEN OTHERS THEN
       --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DIRF. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    END IF;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, '74');

    IF PACAO in (2, 10) THEN
    --dbms_output.put_line('PROCESSAR ARQUIVO');
    -- PROCESSAR ARQUIVO
    BEGIN

        FOR C1 IN (select * from RHPBH_ARQUIVO
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_ARQUIVO = '0003'
           and ID_ARQUIVO = PID_ARQUIVO
           and SITUACAO in ('03', '05')
         order by ID_ARQUIVO)
         loop

            BEGIN

            PR_SET_SITUACAO_PROCESSAMENTO('04');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

             BEGIN
                delete from RHPBH_CS where ID_ARQUIVO = C1.ID_ARQUIVO;
             EXCEPTION
             WHEN OTHERS THEN
             --dbms_output.put_line('ERRO AO TENTAR EXCLUIR RHPBH_PS_DIRF');
                NULL;
             END;
-- AQUI
/*
             BEGIN
                insert into RHPBH_PS_DIRF(
                ID_ARQUIVO,
                NUMERO_LINHA,
                ANO_MES_REFERENCIA,
                CODIGO_EMPRESA,
                TIPO_CONTRATO,
                CODIGO_CONTRATO,
                CPF,
                NUMERO_CARTEIRA,
                CODIGO_FORNECEDOR,
                CODIGO_VERBA,
                VALOR_VERBA)
                (
                select ID_ARQUIVO,
                       NUMERO_LINHA,
                       TRUNC(TO_DATE(DATA_AUTORIZA,'DD/MM/YYYY HH24:MI:SS')) AS ANO_MES_REFERENCIA,
                       SUBSTR(CODIGO_EMPRESA,7) AS CODIGO_EMPRESA,
                       '0001' AS TIPO_CONTRATO,
                       LPAD(CODIGO_CONTRATO, 15,'0') AS CODIGO_CONTRATO,
                       CPF,
                       TRIM(NUMERO_CARTEIRA) AS NUMERO_CARTEIRA,
                       LPAD(CODIGO_FORNECEDOR, 15,'0') AS CODIGO_FORNECEDOR,
                       SUBSTR(CODIGO_VERBA,7) AS CODIGO_VERBA,
                       TO_NUMBER(VALOR_VERBA)/100 AS VALOR_VERBA
                  from (select
RHPBH_ARQUIVO.ID_ARQUIVO,
RHPBH_ARQUIVO.CODIGO_EMPRESA AS CODIGO_EMPRESA_ARQUIVO,
RHPBH_ARQUIVO.SITUACAO AS SITUACAO_ARQUIVO,
RHPBH_ARQUIVO.DATA_CARGA,
RHPBH_ARQUIVO_LINHA.NUMERO_LINHA,
RHPBH_ARQUIVO_LINHA.SITUACAO AS SITUACAO_LINHA,
RHPBH_ARQUIVO_LINHA.LINHA AS LINHA_ORIGINAL,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	1	  ,	10	)	AS	CODIGO_EMPRESA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	11	,	10	)	AS	CODIGO_CONTRATO,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	21	,	10	)	AS	CODIGO_FORNECEDOR,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	31	,	10	)	AS	CODIGO_VERBA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	41	,	15	)	AS	VALOR_VERBA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	56	,	 5	)	AS	CONTADOR,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	61	,	10	)	AS	REFERENCIA_VERBA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	71	,	14	)	AS	DATA_AUTORIZA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	85	,	 1	)	AS	OPERACAO_IMPORTACAO,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	86	,	 2	)	AS	CODIGO_CONSIG_ERRO ,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	88	,	13	)	AS	NUMERO_GUIA_IPTU,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	101	,	11	)	AS	CPF,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	112	,	14	)	AS	DATA_HORA_LANCAMENTO,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	126	,	30	)	AS	NUMERO_CARTEIRA
  from RHPBH_ARQUIVO, RHPBH_ARQUIVO_LINHA
 where RHPBH_ARQUIVO.ID_ARQUIVO = RHPBH_ARQUIVO_LINHA.ID_ARQUIVO
   and RHPBH_ARQUIVO.TIPO_ARQUIVO = '0004') VW_ARQUIVO_0004
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO
                   --and SITUACAO_ARQUIVO = '51'
                   and SITUACAO_LINHA = '00'
                   --and CODIGO_CONTRATO = '000000000947095'
                );
                COMMIT;
                ----dbms_output.put_line('COMITOU INCLUSAO RHPBH_PS_DIRF');

                select max(SITUACAO_ARQUIVO) into VCONTADOR
                  from (select
RHPBH_ARQUIVO.ID_ARQUIVO,
RHPBH_ARQUIVO.CODIGO_EMPRESA AS CODIGO_EMPRESA_ARQUIVO,
RHPBH_ARQUIVO.SITUACAO AS SITUACAO_ARQUIVO,
RHPBH_ARQUIVO.DATA_CARGA,
RHPBH_ARQUIVO_LINHA.NUMERO_LINHA,
RHPBH_ARQUIVO_LINHA.SITUACAO AS SITUACAO_LINHA,
RHPBH_ARQUIVO_LINHA.LINHA AS LINHA_ORIGINAL,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	1	  ,	10	)	AS	CODIGO_EMPRESA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	11	,	10	)	AS	CODIGO_CONTRATO,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	21	,	10	)	AS	CODIGO_FORNECEDOR,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	31	,	10	)	AS	CODIGO_VERBA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	41	,	15	)	AS	VALOR_VERBA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	56	,	 5	)	AS	CONTADOR,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	61	,	10	)	AS	REFERENCIA_VERBA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	71	,	14	)	AS	DATA_AUTORIZA,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	85	,	 1	)	AS	OPERACAO_IMPORTACAO,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	86	,	 2	)	AS	CODIGO_CONSIG_ERRO ,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	88	,	13	)	AS	NUMERO_GUIA_IPTU,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	101	,	11	)	AS	CPF,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	112	,	14	)	AS	DATA_HORA_LANCAMENTO,
SUBSTR(RHPBH_ARQUIVO_LINHA.LINHA,	126	,	30	)	AS	NUMERO_CARTEIRA
  from RHPBH_ARQUIVO, RHPBH_ARQUIVO_LINHA
 where RHPBH_ARQUIVO.ID_ARQUIVO = RHPBH_ARQUIVO_LINHA.ID_ARQUIVO
   and RHPBH_ARQUIVO.TIPO_ARQUIVO = '0004') VW_ARQUIVO_0004
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;

                --dbms_output.put_line('VW_ARQUIVO_0004 - ' || VCONTADOR || ' REGISTROS.');

                select count(1) into VCONTADOR
                  from RHPBH_PS_DIRF
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;

                --dbms_output.put_line('RHPBH_PS_DIRF - ' || VCONTADOR || ' REGISTROS.');
             EXCEPTION
             WHEN OTHERS THEN
             --dbms_output.put_line('ERRO AO TENTAR INCLUIR RHPBH_PS_DIRF. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
             NULL;
             END;
*/
-- AQUI

-- AQUI NOVO
             BEGIN

                insert into RHPBH_CS(
                ID_ARQUIVO,
                NUMERO_LINHA,
                OPERACAO,
                ANO_MES_REFERENCIA,
                CODIGO_EMPRESA,
                TIPO_CONTRATO,
                CODIGO_CONTRATO,
                CPF_SERVIDOR,
                CPF_BENEFICIARIO,
                ADE_NUMERO,
                NUMERO_CARTEIRA,
                NUMERO_CONTRATO_OPERADORA,
                CNPJ_FORNECEDOR,
                CODIGO_VERBA,
                VALOR_VERBA,
                NUMERO_PARCELAS,
                DATA_SOLICITACAO_INICIAL,
                DATA_AUTORIZACAO_CORRENTE,
                VALOR_DESCONTADO,
                CODIGO_SITUACAO_FUNCIONAL,
                FUNDO_REPASSE
                )
                (
                select ID_ARQUIVO,
                       NUMERO_LINHA,
                       OPERACAO,
                       TRUNC(TO_DATE(PERIODO_REFERENCIA,'DD/MM/YYYY HH24:MI:SS')) AS ANO_MES_REFERENCIA,
                       CODIGO_EMPRESA,
                       PTIPO_CONTRATO AS TIPO_CONTRATO,
                       MATRICULA AS CODIGO_CONTRATO,
                       CPF_SERVIDOR,
                       CPF_BENEFICIARIO,
                        TO_NUMBER(ADE_NUMERO) AS ADE_NUMERO,
                       TRIM(NUMERO_CARTEIRA) AS NUMERO_CARTEIRA,
                       TO_NUMBER(TRIM(NUMERO_CONTRATO_OPERADORA)) AS NUMERO_CONTRATO_OPERADORA,
                       CNPJ_FORNECEDOR,
                       CODIGO_VERBA,
                       TO_NUMBER(VALOR_VERBA)/100 AS VALOR_VERBA,
                       NUMERO_PARCELAS,
                       TRUNC(TO_DATE(DATA_AUTORIZACAO_INICIAL,'DD/MM/YYYY HH24:MI:SS')) AS DATA_AUTORIZACAO_INICIAL,
                       TRUNC(TO_DATE(DATA_AUTORIZACAO_CORRENTE,'DD/MM/YYYY HH24:MI:SS')) AS DATA_AUTORIZACAO_CORRENTE,
                       TO_NUMBER(VALOR_DESCONTADO) AS VALOR_DESCONTADO,
                       CODIGO_SITUACAO_FUNCIONAL,
                       FUNDO_REPASSE
                  from VW_ARQUIVO_0003
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO
                   and SITUACAO_LINHA = '00'
                );
                COMMIT;     




                ----dbms_output.put_line('COMITOU INCLUSAO RHPBH_PS_DIRF');

                               select max(SITUACAO_ARQUIVO) into VCONTADOR
                  from (select * from VW_ARQUIVO_0003)
                 where CODIGO_EMPRESA_ARQUIVO = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;
                --dbms_output.put_line('VW_ARQUIVO_0004 - ' || VCONTADOR || ' REGISTROS.');

                select count(1) into VCONTADOR
                  from RHPBH_CS
                 where CODIGO_EMPRESA = PCODIGO_EMPRESA
                   and ID_ARQUIVO = C1.ID_ARQUIVO;
------------------------------------------------------------------------PAREI AQUI EM 01/04/2019-------------------------------------------------------------------------------------------------
                --dbms_output.put_line('RHPBH_PS_DIRF - ' || VCONTADOR || ' REGISTROS.');
             EXCEPTION
             WHEN OTHERS THEN
             dbms_output.put_line('ERRO AO TENTAR INCLUIR RHPBH_PS_DIRF. ' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
             NULL;
             END;
-- AQUI NOVO
                --dbms_output.put_line('PASSO P3');

            EXCEPTION
            WHEN OTHERS THEN
               --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
               raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DE CONSIGNA!O. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
            END;

            vIDENTIFICADOR_REGRA := '0';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 0
            -- NÂ¿considerar os servidores municipalizados
            --
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CODIGO_CONTRATO IN ('000000000000699', '000000000011399', '000000000011747')
              AND CODIGO_EMPRESA='0001'
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CONTRATO_MUNICIPALIZADO, 'CONTRATO MUNICIPALIZADO = '||R2.CODIGO_CONTRATO);
            end loop;

            vIDENTIFICADOR_REGRA := '1';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 1
            -- Valida operaÂ¿
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and OPERACAO NOT IN('I','A','E')
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_OPERACAO_INVALIDA, 'OPERACAO = '||R2.OPERACAO);
            end loop;

            vIDENTIFICADOR_REGRA := '2';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 2
            -- Valida data inicial menor que data autorizacao corrente
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CS.DATA_SOLICITACAO_INICIAL > CS.DATA_AUTORIZACAO_CORRENTE
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DATA_INICIAL_MENOR_PERMIT, 'DATA_SOLICITACAO_INICIAL = ' || R2.DATA_SOLICITACAO_INICIAL || ';' ||
                                                                                                                                                 'DATA_AUTORIZACAO_CORRENTE = ' || R2.DATA_AUTORIZACAO_CORRENTE
                );
            end loop;

            vIDENTIFICADOR_REGRA := '3';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 3
            -- Valida data inicial com data futura
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CS.DATA_SOLICITACAO_INICIAL > PDATA_CORTE
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DATA_FUTURA, 'ANO_MES_REFERENCIA = ' || PANO_MES_REFERENCIA || ' - ' || ' DATA FUTURA (DATA_SOLICITACAO_INICIAL) = '||R2.DATA_SOLICITACAO_INICIAL || ' - ' || ' DATA DE CORTE = ' || PDATA_CORTE);
            end loop;

            vIDENTIFICADOR_REGRA := '4';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 4
            -- Valida data autorizacao corrente com data futura
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CS.DATA_AUTORIZACAO_CORRENTE > PDATA_CORTE
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DATA_FUTURA, 'ANO_MES_REFERENCIA = ' || PANO_MES_REFERENCIA || ' - ' || ' DATA FUTURA (DATA_AUTORIZACAO_CORRENTE) = '||R2.DATA_AUTORIZACAO_CORRENTE || ' - ' || ' DATA DE CORTE = ' || PDATA_CORTE);
            end loop;

            vIDENTIFICADOR_REGRA := '5';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 5
            -- Valida valor verba menor ou igual a zero
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
             AND CODIGO_EMPRESA NOT IN ('0010')
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and CODIGO_VERBA NOT IN (select CODIGO from RHPBH_PS_VERBAS_PADRAO where NATUREZA_VERBA_PLANO in ('SUBSIDIO','SUBSIDIO_PRO_RATA'))
              and VALOR_VERBA <= 0
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_VALOR_ZERADO, 'VALOR = '||R2.VALOR_VERBA);
            end loop;

            vIDENTIFICADOR_REGRA := '6';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 6
            -- Valida registros duplicados contidos no arquivo
            -- considerando empresa, operaÂ¿, contrato e verba
            for R2 in (
            select * from RHPBH_CS where OPERACAO||CODIGO_EMPRESA||CODIGO_CONTRATO||CODIGO_VERBA in(
            select OPERACAO||CODIGO_EMPRESA||CODIGO_CONTRATO||CODIGO_VERBA
             from RHPBH_CS CS
            where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
            group by OPERACAO||CODIGO_EMPRESA||CODIGO_CONTRATO||CODIGO_VERBA
            having count(1) > 1
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DUPLICIDADE_REGISTRO, 'CODIGO_CONTRATO = '||R2.CODIGO_CONTRATO || ';' ||
                                                                                                                                            'CODIGO_VERBA = '||R2.CODIGO_VERBA || ';' ||
                                                                                                                                            'OPERACAO = '||R2.OPERACAO                                                                                                                                            );
            end loop;

            vIDENTIFICADOR_REGRA := '7';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 7
            -- Valida registros duplicados contidos no arquivo
            -- considerando ade numero
            for R2 in (
            select * from RHPBH_CS where CODIGO_EMPRESA||ADE_NUMERO in(
            select CODIGO_EMPRESA||ADE_NUMERO
             from RHPBH_CS CS
            where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              AND OPERACAO  in('I','A')
            group by CODIGO_EMPRESA||ADE_NUMERO
            having count(1) > 1
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_DUPLICIDADE_ADE_NUMERO, 'CODIGO_CONTRATO = '||R2.CODIGO_CONTRATO || ';' ||
                                                                                                                                              'CODIGO_VERBA = '||R2.CODIGO_VERBA || ';' ||
                                                                                                                                              'ADE_NUMERO = '||R2.ADE_NUMERO
                                                                                                                                            );
            end loop;

            vIDENTIFICADOR_REGRA := '8';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 8
            -- Valida codigo da empresa
            for R2 in (
            select * from RHPBH_CS CS
             where ID_ARQUIVO = C1.ID_ARQUIVO
              and not exists(
            select CODIGO from RHORGA_EMPRESA where CODIGO = CS.CODIGO_EMPRESA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_EMPRESA_INVALIDO, R2.CODIGO_EMPRESA);
            end loop;

            vIDENTIFICADOR_REGRA := '9';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 9
            -- Valida codigo do Contrato
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and CODIGO_CONTRATO NOT IN('000000000000699', '000000000011399', '000000000011747')
               and not exists(
            select CODIGO_CONTRATO from RHPESS_CONTR_MEST
             where CODIGO_EMPRESA = CS.CODIGO_EMPRESA
               and CODIGO_CONTRATO = CS.CODIGO_CONTRATO
               and tipo_contrato=cs.tipo_contrato
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_CONTRATO_INVALIDO, R2.CODIGO_CONTRATO);
            end loop;

            vIDENTIFICADOR_REGRA := '10';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 10
            -- Valida codigo da verba
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and not exists(
            select CODIGO from RHPARM_VERBA where CODIGO = CS.CODIGO_VERBA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_CODIGO_VERBA_INVALIDO,R2.CODIGO_VERBA);
            end loop;


            vIDENTIFICADOR_REGRA := '11';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 11
            --
            for R13 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
              and ID_ARQUIVO = C1.ID_ARQUIVO
              and TO_CHAR(ANO_MES_REFERENCIA, 'YYYYMM') <> TO_CHAR(PANO_MES_REFERENCIA, 'YYYYMM')
            )
            loop
                GRAVA_LOG(R13.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R13.ID_ARQUIVO, R13.NUMERO_LINHA, LOG_ANO_MES_REF_NAO_RELAC,R13.ANO_MES_REFERENCIA);
            end loop;

            vIDENTIFICADOR_REGRA := '12';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 12
            --
            for R13 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and TO_CHAR(ANO_MES_REFERENCIA,'DD') <> '01'
            )
            loop
                --REGISTRA_LOG(TIPO_LOG_ERRO, R13.NUMERO_LINHA, 'R13 - DATA INVALIDA. DIA DEVE SER O PRIMEIRO DIA DO MES.', null);
                GRAVA_LOG(R13.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R13.ID_ARQUIVO, R13.NUMERO_LINHA, LOG_ANO_MES_REF_INVALIDO,R13.ANO_MES_REFERENCIA || '. DEVE CONSIDERAR O PRIMEIRO DIA DO MES.');
            end loop;


            -- Regra 14
            -- Valida codigo da verba
            for R2 in (
            select * from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and OPERACAO = 'A'
               and not exists(
                  select RHPARM_IT_ARQ_DEF.CODIGO_VERBA from RHPARM_ARQ, RHPARM_ARQ_DEF, RHPARM_IT_ARQ_DEF
                   where RHPARM_ARQ.CODIGO = RHPARM_ARQ_DEF.CODIGO
                     and RHPARM_ARQ_DEF.CODIGO = RHPARM_IT_ARQ_DEF.CODIGO
                     and RHPARM_ARQ_DEF.CODIGO_GRUPO = RHPARM_IT_ARQ_DEF.CODIGO_GRUPO
                     and RHPARM_ARQ_DEF.CODIGO = 'CS00'
                     and RHPARM_ARQ_DEF.CODIGO_GRUPO = '01'
                     and  RHPARM_IT_ARQ_DEF.CODIGO_VERBA = CS.CODIGO_VERBA
            )
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_VERBA_NAO_PERMITE_ALTERAR,R2.CODIGO_VERBA);
            end loop;


            vIDENTIFICADOR_REGRA := '14';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');

            -- Regra 15
            -- Valida codigo da verba TITULAR OU DEPENDENTE
            for R2 in ( SELECT X.* FROM (select CS.NUMERO_LINHA,cs.id_arquivo, 
 CS.CODIGO_EMPRESA,CS.TIPO_CONTRATO,CS.CODIGO_CONTRATO,CS.CPF_SERVIDOR,CS.CPF_BENEFICIARIO, CASE WHEN CS.CPF_SERVIDOR=CS.CPF_BENEFICIARIO THEN'TITULAR' ELSE 'DEPENDENTE' END AS CLASSIFICA,CS.CODIGO_VERBA 
 from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and OPERACAO IN('I', 'A')
                AND EXISTS (SELECT * FROM ARTERH.rhpbh_ps_verbas_padrao PS  WHERE PS.CODIGO=CS.CODIGO_VERBA)
               )x
               WHERE NOT EXISTS(SELECT * FROM  ARTERH.rhpbh_ps_verbas_padrao PS 
               WHERE UPPER(TRIM(PS.TIPO_BENEFICIARIO))=UPPER(TRIM(X.CLASSIFICA))
               AND TRIM(PS.CODIGO)=X.CODIGO_VERBA)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_PS_VERBA_NAO_CONFERE,R2.CODIGO_VERBA);
            end loop;
            vIDENTIFICADOR_REGRA := '15';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');


             -- Regra 16
            -- Valida NUMERO DE CONTRATO 
            for R2 in ( SELECT X.* FROM (select CS.NUMERO_LINHA,cs.id_arquivo, 
 CS.CODIGO_EMPRESA,CS.TIPO_CONTRATO,CS.CODIGO_CONTRATO,CS.CPF_SERVIDOR,CS.CPF_BENEFICIARIO, CS.numero_contrato_operadora
 from RHPBH_CS CS
             where CODIGO_EMPRESA = PCODIGO_EMPRESA
               and ID_ARQUIVO = C1.ID_ARQUIVO
               and OPERACAO IN('I', 'A')
                AND EXISTS (SELECT * FROM ARTERH.rhpbh_ps_verbas_padrao PS  WHERE PS.CODIGO=CS.CODIGO_VERBA)
               )x
               WHERE NOT EXISTS(SELECT regexp_substr(REPLACE(dado_origem,';;','; ;'), '[^;]+', 1, 1) AS CODDIGO_EMPRESA,
LTRIM(regexp_substr(REPLACE(dado_origem,';;','; ;'), '[^;]+', 1, 2),0) AS NUMERO_CONTRATO
FROM ARTERH.RHINTE_ED_IT_CONV  WHERE codigo_conversao='PS09'
AND LTRIM(regexp_substr(REPLACE(dado_origem,';;','; ;'), '[^;]+', 1, 2),0) =X.numero_contrato_operadora
AND regexp_substr(REPLACE(dado_origem,';;','; ;'), '[^;]+', 1, 1)=X.CODIGO_EMPRESA
)
            )
            loop
                GRAVA_LOG(R2.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, R2.ID_ARQUIVO, R2.NUMERO_LINHA, LOG_PS_NRO_CONTRATO_NAO_CONFERE,R2.numero_contrato_operadora);
            end loop;
            vIDENTIFICADOR_REGRA := '16';
            GRAVA_LOG(PCODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_PROCESSAMENTO, PID_ARQUIVO, 0, CODIGO_LOG_PROCESSAMENTO_50, 'APLICACAO REGRA ' || vIDENTIFICADOR_REGRA || '.');



            PR_SET_SITUACAO_PROCESSAMENTO('05');
            PR_CONTROLE_PROCESSAMENTO(C1.CODIGO_EMPRESA, C1.ID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

         end loop;

         commit;
         -- Atualizar a situacao dos registros
         --PR_ATUALIZAR_SITUACAO_REGISTR0;

    EXCEPTION
    WHEN OTHERS THEN
       ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
       raise_application_error (-20002,'NAO FOI POSSIVEL REALIZAR O PROCESSAMENTO DE MOVIMENTO DE CONSIGNACAO. ENTRE EM CONTATO COM A EQUIPE DE SUPORTE DA PBH.' || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

END IF; -- FIM PACAO = 2

IF PACAO in (2, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('04');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
    ----dbms_output.put_line('PROCESSAMENTO INCLUSAO INICIADO.');
    -- Constantes
   -- C_TIPO_CONTRATO := '0001';
    C_TIPO_CONTRATO   := PTIPO_CONTRATO;
    C_MES_INCIDENCIA := to_CHAR(pano_mes_referencia, 'MM');
    C_CONSIDERA_DIRF := 'S';
    C_CONTROLE_LANCAMENTO := '0';
    C_LOGIN_USUARIO := 'IMPORT';
    C_C_LIVRE_SELEC01 := 0;
    C_C_LIVRE_VALOR01 := 0;
    C_C_LIVRE_OPCAO01 := 'N';
    C_REF_VERBA := 0;
    C_ID_CLIENTE := 0;
    FOR C_INC in(

        select CS.*, CASE WHEN CS.CODIGO_CONTRATO MEMBER LISTA_MUNICIPALIZADOS THEN 'S' ELSE 'N' END AS MUNICIPALIZADO
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
           --and CS.CPF = '13258898650'
         order by CS.NUMERO_LINHA
    )
    loop

    -- CNPJ do Fornecedor deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CNPJ_FORNECEDOR);

    IF NOT vCPF_VALIDO THEN
       -- CNPJ invalido
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_INVALIDO, C_INC.CNPJ_FORNECEDOR);
    ELSE

    NULL;

      -- CNPJ valido. Verifica se existe
      BEGIN
           VCPF_EXISTENTE := 0;
            select count(1)
              into VCPF_EXISTENTE
              from RHORGA_FORNECEDOR
             where CGC_CPF = C_INC.CNPJ_FORNECEDOR;

           IF VCPF_EXISTENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_NAO_ENCONTRADO,C_INC.CNPJ_FORNECEDOR);
           END IF;
      EXCEPTION
      WHEN OTHERS THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CNPJ_NAO_ENCONTRADO,C_INC.CNPJ_FORNECEDOR);
      END;

      -- CNPJ valido. Verifica se existe associaÂ¿ do fornecedor com a verba
      IF C_INC.CODIGO_VERBA NOT MEMBER (LISTA_VERBAS_SUBSIDIO) THEN
          BEGIN
               VCPF_EXISTENTE := 0;

                select count(1)
                  into VCPF_EXISTENTE
                  from RHORGA_FORNECEDOR, RHORGA_FORN_VERBA
                 where RHORGA_FORNECEDOR.CODIGO = RHORGA_FORN_VERBA.CODIGO_FORNECEDOR
                   and RHORGA_FORNECEDOR.CGC_CPF = C_INC.CNPJ_FORNECEDOR
                   and RHORGA_FORN_VERBA.CODIGO_VERBA = C_INC.CODIGO_VERBA;

               IF VCPF_EXISTENTE = 0 THEN
                  GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CODIGO_VERBA_NAO_CONFORME,'FORNECEDOR = ' || C_INC.CNPJ_FORNECEDOR || ' E VERBA = ' || C_INC.CODIGO_VERBA || ' NAO ASSOCIADOS.' );
               END IF;
          EXCEPTION
          WHEN OTHERS THEN
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CODIGO_VERBA_NAO_CONFORME,' ERRO AO VERIFICAR ASSOCIACAO VERBA E FORNECEDOR. FORNECEDOR = ' || C_INC.CNPJ_FORNECEDOR || ' E VERBA = ' || C_INC.CODIGO_VERBA );
          END;
      END IF;

    END IF;

    -- CPF do Servidor deve ser valido
    vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CPF_SERVIDOR);

    IF NOT vCPF_VALIDO THEN
       --raise_application_error (-20003,'CPF INVALIDO - ' || REGISTRO_BENEFICIARIO.CPF);
       --GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'CPF INVALIDO', REGISTRO_BENEFICIARIO.CPF);
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_INVALIDO, C_INC.CPF_SERVIDOR);
    ELSE

    NULL;

      BEGIN
           VCPF_EXISTENTE := 0;
            select count(1)
              into VCPF_EXISTENTE
              from RHPESS_PESSOA
             where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
               and CPF = C_INC.CPF_SERVIDOR
               AND DT_TERMINO IS NULL;

           IF VCPF_EXISTENTE = 0 THEN
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF_SERVIDOR);
           END IF;
      EXCEPTION
      WHEN OTHERS THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF_SERVIDOR);
      END;

    END IF;

    -- CPF do BeneficiÂ¿o deve ser valido
    IF TRIM(C_INC.CPF_BENEFICIARIO) IS NOT NULL THEN
        vCPF_VALIDO:= VALIDA_CPF_CNPJ(C_INC.CPF_BENEFICIARIO);

        IF NOT vCPF_VALIDO THEN
           --raise_application_error (-20003,'CPF INVALIDO - ' || REGISTRO_BENEFICIARIO.CPF);
           --GRAVA_LOG(TIPO_LOG_ERRO, Numero_linha, 'CPF INVALIDO', REGISTRO_BENEFICIARIO.CPF);
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_INVALIDO, C_INC.CPF_BENEFICIARIO);
        ELSE

        NULL;
                                                  ------possivel falha aqui no cadastro de registros duplicados------------------------------------
          BEGIN
               VCPF_EXISTENTE := 0;
                select count(1)
                  into VCPF_EXISTENTE
                  from RHPESS_PESSOA
                 where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                   and CPF = C_INC.CPF_BENEFICIARIO
                   AND DT_TERMINO IS NULL;

               IF VCPF_EXISTENTE = 0 THEN
                  GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF_BENEFICIARIO);
               END IF;
          EXCEPTION
          WHEN OTHERS THEN
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CPF_NAO_ENCONTRADO,C_INC.CPF_BENEFICIARIO);
          END;

        END IF;
    END IF;
    /*
    VCPF_TITULAR := null;
    BEGIN
         select LPAD(RHPESS_PESSOA.CPF,11,'0') into VCPF_TITULAR
           from RHPESS_CONTRATO, RHPESS_PESSOA
          where RHPESS_CONTRATO.CODIGO_EMPRESA = RHPESS_PESSOA.CODIGO_EMPRESA
            and RHPESS_CONTRATO.CODIGO_PESSOA = RHPESS_PESSOA.CODIGO
            and RHPESS_CONTRATO.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
            and RHPESS_CONTRATO.CODIGO = C_INC.CODIGO_CONTRATO
            and RHPESS_CONTRATO.ANO_MES_REFERENCIA = (
                select max(ANO_MES_REFERENCIA)
                  from RHPESS_CONTRATO AUX
                 where AUX.CODIGO_EMPRESA = RHPESS_CONTRATO.CODIGO_EMPRESA
                   and AUX.TIPO_CONTRATO = RHPESS_CONTRATO.TIPO_CONTRATO
                   and AUX.CODIGO = RHPESS_CONTRATO.CODIGO
                   and AUX.ANO_MES_REFERENCIA <= PANO_MES_REFERENCIA
            );
    EXCEPTION
    WHEN OTHERS THEN
    VCPF_TITULAR := null;
    END;
*/
    V_DETALHE_0001 := 'codigo_empresa = ' || C_INC.CODIGO_EMPRESA || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = ' || C_INC.CPF_SERVIDOR || ';' ||
                      'codigo_verba = ' || C_INC.CODIGO_VERBA || ';' ||
                      'data_solicitacao = ' || C_INC.DATA_SOLICITACAO_INICIAL;

    V_DETALHE_0002 := 'codigo_empresa = ' || C_INC.CODIGO_EMPRESA || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf = ' || C_INC.CPF_SERVIDOR || ';' ||
                      'codigo_verba = ' || C_INC.CODIGO_VERBA || ';' ||
                      'data_solicitacao = ' || C_INC.DATA_SOLICITACAO_INICIAL;

    IF C_INC.MUNICIPALIZADO = 'N' THEN
       -- Recuperacao da solicitacao de movimento
     begin
         -- Tenta recuperar sol movi com mesma data de solicitaÂ¿
         select DATA_SOLICITACAO,
                DATA_INI_VIGENCIA,
                DATA_FIM_VIGENCIA
           into vSOL_MOVI_DATA_SOLICITACAO,
                vSOL_MOVI_DATA_INI_VIGENCIA,
                vSOL_MOVI_DATA_FIM_VIGENCIA
           from RHMOVI_SOL_MOVI
          where RHMOVI_SOL_MOVI.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
            and RHMOVI_SOL_MOVI.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
            and RHMOVI_SOL_MOVI.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
            and RHMOVI_SOL_MOVI.TIPO_MOVIMENTO = 'CS'
            and RHMOVI_SOL_MOVI.DATA_AUTORIZA IS NOT NULL
            and RHMOVI_SOL_MOVI.DATA_INI_VIGENCIA <= C_INC.ANO_MES_REFERENCIA
            and (RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA IS NULL or RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA >= C_INC.ANO_MES_REFERENCIA)
            and RHMOVI_SOL_MOVI.CODIGO_VERBA = C_INC.CODIGO_VERBA
            and RHMOVI_SOL_MOVI.DATA_SOLICITACAO = C_INC.DATA_SOLICITACAO_INICIAL;

      exception
      WHEN NO_DATA_FOUND then
         -- Tenta recuperar sol movi com outra data de solicitaÂ¿
         begin
         select DATA_SOLICITACAO,
                DATA_INI_VIGENCIA,
                DATA_FIM_VIGENCIA
           into vSOL_MOVI_DATA_SOLICITACAO,
                vSOL_MOVI_DATA_INI_VIGENCIA,
                vSOL_MOVI_DATA_FIM_VIGENCIA
           from RHMOVI_SOL_MOVI
          where RHMOVI_SOL_MOVI.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
            and RHMOVI_SOL_MOVI.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
            and RHMOVI_SOL_MOVI.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
            and RHMOVI_SOL_MOVI.TIPO_MOVIMENTO = 'CS'
            and RHMOVI_SOL_MOVI.DATA_AUTORIZA IS NOT NULL
            and RHMOVI_SOL_MOVI.DATA_INI_VIGENCIA <= C_INC.ANO_MES_REFERENCIA
            and (RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA IS NULL or RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA >= C_INC.ANO_MES_REFERENCIA)
            and RHMOVI_SOL_MOVI.CODIGO_VERBA = C_INC.CODIGO_VERBA;

          exception
          WHEN NO_DATA_FOUND then
             -- Tenta encontrar sol movi jÂ¿ncerrada
             begin
             select DATA_SOLICITACAO,
                    DATA_INI_VIGENCIA,
                    DATA_FIM_VIGENCIA
               into vSOL_MOVI_DATA_SOLICITACAO,
                    vSOL_MOVI_DATA_INI_VIGENCIA,
                    vSOL_MOVI_DATA_FIM_VIGENCIA
               from RHMOVI_SOL_MOVI
              where RHMOVI_SOL_MOVI.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
                and RHMOVI_SOL_MOVI.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
                and RHMOVI_SOL_MOVI.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
                and RHMOVI_SOL_MOVI.TIPO_MOVIMENTO = 'CS'
                and RHMOVI_SOL_MOVI.DATA_AUTORIZA IS NOT NULL
                and RHMOVI_SOL_MOVI.DATA_INI_VIGENCIA <= C_INC.ANO_MES_REFERENCIA
                and (RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA IS NOT NULL and RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA <= C_INC.ANO_MES_REFERENCIA)
                and RHMOVI_SOL_MOVI.CODIGO_VERBA = C_INC.CODIGO_VERBA
                and RHMOVI_SOL_MOVI.DATA_INI_VIGENCIA = (
                 select max(DATA_INI_VIGENCIA)
                   from RHMOVI_SOL_MOVI AUX
                  where AUX.CODIGO_EMPRESA = RHMOVI_SOL_MOVI.CODIGO_EMPRESA
                    and AUX.TIPO_CONTRATO = RHMOVI_SOL_MOVI.TIPO_CONTRATO
                    and AUX.CODIGO_CONTRATO = RHMOVI_SOL_MOVI.CODIGO_CONTRATO
                    and AUX.TIPO_MOVIMENTO = RHMOVI_SOL_MOVI.TIPO_MOVIMENTO
                    and AUX.DATA_AUTORIZA IS NOT NULL
                    and AUX.CODIGO_VERBA = RHMOVI_SOL_MOVI.CODIGO_VERBA
                    and AUX.DATA_INI_VIGENCIA <= C_INC.ANO_MES_REFERENCIA
                    and (RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA IS NOT NULL and RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA <= C_INC.ANO_MES_REFERENCIA)
                )
                and RHMOVI_SOL_MOVI.OCORRENCIA = (
                 select max(OCORRENCIA)
                   from RHMOVI_SOL_MOVI AUX
                  where AUX.CODIGO_EMPRESA = RHMOVI_SOL_MOVI.CODIGO_EMPRESA
                    and AUX.TIPO_CONTRATO = RHMOVI_SOL_MOVI.TIPO_CONTRATO
                    and AUX.CODIGO_CONTRATO = RHMOVI_SOL_MOVI.CODIGO_CONTRATO
                    and AUX.TIPO_MOVIMENTO = RHMOVI_SOL_MOVI.TIPO_MOVIMENTO
                    and AUX.DATA_AUTORIZA IS NOT NULL
                    and AUX.CODIGO_VERBA = RHMOVI_SOL_MOVI.CODIGO_VERBA
                    and AUX.DATA_INI_VIGENCIA <= C_INC.ANO_MES_REFERENCIA
                    and (RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA IS NOT NULL and RHMOVI_SOL_MOVI.DATA_FIM_VIGENCIA <= C_INC.ANO_MES_REFERENCIA)
                );

              exception
              WHEN NO_DATA_FOUND then
                   vSOL_MOVI_DATA_SOLICITACAO := null;
                   vSOL_MOVI_DATA_INI_VIGENCIA := null;
                   vSOL_MOVI_DATA_FIM_VIGENCIA := null;
                   --GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_NAO_ENCONTRADA,V_DETALHE_0001);
              WHEN TOO_MANY_ROWS then
                   vSOL_MOVI_DATA_SOLICITACAO := null;
                   vSOL_MOVI_DATA_INI_VIGENCIA := null;
                   vSOL_MOVI_DATA_FIM_VIGENCIA := null;
                   GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_DUPLICADA,V_DETALHE_0001);
              when others then
                   vSOL_MOVI_DATA_SOLICITACAO := null;
                   vSOL_MOVI_DATA_INI_VIGENCIA := null;
                   vSOL_MOVI_DATA_FIM_VIGENCIA := null;
                   GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_ERRO_RECUPERACAO,V_DETALHE_0001 || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              end;
          WHEN TOO_MANY_ROWS then
               vSOL_MOVI_DATA_SOLICITACAO := null;
               vSOL_MOVI_DATA_INI_VIGENCIA := null;
               vSOL_MOVI_DATA_FIM_VIGENCIA := null;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_DUPLICADA,V_DETALHE_0001);
          when others then
               vSOL_MOVI_DATA_SOLICITACAO := null;
               vSOL_MOVI_DATA_INI_VIGENCIA := null;
               vSOL_MOVI_DATA_FIM_VIGENCIA := null;
               GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_ERRO_RECUPERACAO,V_DETALHE_0001 || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
          end;

      WHEN TOO_MANY_ROWS then
           vSOL_MOVI_DATA_SOLICITACAO := null;
           vSOL_MOVI_DATA_INI_VIGENCIA := null;
           vSOL_MOVI_DATA_FIM_VIGENCIA := null;
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_DUPLICADA,V_DETALHE_0001);
      when others then
           vSOL_MOVI_DATA_SOLICITACAO := null;
           vSOL_MOVI_DATA_INI_VIGENCIA := null;
           vSOL_MOVI_DATA_FIM_VIGENCIA := null;
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_ERRO_RECUPERACAO,V_DETALHE_0001 || 'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      end;

    -- Se operaÂ¿ for de inclusÂ¿e jÂ¿xistir solicitaÂ¿ de movimento vigente
    IF (C_INC.OPERACAO = 'I' AND vSOL_MOVI_DATA_SOLICITACAO IS NOT NULL AND (vSOL_MOVI_DATA_FIM_VIGENCIA IS NULL OR vSOL_MOVI_DATA_FIM_VIGENCIA >= PANO_MES_REFERENCIA)) THEN

       vQTDE_REG_EXCLUSAO_INCLUSAO := 0;
       BEGIN
       select COUNT(1)
         into vQTDE_REG_EXCLUSAO_INCLUSAO
         from RHPBH_CS AUX
        where AUX.ID_ARQUIVO = C_INC.ID_ARQUIVO
          and AUX.NUMERO_LINHA <> C_INC.NUMERO_LINHA
          and AUX.OPERACAO <> C_INC.OPERACAO
          and AUX.OPERACAO = 'E'
          and AUX.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
          and AUX.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
          and AUX.CODIGO_VERBA = C_INC.CODIGO_VERBA;

       EXCEPTION
       WHEN OTHERS THEN
            vQTDE_REG_EXCLUSAO_INCLUSAO := 0;
       END;

       IF vQTDE_REG_EXCLUSAO_INCLUSAO = 0 THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_JA_EXISTENTE,V_DETALHE_0001);
       END IF;

    END IF;

    -- Se operaÂ¿ for de alteraÂ¿ ou exclusÂ¿e nÂ¿existir solicitaÂ¿ de movimento
    IF C_INC.OPERACAO in ('A','E') AND vSOL_MOVI_DATA_SOLICITACAO IS NULL THEN
       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_NAO_ENCONTRADA,V_DETALHE_0001);
    ELSIF C_INC.OPERACAO in ('A','E') AND vSOL_MOVI_DATA_SOLICITACAO IS NOT NULL THEN

        -- Se operaÂ¿ for de alteraÂ¿ ou exclusÂ¿e existir solicitaÂ¿ de movimento
        -- e esta tiver data de solicitaÂ¿ diferente
        IF vSOL_MOVI_DATA_SOLICITACAO <> C_INC.DATA_SOLICITACAO_INICIAL THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_OUTRA_DATA_SOLIC,V_DETALHE_0001 || ' - DATA_SOLICITACAO INFORMADA = ' || C_INC.DATA_SOLICITACAO_INICIAL || ' - DATA_SOLICITACAO RECUPERADA = ' || vSOL_MOVI_DATA_SOLICITACAO);
        END IF;

        -- Se operaÂ¿ for de alteraÂ¿ ou exclusÂ¿e existir solicitaÂ¿ de movimento
        -- e esta jÂ¿stiver com vigÂ¿ia encerrada
        IF vSOL_MOVI_DATA_FIM_VIGENCIA IS NOT NULL and vSOL_MOVI_DATA_FIM_VIGENCIA < PANO_MES_REFERENCIA THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_NAO_VIGENTE,V_DETALHE_0001 || ' - DATA_FIM_VIGENCIA RECUPERADA = ' || vSOL_MOVI_DATA_FIM_VIGENCIA);
        END IF;

        -- Se operaÂ¿ for de alteraÂ¿ ou exclusÂ¿e existir solicitaÂ¿ de movimento
        -- e esta estiver com vigÂ¿ia maior ou igual Â¿NO_MES_REFERENCIA
        IF vSOL_MOVI_DATA_INI_VIGENCIA >= PANO_MES_REFERENCIA THEN
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SOL_MOVI_NAO_VIGENTE,V_DETALHE_0001 || ' - DATA_INI_VIGENCIA RECUPERADA = ' || vSOL_MOVI_DATA_INI_VIGENCIA);
        END IF;
    END IF;

    END IF;

    IF MOD(vCONTADOR,1000) = 0 THEN
       COMMIT;
    END IF;

    vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;


    vCONTADOR := 0;

    -- Recupera e atualiza cÂ¿o do fornecedor
    begin
        update RHPBH_CS CS
           set CODIGO_FORNECEDOR = (
               select CODIGO from RHORGA_FORNECEDOR
                where RHORGA_FORNECEDOR.CGC_CPF = CS.CNPJ_FORNECEDOR
                and DATA_EXTINCAO is null
           )
           where CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
             and CS.ID_ARQUIVO = PID_ARQUIVO
             and CS.CNPJ_FORNECEDOR IS NOT NULL

             ;
    exception
    when others then
         null;
    end;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, 'POS ATUALIZACAO FORNECEDOR');

    -- Atualizar a situacao dos registros
    PR_ATUALIZAR_SITUACAO_REGISTR0;

    PR_SET_SITUACAO_PROCESSAMENTO('05');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;

IF PACAO in (2, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('04');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    --VALIDACOES PLANO DE SAUDE

    vCONTADOR := 0;

    -- Recupera e atualiza remuneraÂ¿ base de plano de saÃºde e
    -- a informaÂ¿ que indica se possui beneficio referente Â¿lano mÂ¿co e/ou plano odonto
    FOR C_INC in(

        select CS.ANO_MES_REFERENCIA, CS.CODIGO_EMPRESA, CS.TIPO_CONTRATO, CS.CODIGO_CONTRATO, CS.CPF_BENEFICIARIO
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
           and CS.CODIGO_VERBA in (select CODIGO from RHPBH_PS_VERBAS_PADRAO)
           and TRIM(CS.CPF_BENEFICIARIO) IS NOT NULL
         group by CS.ANO_MES_REFERENCIA, CS.CODIGO_EMPRESA, CS.TIPO_CONTRATO, CS.CODIGO_CONTRATO, CS.CPF_BENEFICIARIO
    )
    loop

        begin

            select CASE WHEN POSSUI_ASSISTENCIA_MEDICA = 1 and POSSUI_ASSISTENCIA_ODONTO = 1 THEN 'MO'
                        WHEN POSSUI_ASSISTENCIA_MEDICA = 1 and POSSUI_ASSISTENCIA_ODONTO = 0 THEN 'ME'
                        WHEN POSSUI_ASSISTENCIA_MEDICA = 0 and POSSUI_ASSISTENCIA_ODONTO = 1 THEN 'OD'
                        ELSE null
                   END AS TIPO_BENEFICIO_QUE_POSSUI
                   into vTIPO_BENEFICIO
              from(
            select CODIGO_EMPRESA, TIPO_CONTRATO, CODIGO_CONTRATO, CPF,
                   max(DECODE(COD_TIPO_BENEFICIO, '0005', '1', 0)) AS POSSUI_ASSISTENCIA_MEDICA,
                   max(DECODE(COD_TIPO_BENEFICIO, '0006', '1', 0)) AS POSSUI_ASSISTENCIA_ODONTO
              from(
            select CONC.CODIGO_EMPRESA, CONC.TIPO_CONTRATO, CONC.CODIGO_CONTRATO, PESS.CPF, BENF.COD_TIPO_BENEFICIO
              from RHBENF_CONCESSOES CONC,
                   RHPESS_PESSOA PESS,
                   RHBENF_BENEFICIO BENF
             where CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
               and CONC.CODIGO_BENEFIC = PESS.CODIGO
               and CONC.CODIGO_BENEFICIO = BENF.CODIGO
               and BENF.COD_TIPO_BENEFICIO in ('0005','0006')
               and PESS.CPF = C_INC.CPF_BENEFICIARIO
               and CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
               and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
               and CONC.CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
               and DATA_CONCESSAO <= PANO_MES_REFERENCIA
               AND PESS.DT_TERMINO IS NULL
               and (DATA_CANCELAMENTO IS NULL OR DATA_CANCELAMENTO >= ADD_MONTHS(PANO_MES_REFERENCIA,-1))
             group by CONC.CODIGO_EMPRESA, CONC.TIPO_CONTRATO, CONC.CODIGO_CONTRATO, PESS.CPF, BENF.COD_TIPO_BENEFICIO
            ) group by CODIGO_EMPRESA, TIPO_CONTRATO, CODIGO_CONTRATO, CPF
            );

        exception
        when NO_DATA_FOUND then
             vTIPO_BENEFICIO := null;
        when TOO_MANY_ROWS then
             vTIPO_BENEFICIO := 'M1';
        when others then
             vTIPO_BENEFICIO := 'OT';
        end;

        update RHPBH_CS set RHPBH_CS.TIPO_BENEFICIO_QUE_POSSUI = vTIPO_BENEFICIO
         where CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
           and TIPO_CONTRATO = C_INC.TIPO_CONTRATO
           and CODIGO_CONTRATO = C_INC.CODIGO_CONTRATO
           and CPF_BENEFICIARIO = C_INC.CPF_BENEFICIARIO;



        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, 'POS ATUALIZACAO TIPO BENEFICIO QUE POSSUI');

    LISTA_SERVIDORES_VERBAS_PS := LISTA();

    for c1 in(
        select CS.CODIGO_CONTRATO
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
           and CS.CODIGO_VERBA in (select CODIGO from RHPBH_PS_VERBAS_PADRAO)
           and TRIM(CS.CPF_BENEFICIARIO) IS NOT NULL
         group by CS.CODIGO_CONTRATO
    )
    loop
        LISTA_SERVIDORES_VERBAS_PS.EXTEND;
        LISTA_SERVIDORES_VERBAS_PS(LISTA_SERVIDORES_VERBAS_PS.LAST) := C1.CODIGO_CONTRATO;
    end loop;


    vCONTADOR := 0;
    for i in 1..LISTA_SERVIDORES_VERBAS_PS.count()
    loop

    -- Recupera e atualiza remuneraÂ¿ base de plano de saÃºde
        dbms_output.put_line(LISTA_SERVIDORES_VERBAS_PS(i));
        begin

       select VALOR_VERBA
         into vVALOR_REMUNERACAO_BASE_PS
         from RHMOVI_MOVIMENTO
        where RHMOVI_MOVIMENTO.CODIGO_EMPRESA = PCODIGO_EMPRESA
          and RHMOVI_MOVIMENTO.TIPO_CONTRATO = PTIPO_CONTRATO
          and RHMOVI_MOVIMENTO.CODIGO_CONTRATO = LISTA_SERVIDORES_VERBAS_PS(i)
          and RHMOVI_MOVIMENTO.ANO_MES_REFERENCIA = ADD_MONTHS(PANO_MES_REFERENCIA,-1)
          and RHMOVI_MOVIMENTO.MES_INCIDENCIA = TO_CHAR(ANO_MES_REFERENCIA,'MM')
          and RHMOVI_MOVIMENTO.CODIGO_VERBA = '34P1'
          and RHMOVI_MOVIMENTO.TIPO_MOVIMENTO = 'ME'
          and RHMOVI_MOVIMENTO.MODO_OPERACAO = 'R'
          and RHMOVI_MOVIMENTO.FASE = '0';

          dbms_output.put_line('ENCONTROU');
        exception
        when NO_DATA_FOUND then

              begin

             select VALOR_VERBA
               into vVALOR_REMUNERACAO_BASE_PS
               from RHMOVI_MOVIMENTO
              where RHMOVI_MOVIMENTO.CODIGO_EMPRESA = PCODIGO_EMPRESA
                and RHMOVI_MOVIMENTO.TIPO_CONTRATO = PTIPO_CONTRATO
                and RHMOVI_MOVIMENTO.CODIGO_CONTRATO = LISTA_SERVIDORES_VERBAS_PS(i)
                and RHMOVI_MOVIMENTO.ANO_MES_REFERENCIA = ADD_MONTHS(PANO_MES_REFERENCIA,-1)
                and RHMOVI_MOVIMENTO.MES_INCIDENCIA = TO_CHAR(ANO_MES_REFERENCIA,'MM')
                and RHMOVI_MOVIMENTO.CODIGO_VERBA = '34P1'
                and RHMOVI_MOVIMENTO.TIPO_MOVIMENTO = 'ME'
                and RHMOVI_MOVIMENTO.MODO_OPERACAO = 'R'
                and RHMOVI_MOVIMENTO.FASE = '0'
                and RHMOVI_MOVIMENTO.ANO_MES_REFERENCIA = (
                    select max(ANO_MES_REFERENCIA)
                      from RHMOVI_MOVIMENTO AUX
                     where AUX.CODIGO_EMPRESA = RHMOVI_MOVIMENTO.CODIGO_EMPRESA
                       and AUX.TIPO_CONTRATO = RHMOVI_MOVIMENTO.TIPO_CONTRATO
                       and AUX.CODIGO_CONTRATO = RHMOVI_MOVIMENTO.CODIGO_CONTRATO
                       and AUX.CODIGO_VERBA = RHMOVI_MOVIMENTO.CODIGO_VERBA
                       and AUX.TIPO_MOVIMENTO = RHMOVI_MOVIMENTO.TIPO_MOVIMENTO
                       and AUX.MODO_OPERACAO = RHMOVI_MOVIMENTO.MODO_OPERACAO
                );

                dbms_output.put_line('ENCONTROU DEPOIS');

              exception
              when NO_DATA_FOUND then
                   vVALOR_REMUNERACAO_BASE_PS := null;
              when others then
                   vVALOR_REMUNERACAO_BASE_PS := null;
              end;
        when others then
             vVALOR_REMUNERACAO_BASE_PS := null;
        end;

        update RHPBH_CS set RHPBH_CS.REMUNERACAO_BASE_PS = vVALOR_REMUNERACAO_BASE_PS
         where CODIGO_EMPRESA = PCODIGO_EMPRESA
           and TIPO_CONTRATO = PTIPO_CONTRATO
           and CODIGO_CONTRATO = LISTA_SERVIDORES_VERBAS_PS(i)
           and ID_ARQUIVO = PID_ARQUIVO;

        dbms_output.put_line('ATUALIZOU ' || SQL%ROWCOUNT);

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;

    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO, 'POS ATUALIZACAO REMUNERACAO BASE PS');


    vCONTADOR := 0;
    FOR C_INC in(

        select CS.*
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = '00'
           and CS.CODIGO_VERBA in (select CODIGO from RHPBH_PS_VERBAS_PADRAO)
         order by CS.NUMERO_LINHA
    )
    loop

    V_DETALHE_0001 := 'codigo_empresa = ' || C_INC.CODIGO_EMPRESA || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf_beneficiario = ' || C_INC.CPF_BENEFICIARIO || ';' ||
                      'numero_carteira = ' || C_INC.NUMERO_CARTEIRA;

    V_DETALHE_0002 := 'codigo_empresa = ' || C_INC.CODIGO_EMPRESA || ';' ||
                      'codigo_contrato = ' || C_INC.CODIGO_CONTRATO || ';' ||
                      'cpf_beneficiario = ' || C_INC.CPF_BENEFICIARIO || ';' ||
                      'numero_carteira = ' || C_INC.NUMERO_CARTEIRA;

     -- Recuperacao da concessao de beneficio
     begin

     select CONC.CODIGO_BENEFIC,
            PESS.CPF,
            PESS.DATA_NASCIMENTO,
            CONC.CODIGO_CONTRATO,
            CONC.CODIGO_BENEFICIO,
            CONC.DATA_CONCESSAO,
            CONC.DATA_CANCELAMENTO,
            CONC.C_LIVRE_DESCR08,
            CONC.CATEGORIA_BENEF
       into vCONC_CODIGO_BENEFICIARIO,
            vCONC_CPF_BENEFICIARIO,
            vCONC_DATA_NASC_BENEFICIARIO,
            vCONC_CODIGO_CONTRATO,
            vCONC_CODIGO_BENEFICIO,
            vCONC_DATA_CONCESSAO,
            vCONC_DATA_CANCELAMENTO,
            vCONC_NUMERO_CARTEIRA,
            vCONC_CATEGORIA_BENEFICIARIO
      from RHBENF_CONCESSOES CONC, RHBENF_BENEFICIO BENF, RHPESS_PESSOA PESS
     where CONC.CODIGO_EMPRESA = C_INC.CODIGO_EMPRESA
       and CONC.TIPO_CONTRATO = C_INC.TIPO_CONTRATO
       and CONC.CODIGO_BENEFICIO = BENF.CODIGO
       and BENF.COD_TIPO_BENEFICIO member (LISTA_MAPEA_TIPO_BENEFICIO)
       and CONC.CODIGO_BENEFIC = PESS.CODIGO
       and CONC.CODIGO_EMPRESA = PESS.CODIGO_EMPRESA
       and CONC.C_LIVRE_DESCR08 = C_INC.NUMERO_CARTEIRA
       AND PESS.DT_TERMINO IS NULL
      AND CONC.DATA_CONCESSAO=(SELECT MAX(AUX.DATA_CONCESSAO) FROM RHBENF_CONCESSOES AUX 
       WHERE AUX.CODIGO_EMPRESA=CONC.CODIGO_EMPRESA 
       and AUX.TIPO_CONTRATO= CONC.TIPO_CONTRATO
       and AUX.CODIGO_BENEFICIO= CONC.CODIGO_BENEFICIO
       AND AUX.CODIGO_CONTRATO=CONC.CODIGO_CONTRATO
       AND AUX.CODIGO_BENEFIC=CONC.CODIGO_BENEFIC
       AND AUX.C_LIVRE_DESCR08= CONC.C_LIVRE_DESCR08);

       IF vCONC_CODIGO_CONTRATO <> C_INC.CODIGO_CONTRATO THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_CONTRATO, 'CONTRATO INFORMADO = ' || C_INC.CODIGO_CONTRATO || ';' || 'CONTRATO RECUPERADO = '||vCONC_CODIGO_CONTRATO);
       END IF;

       IF vCONC_CPF_BENEFICIARIO <> C_INC.CPF_BENEFICIARIO THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CARTEIRA_OUTRO_CPF, 'CARTEIRA INFORMADA = ' || C_INC.NUMERO_CARTEIRA || ';' || 'CPF INFORMADO = ' || C_INC.CPF_BENEFICIARIO || ';' ||'CARTEIRA RECUPERADA = '|| vCONC_NUMERO_CARTEIRA || 'CPF RECUPERADO = ' || vCONC_CPF_BENEFICIARIO);
       END IF;

       IF C_INC.ANO_MES_REFERENCIA < vCONC_DATA_CONCESSAO  THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_ANTES_CONCESSAO, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CONCESSAO RECUPERADA = '||vCONC_DATA_CONCESSAO);
       END IF;

       IF C_INC.ANO_MES_REFERENCIA > vCONC_DATA_CANCELAMENTO  THEN
          GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_APOS_CANCEL, 'DATA INFORMADA = ' || C_INC.ANO_MES_REFERENCIA || ';' || 'DATA CANCELAMENTO RECUPERADA = '||vCONC_DATA_CANCELAMENTO);
       END IF;

       -- Idade do BeneficiÂ¿o
       IF vCONC_DATA_NASC_BENEFICIARIO IS NOT NULL THEN
          vCONC_IDADE_BENEFICIARIO := trunc(months_between(sysdate, vCONC_DATA_NASC_BENEFICIARIO)/12);
       END IF;

       -- RemuneraÂ¿ base para efeito de plano de saÃºde
       vCONC_REMUNERACAO_BASE_PS := C_INC.REMUNERACAO_BASE_PS;
       --vCONC_REMUNERACAO_BASE_PS := 2000.00;


       -- Se beneficiÂ¿o for titular
       IF vCONC_CATEGORIA_BENEFICIARIO = '0001' THEN
           IF C_INC.CODIGO_VERBA member LISTA_VERBAS_MENSALIDADE THEN

              begin
             -- Recupera valor da mensalidade
              select NVL(VALOR_MENSALIDADE,0) AS VALOR
                into vCONC_VALOR_MENSALIDADE
        			  from RHPBH_PS_VALORES
        			 where CODIGO_PLANO = vCONC_CODIGO_BENEFICIO
        				and ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
        												from RHPBH_PS_VALORES
        											  where ANO_MES_REFERENCIA <= sysdate
        											)
        				and FAIXA_ETARIA = (select min(FAIXA_ETARIA)
        												from RHPBH_PS_VALORES
        											  where FAIXA_ETARIA >= vCONC_IDADE_BENEFICIARIO
        											)
        			group by VALOR_MENSALIDADE;

              -- Valida valor da verba de mensalidade
              -- com tabela de valores do plano de saÃºde
              IF vCONC_VALOR_MENSALIDADE <> C_INC.VALOR_VERBA THEN
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_MENSALIDADE_VALOR_DIF,
                 'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                 'VALOR RECUPERADO = '|| vCONC_VALOR_MENSALIDADE || ';' ||
                 'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                 'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                 );
              END IF;

              exception
              when others then
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_VALOR_NAO_ENCONTRADO,
                 'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                 'VALOR RECUPERADO = '|| vCONC_VALOR_MENSALIDADE || ';' ||
                 'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                 'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                 );
              end;

          END IF;

          IF C_INC.CODIGO_VERBA member LISTA_VERBAS_SUBSIDIO THEN
             begin
          			select NVL(VALOR_SUBSIDIO_TITULAR,0) AS VALOR
                  into vCONC_VALOR_SUBSIDIO
          			  from RHPBH_PS_VALORES
          			 where CODIGO_PLANO = vCONC_CODIGO_BENEFICIO
          				and ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
          												    from RHPBH_PS_VALORES
          													where ANO_MES_REFERENCIA <= sysdate
          											)
                      and FAIXA_SALARIAL = (select min(FAIXA_SALARIAL)
          												from RHPBH_PS_VALORES AUX_FX_SAL
          											  where AUX_FX_SAL.ANO_MES_REFERENCIA = RHPBH_PS_VALORES.ANO_MES_REFERENCIA
          												 and AUX_FX_SAL.FAIXA_SALARIAL >= vCONC_REMUNERACAO_BASE_PS
                                  )
          				and FAIXA_ETARIA = (select min(FAIXA_ETARIA)
          											 from RHPBH_PS_VALORES
          											where FAIXA_ETARIA >= vCONC_IDADE_BENEFICIARIO
          											)
          											group by VALOR_SUBSIDIO_TITULAR;
              exception
              when others then
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_VALOR_NAO_ENCONTRADO,
                 'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                 'VALOR RECUPERADO = '|| vCONC_VALOR_MENSALIDADE || ';' ||
                 'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                 'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                 );
              end;
              -- Valida valor da verba de subsÂ¿
              -- com tabela de valores do plano de saÃºde
              IF vCONC_VALOR_SUBSIDIO <> C_INC.VALOR_VERBA THEN
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_SUBSIDIO_VALOR_DIF,
                 'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                 'VALOR RECUPERADO = '|| vCONC_VALOR_SUBSIDIO || ';' ||
                 'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                 'FAIXA SALARIAL = '|| vCONC_REMUNERACAO_BASE_PS || ';' ||
                 'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                 );
              END IF;
           END IF;
       ELSE
           -- Se beneficiÂ¿o for nÂ¿titular
           IF C_INC.CODIGO_VERBA member LISTA_VERBAS_MENSALIDADE THEN

              begin
                 -- Recupera valor da mensalidade
                  select NVL(VALOR_MENSALIDADE,0) AS VALOR
                    into vCONC_VALOR_MENSALIDADE
            			  from RHPBH_PS_VALORES
            			 where CODIGO_PLANO = vCONC_CODIGO_BENEFICIO
            				and ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
            												from RHPBH_PS_VALORES
            											  where ANO_MES_REFERENCIA <= sysdate
            											)
            				and FAIXA_ETARIA = (select min(FAIXA_ETARIA)
            												from RHPBH_PS_VALORES
            											  where FAIXA_ETARIA >= vCONC_IDADE_BENEFICIARIO
            											)
            			group by VALOR_MENSALIDADE;

                  -- Valida valor da verba de mensalidade
                  -- com tabela de valores do plano de saÃºde
                  IF vCONC_VALOR_MENSALIDADE <> C_INC.VALOR_VERBA THEN
                     GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_MENSALIDADE_VALOR_DIF,
                     'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                     'VALOR RECUPERADO = '|| vCONC_VALOR_MENSALIDADE || ';' ||
                     'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                     'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                     );
                  END IF;
              exception
              when others then
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_VALOR_NAO_ENCONTRADO,
                 'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                 'VALOR RECUPERADO = '|| vCONC_VALOR_MENSALIDADE || ';' ||
                 'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                 'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                 );
              end;
          END IF;

          IF C_INC.CODIGO_VERBA member LISTA_VERBAS_SUBSIDIO THEN
             begin
          			select NVL(RHPBH_PS_VALORES.VALOR_SUBSIDIO_DEP_MED_ODONTO,0) AS VALOR_MED_ODONTO,
                       NVL(RHPBH_PS_VALORES.VALOR_SUBSIDIO_DEP_SO_MEDICO,0) AS VALOR_SO_MEDICO,
                       NVL(RHPBH_PS_VALORES.VALOR_SUBSIDIO_DEP_SO_ODONTO,0) AS VALOR_SO_ODONTO
                  into vCONC_VALOR_SUBSIDIO_MO, vCONC_VALOR_SUBSIDIO_ME, vCONC_VALOR_SUBSIDIO_OD
          			  from RHPBH_PS_VALORES
          			 where CODIGO_PLANO = vCONC_CODIGO_BENEFICIO
          				and ANO_MES_REFERENCIA = (select max(ANO_MES_REFERENCIA)
          												    from RHPBH_PS_VALORES
          													where ANO_MES_REFERENCIA <= sysdate
          											)
                      and FAIXA_SALARIAL = (select min(FAIXA_SALARIAL)
          												from RHPBH_PS_VALORES AUX_FX_SAL
          											  where AUX_FX_SAL.ANO_MES_REFERENCIA = RHPBH_PS_VALORES.ANO_MES_REFERENCIA
          												 and AUX_FX_SAL.FAIXA_SALARIAL >= vCONC_REMUNERACAO_BASE_PS
                                  )
          				and FAIXA_ETARIA = (select min(FAIXA_ETARIA)
          											 from RHPBH_PS_VALORES
          											where FAIXA_ETARIA >= vCONC_IDADE_BENEFICIARIO
          											);

                    CASE WHEN C_INC.TIPO_BENEFICIO_QUE_POSSUI = 'MO' THEN vCONC_VALOR_SUBSIDIO := vCONC_VALOR_SUBSIDIO_MO;
                         WHEN C_INC.TIPO_BENEFICIO_QUE_POSSUI = 'ME' THEN vCONC_VALOR_SUBSIDIO := vCONC_VALOR_SUBSIDIO_ME;
                         WHEN C_INC.TIPO_BENEFICIO_QUE_POSSUI = 'OD' THEN vCONC_VALOR_SUBSIDIO := vCONC_VALOR_SUBSIDIO_OD;
                         ELSE vCONC_VALOR_SUBSIDIO := 0.00;
                    END CASE;

                    -- Valida valor da verba de subsÂ¿
                    -- com tabela de valores do plano de saÃºde
                    IF vCONC_VALOR_SUBSIDIO <> C_INC.VALOR_VERBA THEN
                       GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_SUBSIDIO_VALOR_DIF,
                       'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                       'VALOR RECUPERADO = '|| vCONC_VALOR_SUBSIDIO || ';' ||
                       'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                       'FAIXA SALARIAL = '|| vCONC_REMUNERACAO_BASE_PS || ';' ||
                       'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                       );
                    END IF;
              exception
              when others then
                 GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ALERTA, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_PS_VALOR_NAO_ENCONTRADO,
                 'VALOR VERBA INFORMADO = ' || C_INC.VALOR_VERBA || ';' ||
                 'VALOR RECUPERADO = '|| vCONC_VALOR_MENSALIDADE || ';' ||
                 'CODIGO PLANO = '|| vCONC_CODIGO_BENEFICIO || ';' ||
                 'FAIXA ETARIA = '|| vCONC_IDADE_BENEFICIARIO
                 );
              end;
           END IF;
       END IF;


      exception
      WHEN NO_DATA_FOUND then
           vCODIGO_PESSOA_BENEFICIARIO := NULL;
           vCONC_CODIGO_BENEFICIARIO := NULL;
           vCONC_CPF_BENEFICIARIO := NULL;
           vCONC_CODIGO_CONTRATO := NULL;
           vCONC_CODIGO_BENEFICIO := NULL;
           vCONC_DATA_CONCESSAO := NULL;
           vCONC_DATA_CANCELAMENTO := NULL;
           vCONC_NUMERO_CARTEIRA := NULL;

           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_NAO_ENCONTRADA,V_DETALHE_0001);
      WHEN TOO_MANY_ROWS then
           vCODIGO_PESSOA_BENEFICIARIO := NULL;
           vCONC_CODIGO_BENEFICIARIO := NULL;
           vCONC_CPF_BENEFICIARIO := NULL;
           vCONC_CODIGO_CONTRATO := NULL;
           vCONC_CODIGO_BENEFICIO := NULL;
           vCONC_DATA_CONCESSAO := NULL;
           vCONC_DATA_CANCELAMENTO := NULL;
           vCONC_NUMERO_CARTEIRA := NULL;
           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_DUPLICADA,V_DETALHE_0001);
      when others then
           vCODIGO_PESSOA_BENEFICIARIO := NULL;
           vCONC_CODIGO_BENEFICIARIO := NULL;
           vCONC_CPF_BENEFICIARIO := NULL;
           vCONC_CODIGO_CONTRATO := NULL;
           vCONC_CODIGO_BENEFICIO := NULL;
           vCONC_DATA_CONCESSAO := NULL;
           vCONC_DATA_CANCELAMENTO := NULL;
           vCONC_NUMERO_CARTEIRA := NULL;

           GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_REGRAS, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_CONCESSAO_ERRO_RECUPERACAO,'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
      end;




    IF MOD(vCONTADOR,1000) = 0 THEN
       COMMIT;
    END IF;

    vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;

    -- Atualizar a situacao dos registros
    PR_ATUALIZAR_SITUACAO_REGISTR0;

    PR_SET_SITUACAO_PROCESSAMENTO('05');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;

IF PACAO in (3, 10) THEN
   vCONTADOR := 0;
   PR_SET_SITUACAO_PROCESSAMENTO('06');
   PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);

    -- Constantes
    C_TIPO_CONTRATO := PTIPO_CONTRATO;
    C_MES_INCIDENCIA := to_CHAR(pano_mes_referencia, 'MM');
    C_CONSIDERA_DIRF := 'S';
    C_CONTROLE_LANCAMENTO := '0';
    C_LOGIN_USUARIO := 'IMPORT';
    C_C_LIVRE_SELEC01 := 0;
    C_C_LIVRE_VALOR01 := 0;
    C_C_LIVRE_OPCAO01 := 'N';
    C_REF_VERBA := 0;
    C_ID_CLIENTE := 0;

    -- #### INICIO OPERACAO EXCLUSAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.OPERACAO = 'E'
         order by CS.NUMERO_LINHA
    )
    loop

        -- Finaliza a solicitaÂ¿ de movimento
        BEGIN
             vQTDE_LINHAS_AFETADAS := FINALIZAR_CS(C_INC.CODIGO_EMPRESA, C_INC.TIPO_CONTRATO, C_INC.CODIGO_CONTRATO, C_INC.CODIGO_VERBA, C_INC.DATA_SOLICITACAO_INICIAL, C_INC.ANO_MES_REFERENCIA, COD_STATUS_SOLIC_EXCLUSAO);
             IF vQTDE_LINHAS_AFETADAS = 0 THEN
                GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, 'LINHAS AFETADAS = ' || vQTDE_LINHAS_AFETADAS);
             END IF;

             IF vQTDE_LINHAS_AFETADAS = 1 THEN
                GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL);
             END IF;

        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20001,'TENTATIVA DE INCLUSÃ¿O DE REGITROS JÃ¿ CADASTRADOS');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              ----dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20002,'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR EXCLUIR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM
              || C_INC.CODIGO_EMPRESA || C_INC.TIPO_CONTRATO || C_INC.CODIGO_CONTRATO || C_INC.ANO_MES_REFERENCIA || C_INC.CODIGO_VERBA || C_INC.DATA_SOLICITACAO_INICIAL || COD_STATUS_SOLIC_EXCLUSAO
              );
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO EXCLUSAO ####

    -- #### INICIO OPERACAO ALTERACAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.OPERACAO = 'A'
         order by CS.NUMERO_LINHA
    )
    loop

        BEGIN
             REG_PBH_CS.ID_ARQUIVO := C_INC.ID_ARQUIVO;
             REG_PBH_CS.NUMERO_LINHA := C_INC.NUMERO_LINHA;
             REG_PBH_CS.OPERACAO := C_INC.OPERACAO;
             REG_PBH_CS.ANO_MES_REFERENCIA := C_INC.ANO_MES_REFERENCIA;
             REG_PBH_CS.CODIGO_EMPRESA := C_INC.CODIGO_EMPRESA;
             REG_PBH_CS.TIPO_CONTRATO := C_INC.TIPO_CONTRATO;
             REG_PBH_CS.CODIGO_CONTRATO := C_INC.CODIGO_CONTRATO;
             REG_PBH_CS.CPF_SERVIDOR := C_INC.CPF_SERVIDOR;
             REG_PBH_CS.CPF_BENEFICIARIO := C_INC.CPF_BENEFICIARIO;
             REG_PBH_CS.ADE_NUMERO := C_INC.ADE_NUMERO;
             REG_PBH_CS.NUMERO_CARTEIRA := C_INC.NUMERO_CARTEIRA;
             REG_PBH_CS.NUMERO_CONTRATO_OPERADORA := C_INC.NUMERO_CONTRATO_OPERADORA;
             REG_PBH_CS.CNPJ_FORNECEDOR := C_INC.CNPJ_FORNECEDOR;
             REG_PBH_CS.CODIGO_VERBA := C_INC.CODIGO_VERBA;
             REG_PBH_CS.VALOR_VERBA := C_INC.VALOR_VERBA;
             REG_PBH_CS.NUMERO_PARCELAS := C_INC.NUMERO_PARCELAS;
             REG_PBH_CS.DATA_SOLICITACAO_INICIAL := C_INC.DATA_SOLICITACAO_INICIAL;
             REG_PBH_CS.DATA_AUTORIZACAO_CORRENTE := C_INC.DATA_AUTORIZACAO_CORRENTE;
             REG_PBH_CS.VALOR_DESCONTADO := C_INC.VALOR_DESCONTADO;
             REG_PBH_CS.CODIGO_SITUACAO_FUNCIONAL := C_INC.CODIGO_SITUACAO_FUNCIONAL;
             REG_PBH_CS.FUNDO_REPASSE := C_INC.FUNDO_REPASSE;
             REG_PBH_CS.CODIGO_FORNECEDOR := C_INC.CODIGO_FORNECEDOR;

             -- Finaliza a solicitaÂ¿ de movimento, mantendo o histÂ¿o do valor da verba que foi alterado
             --FINALIZAR_CS(C_INC.CODIGO_EMPRESA, C_INC.TIPO_CONTRATO, C_INC.CODIGO_CONTRATO, C_INC.ANO_MES_REFERENCIA, C_INC.CODIGO_VERBA, C_INC.DATA_SOLICITACAO_INICIAL, COD_STATUS_SOLIC_ALTERACAO_OLD);
             vQTDE_LINHAS_AFETADAS := FINALIZAR_CS(C_INC.CODIGO_EMPRESA, C_INC.TIPO_CONTRATO, C_INC.CODIGO_CONTRATO, C_INC.CODIGO_VERBA, C_INC.DATA_SOLICITACAO_INICIAL, C_INC.ANO_MES_REFERENCIA, COD_STATUS_SOLIC_ALTERACAO_OLD);

             -- Inclui nova solicitaÂ¿ de movimento, com o novo valor da verba
             vQTDE_LINHAS_AFETADAS := INCLUIR_CS(REG_PBH_CS, COD_STATUS_SOLIC_ALTERACAO_NEW);

             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL);
        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20001,'TENTATIVA DE INCLUSÃ¿O DE REGITROS JÃ¿ CADASTRADOS');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20002,'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR ALTERAR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO ALTERACAO ####

    -- #### INICIO OPERACAO INCLUSAO ####
    FOR C_INC in(

        select CS.*
          from RHPBH_CS CS, RHPBH_ARQUIVO_LINHA AL
         where CS.ID_ARQUIVO = AL.ID_ARQUIVO
           and CS.NUMERO_LINHA = AL.NUMERO_LINHA
           and CS.CODIGO_EMPRESA = PCODIGO_EMPRESA
           and CS.ID_ARQUIVO = PID_ARQUIVO
           and AL.SITUACAO = 00
           and CS.OPERACAO = 'I'
         order by CS.NUMERO_LINHA
    )
    loop
-----------------GABRIEL AQUI EM 02/04/2019-----------------------
        BEGIN
             REG_PBH_CS.ID_ARQUIVO := C_INC.ID_ARQUIVO;
             REG_PBH_CS.NUMERO_LINHA := C_INC.NUMERO_LINHA;
             REG_PBH_CS.OPERACAO := C_INC.OPERACAO;
             REG_PBH_CS.ANO_MES_REFERENCIA := C_INC.ANO_MES_REFERENCIA;
             REG_PBH_CS.CODIGO_EMPRESA := C_INC.CODIGO_EMPRESA;
             REG_PBH_CS.TIPO_CONTRATO := C_INC.TIPO_CONTRATO;
             REG_PBH_CS.CODIGO_CONTRATO := C_INC.CODIGO_CONTRATO;
             REG_PBH_CS.CPF_SERVIDOR := C_INC.CPF_SERVIDOR;
             REG_PBH_CS.CPF_BENEFICIARIO := C_INC.CPF_BENEFICIARIO;
             REG_PBH_CS.ADE_NUMERO := C_INC.ADE_NUMERO;
             REG_PBH_CS.NUMERO_CARTEIRA := C_INC.NUMERO_CARTEIRA;
             REG_PBH_CS.NUMERO_CONTRATO_OPERADORA := C_INC.NUMERO_CONTRATO_OPERADORA;
             REG_PBH_CS.CNPJ_FORNECEDOR := C_INC.CNPJ_FORNECEDOR;
             REG_PBH_CS.CODIGO_VERBA := C_INC.CODIGO_VERBA;
             REG_PBH_CS.VALOR_VERBA := C_INC.VALOR_VERBA;
             REG_PBH_CS.NUMERO_PARCELAS := C_INC.NUMERO_PARCELAS;
             REG_PBH_CS.DATA_SOLICITACAO_INICIAL := C_INC.DATA_SOLICITACAO_INICIAL;
             REG_PBH_CS.DATA_AUTORIZACAO_CORRENTE := C_INC.DATA_AUTORIZACAO_CORRENTE;
             REG_PBH_CS.VALOR_DESCONTADO := C_INC.VALOR_DESCONTADO;
             REG_PBH_CS.CODIGO_SITUACAO_FUNCIONAL := C_INC.CODIGO_SITUACAO_FUNCIONAL;
             REG_PBH_CS.FUNDO_REPASSE := C_INC.FUNDO_REPASSE;
             REG_PBH_CS.CODIGO_FORNECEDOR := C_INC.CODIGO_FORNECEDOR;

             -- Inclui nova solicitaÂ¿ de movimento
             vQTDE_LINHAS_AFETADAS := INCLUIR_CS(REG_PBH_CS, COD_STATUS_SOLIC_INCLUSAO);

             GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_SUCESSO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_SUCESSO_INCLUSAO, NULL);
        EXCEPTION
           WHEN DUP_VAL_ON_INDEX THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20001,'TENTATIVA DE INCLUSÃ¿O DE REGITROS JÃ¿ CADASTRADOS');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, null);

           WHEN OTHERS THEN
              --dbms_output.put_line('ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
              --raise_application_error (-20002,'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO');
              GRAVA_LOG(C_INC.CODIGO_EMPRESA, CATEGORIA_LOG_EFETIVACAO, TIPO_LOG_ERRO, C_INC.ID_ARQUIVO, C_INC.NUMERO_LINHA, LOG_REGISTRO_JA_EXISTENTE, 'OCORREU UM ERRO AO TENTAR INCLUIR REGISTRO. '||'ENCONTRADO ERRO - '||SQLCODE||' -ERROR- '||SQLERRM);
        END;

        IF MOD(vCONTADOR,1000) = 0 THEN
           COMMIT;
        END IF;

        vCONTADOR := vCONTADOR + 1;
    end loop;
    COMMIT;
    -- #### FIM OPERACAO INCLUSAO ####

    --dbms_output.put_line('PROCESSAMENTO INCLUSAO CONCLUIDO.');
    PR_SET_SITUACAO_PROCESSAMENTO('07');
    PR_CONTROLE_PROCESSAMENTO(PCODIGO_EMPRESA, PID_ARQUIVO, vSITUACAO_PROCESSAMENTO);
END IF;
    PR_STATS_PROCESSA_ARQUIVO(PID_ARQUIVO);
------------------------------------------------------------------------

--dbms_output.put_line('PROCESSAMENTO FINALIZADO.');
--dbms_output.put_line('REGISTROS PROCESSADOS = ' || vCONTADOR);
end;