
  CREATE OR REPLACE EDITIONABLE PROCEDURE "ARTERH"."SANEAMENTO_MOVIMENTACAO" AS

BEGIN
DECLARE
CONT NUMBER;
QTD_LINHAS_AFETADAS NUMBER;
vCODIGO CHAR(15);
vTIPO_CONTRATO CHAR(4);
vCODIGO_EMPRESA CHAR(4);
vCONT NUMBER;
REC_RETORNO NUMBER;
REC_VERIFICA NUMBER;
vANALISE CHAR(1 BYTE);
vREG CHAR(1 BYTE);

/* PROCEDURE CRIADA PARA INSERIR E DELETAR OS DADOS CORRETOS PARA A TABELA RHCGED_TRANSFERENC */
PROCEDURE IMPORTA ( vFAZER IN VARCHAR2,vCODIGO_EMPRESA IN CHAR,vTIPO_CONTRATO IN CHAR,vCODIGO IN CHAR,vDT_ALT_UNID_CUSTO IN DATE,vCOD_MOVIMENTACAO IN CHAR,vCOD_LOTACAO_ATUAL1 IN CHAR,
vCOD_LOTACAO_ATUAL2 IN CHAR,vCOD_LOTACAO_ATUAL3 IN CHAR,vCOD_LOTACAO_ATUAL4 IN CHAR,vCOD_LOTACAO_ATUAL5 IN CHAR,vCOD_LOTACAO_ATUAL6 IN CHAR,vCOD_UNIDADE_ATUAL1 IN CHAR,vCOD_UNIDADE_ATUAL2 IN CHAR,vCOD_UNIDADE_ATUAL3 IN CHAR,
vCOD_UNIDADE_ATUAL4 IN CHAR,vCOD_UNIDADE_ATUAL5 IN CHAR,vCOD_UNIDADE_ATUAL6 IN CHAR,vCOD_CCONTAB_ATUAL1 IN CHAR,vCOD_CCONTAB_ATUAL2 IN CHAR,vCOD_CCONTAB_ATUAL3 IN CHAR,vCOD_CCONTAB_ATUAL4 IN CHAR,vCOD_CCONTAB_ATUAL5 IN CHAR,
vCOD_CCONTAB_ATUAL6 IN CHAR,vCOD_CGERENC_ATUAL1 IN CHAR,vCOD_CGERENC_ATUAL2 IN CHAR,vCOD_CGERENC_ATUAL3 IN CHAR,vCOD_CGERENC_ATUAL4 IN CHAR,vCOD_CGERENC_ATUAL5 IN CHAR,vCOD_CGERENC_ATUAL6 IN CHAR,vTEXTO_ASSOCIADO IN VARCHAR2,
vLOGIN_USUARIO IN VARCHAR2,vDT_ULT_ALTER_USUA IN DATE,vMOTIVO_ALTERACAO IN CHAR,vDT_FIM_TEMP IN DATE,vC_LIVRE_DESCR01 IN VARCHAR2,vC_LIVRE_DATA01 IN DATE,vDOCUMENTO_PUBLIC IN VARCHAR2,vASSINATURA_01 IN NUMBER,vASSINATURA_02 IN NUMBER,
vASSINATURA_03 IN NUMBER,vC_LIVRE_DESCR02 IN VARCHAR2,vC_LIVRE_SELEC01 IN NUMBER,vC_LIVRE_VALOR01 IN NUMBER,vDT_REF_ALT_RETRO IN DATE,vC_LIVRE_DATA02 IN DATE,vC_LIVRE_SELEC02 IN NUMBER,vC_LIVRE_VALOR02 IN NUMBER,vC_LIVRE_OPCAO01 IN CHAR,
vC_LIVRE_OPCAO02 IN CHAR,vID_LEI IN NUMBER,vDATA_PROCESSAMENTO IN DATE,vSTATUS_PROCESSAMENTO IN VARCHAR2, vDATA_CARGA IN DATE, vDT_PREV_RETORNO IN DATE, vDATA_PUBLIC IN DATE ) AS
BEGIN
CONT:=0;
dbms_output.enable(NULL);
--EXECUTE IMMEDIATE ('UPDATE NUMERO_LINHA = ROWNUM;');

--DELETE
/* SE O REGISTRO ESTIVER PREENCHIDO COMO D (DELETE), A DATA DE PROCESSAMENTO E O STATUS ESTIVER NULOS IRÃ? DELETAR */
IF(vFAZER='D' AND vDATA_PROCESSAMENTO IS NULL AND vSTATUS_PROCESSAMENTO IS NULL)THEN
QTD_LINHAS_AFETADAS:=0;
DELETE FROM RHCGED_TRANSFERENC WHERE CODIGO=''||vCODIGO||'' AND COD_MOVIMENTACAO=''||vCOD_MOVIMENTACAO||'' AND DT_ALT_UNID_CUSTO= TRUNC(vDT_ALT_UNID_CUSTO) AND TIPO_CONTRATO=''||vTIPO_CONTRATO||'' AND CODIGO_EMPRESA=''||vCODIGO_EMPRESA||'';
QTD_LINHAS_AFETADAS:=SQL%ROWCOUNT;
COMMIT;

/* SE O REGISTRO ENTRAR NO IF ACIMA, OS CAMPOS DATA_PROCESSAMENTO, STATUS_PROCESSAMENTO SERÃƒO ATUALIZADOS PARA NÃƒO ENTRAR NO LOOP NOVAMENTE */
IF QTD_LINHAS_AFETADAS<>'0' THEN

update ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO set DATA_PROCESSAMENTO = sysdate, STATUS_PROCESSAMENTO = 'OK', ANALISE = 'LOCAL_CORRETO' WHERE FAZER='D' AND DATA_PROCESSAMENTO IS NULL AND
STATUS_PROCESSAMENTO IS NULL and data_carga = TRUNC(vDATA_CARGA) AND CODIGO=''||vCODIGO||'' AND COD_MOVIMENTACAO=''||vCOD_MOVIMENTACAO||'' AND DT_ALT_UNID_CUSTO = TRUNC(vDT_ALT_UNID_CUSTO) AND TIPO_CONTRATO=''||vTIPO_CONTRATO||'' AND CODIGO_EMPRESA=''||vCODIGO_EMPRESA||'';
END IF;
END IF;

---- INSERT
/* SE O REGISTRO ESTIVER PREENCHIDO COMO I (INSERT), A DATA DE PROCESSAMENTO E O STATUS ESTIVER NULOS IRÃ? INSERIR */
IF (vFAZER='I' AND vDATA_PROCESSAMENTO IS NULL AND vSTATUS_PROCESSAMENTO IS NULL) THEN

QTD_LINHAS_AFETADAS:=0;

INSERT INTO RHCGED_TRANSFERENC(CODIGO_EMPRESA,TIPO_CONTRATO,CODIGO,DT_ALT_UNID_CUSTO,COD_MOVIMENTACAO,COD_LOTACAO_ATUAL1,COD_LOTACAO_ATUAL2,COD_LOTACAO_ATUAL3,COD_LOTACAO_ATUAL4,COD_LOTACAO_ATUAL5,COD_LOTACAO_ATUAL6,COD_UNIDADE_ATUAL1,COD_UNIDADE_ATUAL2,COD_UNIDADE_ATUAL3,COD_UNIDADE_ATUAL4,COD_UNIDADE_ATUAL5,COD_UNIDADE_ATUAL6,COD_CCONTAB_ATUAL1,COD_CCONTAB_ATUAL2,COD_CCONTAB_ATUAL3,COD_CCONTAB_ATUAL4,COD_CCONTAB_ATUAL5,COD_CCONTAB_ATUAL6,COD_CGERENC_ATUAL1,COD_CGERENC_ATUAL2,COD_CGERENC_ATUAL3,COD_CGERENC_ATUAL4,COD_CGERENC_ATUAL5,COD_CGERENC_ATUAL6,TEXTO_ASSOCIADO,LOGIN_USUARIO,DT_ULT_ALTER_USUA,MOTIVO_ALTERACAO,DT_FIM_TEMP,C_LIVRE_DESCR01,C_LIVRE_DATA01,DOCUMENTO_PUBLIC,ASSINATURA_01,ASSINATURA_02,ASSINATURA_03,C_LIVRE_DESCR02,C_LIVRE_SELEC01,C_LIVRE_VALOR01,DT_REF_ALT_RETRO,C_LIVRE_DATA02,C_LIVRE_SELEC02,C_LIVRE_VALOR02,C_LIVRE_OPCAO01,C_LIVRE_OPCAO02,ID_LEI,DT_PREV_RETORNO,DATA_PUBLIC)
VALUES(''||vCODIGO_EMPRESA||'',''||vTIPO_CONTRATO||'',''||vCODIGO||'',''||vDT_ALT_UNID_CUSTO||'',''||vCOD_MOVIMENTACAO||'',''||vCOD_LOTACAO_ATUAL1||'',''||vCOD_LOTACAO_ATUAL2||'',''||vCOD_LOTACAO_ATUAL3||'',''||vCOD_LOTACAO_ATUAL4||'',''||vCOD_LOTACAO_ATUAL5||'',''||vCOD_LOTACAO_ATUAL6||'',''||vCOD_UNIDADE_ATUAL1||'',''||vCOD_UNIDADE_ATUAL2||'',''||vCOD_UNIDADE_ATUAL3||'',''||vCOD_UNIDADE_ATUAL4||'',''||vCOD_UNIDADE_ATUAL5||'',''||vCOD_UNIDADE_ATUAL6||'',''||vCOD_CCONTAB_ATUAL1||'',''||vCOD_CCONTAB_ATUAL2||'',''||vCOD_CCONTAB_ATUAL3||'',''||vCOD_CCONTAB_ATUAL4||'',''||vCOD_CCONTAB_ATUAL5||'',''||vCOD_CCONTAB_ATUAL6||'',''||vCOD_CGERENC_ATUAL1||'',''||vCOD_CGERENC_ATUAL2||'',''||vCOD_CGERENC_ATUAL3||'',''||vCOD_CGERENC_ATUAL4||'',''||vCOD_CGERENC_ATUAL5||'',''||vCOD_CGERENC_ATUAL6||'',''||vTEXTO_ASSOCIADO||'',''||vLOGIN_USUARIO||'',
sysdate,''||vMOTIVO_ALTERACAO||'',''||vDT_FIM_TEMP||'',''||vC_LIVRE_DESCR01||'',''||vC_LIVRE_DATA01||'',''||vDOCUMENTO_PUBLIC||'',''||vASSINATURA_01||'',''||vASSINATURA_02||'',''||vASSINATURA_03||'',''||vC_LIVRE_DESCR02||'',''||vC_LIVRE_SELEC01||'',''||vC_LIVRE_VALOR01||'',''||vDT_REF_ALT_RETRO||'',''||vC_LIVRE_DATA02||'',''||vC_LIVRE_SELEC02||'',''||vC_LIVRE_VALOR02||'',''||vC_LIVRE_OPCAO01||'',''||vC_LIVRE_OPCAO02||'',''||LTRIM(vID_LEI)||'',''||vDT_PREV_RETORNO||'',''||vDATA_PUBLIC||'');

QTD_LINHAS_AFETADAS:=SQL%ROWCOUNT;
COMMIT;

/* SE O REGISTRO ENTRAR NO IF ACIMA, OS CAMPOS DATA_PROCESSAMENTO, STATUS_PROCESSAMENTO SERÃƒO ATUALIZADOS PARA NÃƒO ENTRAR NO LOOP NOVAMENTE */
IF QTD_LINHAS_AFETADAS<>'0' THEN

update ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO set DATA_PROCESSAMENTO = sysdate, STATUS_PROCESSAMENTO = 'OK', ANALISE = 'LOCAL_CORRETO' WHERE FAZER='I' AND DATA_PROCESSAMENTO IS NULL AND
STATUS_PROCESSAMENTO IS NULL and data_carga = trunc(vDATA_CARGA) AND CODIGO=''||vCODIGO||'' AND COD_MOVIMENTACAO=''||vCOD_MOVIMENTACAO||'' AND DT_ALT_UNID_CUSTO= TRUNC(vDT_ALT_UNID_CUSTO) AND TIPO_CONTRATO=''||vTIPO_CONTRATO||'' AND CODIGO_EMPRESA=''||vCODIGO_EMPRESA||'';
END IF;
END IF;
END;

FUNCTION VERIFICA_LOCAL (vCOD_CONTRATO IN CHAR, vTP_CONTRATO IN CHAR, vCOD_EMPRESA IN CHAR) RETURN NUMBER IS
RETORNO NUMBER;
BEGIN --BEGIN1
RETORNO:=0;
vANALISE:=NULL;
FOR C3 IN (
SELECT XX.codigo_empresa,xx.tipo_contrato,xx.codigo, xx.data_carga,REGEXP_SUBSTR(vertifica,'[^;]+', 1,1) as verifica1, REGEXP_SUBSTR(vertifica,'[^;]+', 1,2) as verifica2 FROM (SELECT X.CODIGO_EMPRESA,X.TIPO_CONTRATO,X.CODIGO,X.DATA_CARGA,LISTAGG(x.VERIFICA,';') WITHIN GROUP(ORDER BY  X.CODIGO_EMPRESA,X.TIPO_CONTRATO,X.CODIGO,X.DATA_CARGA) as vertifica FROM (
SELECT CASE WHEN ( ( A.TIPO_AGRUP IS NULL ) OR (B.TIPO_AGRUP IS NULL) OR ( C.TIPO_AGRUP  IS NULL ) OR (  D.TIPO_AGRUP IS NULL ) ) THEN 'NAO_IMPORTA' ELSE 'IMPORTA' END AS VERIFICA,
  M.CODIGO_EMPRESA,
  M.TIPO_CONTRATO,
  M.CODIGO,
  M.DATA_CARGA
FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO M
LEFT OUTER JOIN RHORGA_AGRUPADOR A
ON A.COD_AGRUP1      = M.COD_LOTACAO_ATUAL1
AND A.COD_AGRUP2     = M.COD_LOTACAO_ATUAL2
AND A.COD_AGRUP3     = M.COD_LOTACAO_ATUAL3
AND A.COD_AGRUP4     = M.COD_LOTACAO_ATUAL4
AND A.COD_AGRUP5     = M.COD_LOTACAO_ATUAL5
AND A.COD_AGRUP6     = M.COD_LOTACAO_ATUAL6
AND A.CODIGO_EMPRESA = M.CODIGO_EMPRESA
AND A.TIPO_AGRUP     = 'L'
LEFT OUTER JOIN RHORGA_AGRUPADOR B
ON B.COD_AGRUP1      = M.COD_UNIDADE_ATUAL1
AND B.COD_AGRUP2     = M.COD_UNIDADE_ATUAL2
AND B.COD_AGRUP3     = M.COD_UNIDADE_ATUAL3
AND B.COD_AGRUP4     = M.COD_UNIDADE_ATUAL4
AND B.COD_AGRUP5     = M.COD_UNIDADE_ATUAL5
AND B.COD_AGRUP6     = M.COD_UNIDADE_ATUAL6
AND B.CODIGO_EMPRESA = M.CODIGO_EMPRESA
AND B.TIPO_AGRUP     = 'U'
LEFT OUTER JOIN RHORGA_AGRUPADOR C
ON C.COD_AGRUP1      = M.COD_CCONTAB_ATUAL1
AND C.COD_AGRUP2     = M.COD_CCONTAB_ATUAL2
AND C.COD_AGRUP3     = M.COD_CCONTAB_ATUAL3
AND C.COD_AGRUP4     = M.COD_CCONTAB_ATUAL4
AND C.COD_AGRUP5     = M.COD_CCONTAB_ATUAL5
AND C.COD_AGRUP6     = M.COD_CCONTAB_ATUAL6
AND C.CODIGO_EMPRESA = M.CODIGO_EMPRESA
AND C.TIPO_AGRUP     = 'C'
LEFT OUTER JOIN RHORGA_AGRUPADOR D
ON D.COD_AGRUP1      = M.COD_CGERENC_ATUAL1
AND D.COD_AGRUP2     = M.COD_CGERENC_ATUAL2
AND D.COD_AGRUP3     = M.COD_CGERENC_ATUAL3
AND D.COD_AGRUP4     = M.COD_CGERENC_ATUAL4
AND D.COD_AGRUP5     = M.COD_CGERENC_ATUAL5
AND D.COD_AGRUP6     = M.COD_CGERENC_ATUAL6
AND D.CODIGO_EMPRESA = M.CODIGO_EMPRESA
AND D.TIPO_AGRUP     = 'G'
WHERE M.CODIGO       =  vCOD_CONTRATO
AND M.TIPO_CONTRATO  = vTP_CONTRATO
AND M.CODIGO_EMPRESA = vCOD_EMPRESA
AND M.DATA_CARGA     =
  (SELECT MAX (a.DATA_CARGA)
  FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO a
  WHERE a.codigo                 = M.codigo
  AND a.codigo_empresa           = M.codigo_empresa
  AND a.tipo_contrato            = M.tipo_contrato
  AND A.COD_MOVIMENTACAO         = M.COD_MOVIMENTACAO
  AND A.DT_ALT_UNID_CUSTO = TRUNC(M.DT_ALT_UNID_CUSTO)
  )
AND M.DATA_PROCESSAMENTO IS NULL AND M.STATUS_PROCESSAMENTO IS NULL AND M.FAZER IN ('I')
  GROUP BY CASE WHEN ( ( A.TIPO_AGRUP IS NULL ) OR (B.TIPO_AGRUP IS NULL) OR ( C.TIPO_AGRUP  IS NULL ) OR (  D.TIPO_AGRUP IS NULL ) ) THEN 'NAO_IMPORTA'
ELSE 'IMPORTA' END, M.CODIGO_EMPRESA, M.TIPO_CONTRATO, M.CODIGO, M.DATA_CARGA
) X group by X.CODIGO_EMPRESA, X.TIPO_CONTRATO, X.CODIGO, X.DATA_CARGA
)XX
) LOOP

--dbms_output.put_line('--ENTROU NO LOOP DA FUNÃ‡ÃƒO');
IF C3.VERIFICA1 <> C3.VERIFICA2 THEN
RETORNO := 1;
UPDATE ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO SET ANALISE= 'LOCAL_INCORRETO' WHERE CODIGO=C3.CODIGO AND CODIGO_EMPRESA=C3.CODIGO_EMPRESA AND TIPO_CONTRATO=C3.TIPO_CONTRATO AND
DATA_PROCESSAMENTO IS NULL AND STATUS_PROCESSAMENTO IS NULL AND DATA_CARGA = TRUNC(C3.DATA_CARGA) AND FAZER IN ('D','I');
COMMIT WORK;

ELSIF C3.VERIFICA1 ='IMPORTA' AND C3.VERIFICA2 IS NULL THEN

SELECT COUNT(MAX(ANALISE)) INTO vANALISE FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO M WHERE M.CODIGO= vCOD_CONTRATO
AND M.TIPO_CONTRATO  = vTP_CONTRATO
AND M.CODIGO_EMPRESA = vCOD_EMPRESA
AND ANALISE= 'LOCAL_INCORRETO'
AND DATA_CARGA = TRUNC(C3.DATA_CARGA)
AND STATUS_PROCESSAMENTO IS NULL
AND DATA_PROCESSAMENTO IS NULL
GROUP BY ANALISE;

IF vANALISE =0 THEN
RETORNO := 0;
ELSIF vANALISE >0 THEN
RETORNO := 1;
END IF;
END IF;

END LOOP;

RETURN RETORNO;
END; -- FIM DO BEGIN1
/*FUNÃ‡ÃƒO FINALIZA AQUI*/

FUNCTION VERIFICA_DATAS (vCONTRATO IN CHAR, vTIPO_CONTRATO IN CHAR, vEMPRESA IN CHAR,vDATA_CARGA DATE) RETURN NUMBER IS
VERIFICA NUMBER;
vDT_SISTEMA DATE;
BEGIN --BEGIN1
VERIFICA:=0;
vREG:=null;
FOR C4 IN (
SELECT X6.CODIGO,X6.TIPO_CONTRATO,X6.CODIGO_EMPRESA,X6.DATA_CARGA,
REGEXP_SUBSTR(vertifica,'[^;]+', 1,1) as IMPORTACAO1,
REGEXP_SUBSTR(vertifica,'[^;]+', 1,2) as IMPORTACAO2
FROM (
select LISTAGG(X5.IMPORTACAO,';') WITHIN GROUP(ORDER BY  X5.CODIGO,X5.TIPO_CONTRATO,X5.CODIGO_EMPRESA) as vertifica ,
X5.CODIGO,X5.TIPO_CONTRATO,X5.CODIGO_EMPRESA,X5.DATA_CARGA
from (
SELECT X4.CODIGO,X4.IMPORTACAO,S.TIPO_CONTRATO,S.CODIGO_EMPRESA,X4.DATA_CARGA
FROM (
SELECT X3.*, CASE WHEN X3.QTD>1 AND DT_FIM_NULO='NAO'AND ULTIMO_REGI='SIM' AND X3.DT_ALT_UNID_CUSTO < T.MAIOR_DT_TRANS  THEN 'IMPORTA' 
                  WHEN X3.QTD=1 AND DT_FIM_NULO='NAO'AND X3.DT_ALT_UNID_CUSTO < T.MAIOR_DT_TRANS  THEN 'IMPORTA' 
                  WHEN X3.DT_ALT_UNID_CUSTO > TO_DATE('31/12/2020','DD/MM/YYYY') AND C.VINCULO IN ('0001','0005') THEN 'NAO_IMPORTA'
                  WHEN X3.DT_ALT_UNID_CUSTO > TO_DATE('31/10/2021','DD/MM/YYYY') AND C.VINCULO IN ('0000','0002') THEN 'NAO_IMPORTA'
                  WHEN X3.QTD>1 AND DT_FIM_NULO='SIM'AND ULTIMO_REGI='NAO' THEN 'NAO_IMPORTA' /* SE A DATA FIM DA MOVIMENTAÃ‡AÃ• ESTIVER NULA E NÃƒO FOR O ULTIMO REGISTRO NÃƒO IMPORTA */
                  WHEN X3.QTD>1 AND DT_FIM_NULO='SIM'AND ULTIMO_REGI='SIM' THEN 'IMPORTA' /*SE A DATA FIM DA MOVIMENTAÃ‡AÃ• ESTIVER PREENCHIDA E NÃƒO FOR O ULTIMO REGISTRO IMPORTA */
                  WHEN X3.QTD>1 AND DT_FIM_NULO='NAO'AND ULTIMO_REGI='NAO' THEN 'IMPORTA'
                  WHEN X3.QTD=1 AND DT_FIM_NULO ='SIM'THEN 'IMPORTA' /* SE POSSUI APENAS UM REGISTRO E A DATA FIM FOR NULA IMPORTA */
                  WHEN X3.MAIOR_DT > (SELECT DATA_DO_SISTEMA from rhparm_p_sist) THEN 'NAO_IMPORTA'
             ELSE 'NAO_IMPORTA' END AS IMPORTACAO
FROM (
SELECT XX.*, CASE WHEN XX.DT_ALT_UNID_CUSTO = XX.MAIOR_DT THEN 'SIM' ELSE 'NAO' END AS ULTIMO_REGI  /*VERIFICA SE A LINHA QUE ESTA SENDO ANALISADA POSSUI A DT_ALT_UNID_CUSTO IGUAL A MAIOR DATA DA MOVIMENTAÃ‡AO (DT_ALT_UNID_CUSTO)*/
FROM ( SELECT X.*, IMP.DT_ALT_UNID_CUSTO DT_ALT_UNID_CUSTO,
IMP.DT_FIM_TEMP DT_FIM_TEMP, IMP.CODIGO_EMPRESA AS COD_EMPRESA, IMP.TIPO_CONTRATO AS TP_CONTRATO, imp.COD_MOVIMENTACAO,IMP.DATA_CARGA,
CASE WHEN IMP.DT_FIM_TEMP IS NULL THEN 'SIM' ELSE 'NAO' END AS DT_FIM_NULO, /* VERIFICA SE A DATA FIM ESTA PREENCHIDA */
CASE WHEN X.CODIGO IS NOT NULL THEN (SELECT DT_ALT_UNID_CUSTO /* RECUPERA A MAIOR DATA DT_ALT_UNID_CUSTO DO BM*/
                                       FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO
                                       WHERE CODIGO_EMPRESA = IMP.CODIGO_EMPRESA AND TIPO_CONTRATO = IMP.TIPO_CONTRATO AND CODIGO = IMP.CODIGO AND DATA_CARGA = TRUNC(vDATA_CARGA) AND
                                             STATUS_PROCESSAMENTO IS NULL AND DATA_PROCESSAMENTO   IS NULL AND
                                             DT_ALT_UNID_CUSTO = (SELECT MAX (M.DT_ALT_UNID_CUSTO)
                                                                  FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO M
                                                                  WHERE M.CODIGO = SUGESP_SANEAMENTO_MOVIMENTACAO.CODIGO AND
                                                                        M.TIPO_CONTRATO = SUGESP_SANEAMENTO_MOVIMENTACAO.TIPO_CONTRATO AND
                                                                        M.CODIGO_EMPRESA = SUGESP_SANEAMENTO_MOVIMENTACAO.CODIGO_EMPRESA AND
                                                                        M.DATA_CARGA = TRUNC(SUGESP_SANEAMENTO_MOVIMENTACAO.DATA_CARGA) AND
                                                                        M.STATUS_PROCESSAMENTO IS NULL AND
                                                                        M.DATA_PROCESSAMENTO   IS NULL)GROUP BY DT_ALT_UNID_CUSTO)
ELSE IMP.DT_ALT_UNID_CUSTO END AS MAIOR_DT
FROM (SELECT COUNT(1) AS QTD, CODIGO, TIPO_CONTRATO, CODIGO_EMPRESA FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO WHERE FAZER = 'I' AND DATA_CARGA = TRUNC(vDATA_CARGA) AND DATA_PROCESSAMENTO IS NULL
AND STATUS_PROCESSAMENTO IS NULL GROUP BY  CODIGO, TIPO_CONTRATO, CODIGO_EMPRESA ) X /*CONTA A QUANTIDADE DE LINHAS DE ACORDO COM CADA BM */
LEFT OUTER JOIN ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO IMP ON X.CODIGO = IMP.CODIGO AND X.TIPO_CONTRATO = IMP.TIPO_CONTRATO AND X.CODIGO_EMPRESA = IMP.CODIGO_EMPRESA
WHERE IMP.FAZER = 'I' AND IMP.DATA_CARGA = TRUNC(vDATA_CARGA) AND IMP.STATUS_PROCESSAMENTO IS NULL AND IMP.DATA_PROCESSAMENTO IS NULL AND  (imp.import_dados not in ('S') OR imp.import_dados IS NULL)) XX /*RECUPERA APENAS O REGISTRO DA INSERÃ‡ÃƒO */
ORDER BY 2,3
)X3
LEFT JOIN (SELECT MAX(DT_ALT_UNID_CUSTO) MAIOR_DT_TRANS, CODIGO_EMPRESA, TIPO_CONTRATO, CODIGO FROM ARTERH.RHCGED_TRANSFERENC GROUP BY CODIGO_EMPRESA, TIPO_CONTRATO, CODIGO) T ON
T.CODIGO = X3.CODIGO AND T.TIPO_CONTRATO = X3.TIPO_CONTRATO AND T.CODIGO_EMPRESA = X3.CODIGO_EMPRESA
LEFT JOIN RHPESS_CONTRATO C ON 
X3.CODIGO = C.CODIGO AND X3.TIPO_CONTRATO = C.TIPO_CONTRATO AND X3.CODIGO_EMPRESA = C.CODIGO_EMPRESA AND 
C.ANO_MES_REFERENCIA = (SELECT MAX(A.ANO_MES_REFERENCIA) FROM RHPESS_CONTRATO A WHERE C.CODIGO = A.CODIGO AND C.TIPO_CONTRATO = A.TIPO_CONTRATO AND C.CODIGO = A.CODIGO AND 
A.ANO_MES_REFERENCIA <= (SELECT DATA_DO_SISTEMA FROM RHPARM_P_SIST))
)X4
LEFT OUTER JOIN ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO S
ON S.CODIGO=X4.CODIGO AND S.CODIGO_EMPRESA = X4.CODIGO_EMPRESA AND S.TIPO_CONTRATO = X4.TIPO_CONTRATO and s.DT_ALT_UNID_CUSTO = trunc(x4.DT_ALT_UNID_CUSTO) and
s.COD_MOVIMENTACAO = x4.COD_MOVIMENTACAO
WHERE X4.CODIGO = vCONTRATO AND X4.TIPO_CONTRATO = vTIPO_CONTRATO AND X4.CODIGO_EMPRESA = vEMPRESA AND S.DATA_CARGA = TRUNC(vDATA_CARGA)
group by X4.CODIGO,X4.IMPORTACAO,S.TIPO_CONTRATO,S.CODIGO_EMPRESA, X4.DATA_CARGA
) x5 group by X5.CODIGO, X5.TIPO_CONTRATO, X5.CODIGO_EMPRESA, X5.DATA_CARGA
) X6
) LOOP

IF (C4.IMPORTACAO1 <> C4.IMPORTACAO2) THEN
VERIFICA:=1;

UPDATE ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO SET IMPORT_DADOS='N' WHERE CODIGO = C4.CODIGO AND CODIGO_EMPRESA = C4.CODIGO_EMPRESA AND TIPO_CONTRATO = C4.TIPO_CONTRATO AND DATA_PROCESSAMENTO IS NULL AND STATUS_PROCESSAMENTO IS NULL AND DATA_CARGA = trunc(C4.DATA_CARGA) AND FAZER IN ('D','I'); COMMIT WORK;

ELSIF (C4.IMPORTACAO1 = 'NAO_IMPORTA' AND C4.IMPORTACAO2 IS NULL )  THEN
VERIFICA:=1;

UPDATE ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO SET IMPORT_DADOS='N' WHERE CODIGO = C4.CODIGO AND CODIGO_EMPRESA = C4.CODIGO_EMPRESA AND TIPO_CONTRATO = C4.TIPO_CONTRATO AND DATA_PROCESSAMENTO IS NULL AND STATUS_PROCESSAMENTO IS NULL AND DATA_CARGA = trunc(C4.DATA_CARGA) AND FAZER IN ('D','I'); COMMIT WORK;
END IF;

IF C4.IMPORTACAO1 ='IMPORTA' AND C4.IMPORTACAO2 IS NULL THEN

SELECT COUNT(MAX(IMPORT_DADOS)) INTO vREG FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO M
WHERE M.CODIGO= vCONTRATO
AND M.TIPO_CONTRATO  = vTIPO_CONTRATO
AND M.CODIGO_EMPRESA = vEMPRESA
AND IMPORT_DADOS = 'N'
AND DATA_CARGA = TRUNC(C4.DATA_CARGA)
AND STATUS_PROCESSAMENTO IS NULL
AND DATA_PROCESSAMENTO IS NULL
GROUP BY IMPORT_DADOS;


IF vREG =0 THEN
 UPDATE ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO SET IMPORT_DADOS='S' WHERE CODIGO = C4.CODIGO AND CODIGO_EMPRESA = C4.CODIGO_EMPRESA AND TIPO_CONTRATO = C4.TIPO_CONTRATO AND
 DATA_PROCESSAMENTO IS NULL AND STATUS_PROCESSAMENTO IS NULL AND DATA_CARGA = trunc(C4.DATA_CARGA) AND FAZER IN ('D','I'); COMMIT WORK;

VERIFICA := 0;

ELSIF vREG >0 THEN
VERIFICA := 1;

END IF;
END IF;

END LOOP;

RETURN VERIFICA;
END; -- FIM DO BEGIN1
/*FUNÃ‡ÃƒO FINALIZA AQUI*/


BEGIN
FOR C2 IN (
SELECT FAZER,
CODIGO_EMPRESA,
TIPO_CONTRATO,
CODIGO,
DT_ALT_UNID_CUSTO,
COD_MOVIMENTACAO,
COD_LOTACAO_ATUAL1,
COD_LOTACAO_ATUAL2,
COD_LOTACAO_ATUAL3,
COD_LOTACAO_ATUAL4,
COD_LOTACAO_ATUAL5,
COD_LOTACAO_ATUAL6,
COD_UNIDADE_ATUAL1,
COD_UNIDADE_ATUAL2,
COD_UNIDADE_ATUAL3,
COD_UNIDADE_ATUAL4,
COD_UNIDADE_ATUAL5,
COD_UNIDADE_ATUAL6,
COD_CCONTAB_ATUAL1,
COD_CCONTAB_ATUAL2,
COD_CCONTAB_ATUAL3,
COD_CCONTAB_ATUAL4,
COD_CCONTAB_ATUAL5,
COD_CCONTAB_ATUAL6,
COD_CGERENC_ATUAL1,
COD_CGERENC_ATUAL2,
COD_CGERENC_ATUAL3,
COD_CGERENC_ATUAL4,
COD_CGERENC_ATUAL5,
COD_CGERENC_ATUAL6,
TEXTO_ASSOCIADO,
LOGIN_USUARIO,
DT_ULT_ALTER_USUA,
MOTIVO_ALTERACAO,
DT_FIM_TEMP,
C_LIVRE_DESCR01,
C_LIVRE_DATA01,
DOCUMENTO_PUBLIC,
ASSINATURA_01,
ASSINATURA_02,
ASSINATURA_03,
C_LIVRE_DESCR02,
C_LIVRE_SELEC01,
C_LIVRE_VALOR01,
DT_REF_ALT_RETRO,
C_LIVRE_DATA02,
C_LIVRE_SELEC02,
C_LIVRE_VALOR02,
C_LIVRE_OPCAO01,
C_LIVRE_OPCAO02,
ID_LEI,
DATA_PROCESSAMENTO,
STATUS_PROCESSAMENTO,
DATA_CARGA,
IMPORT_DADOS,
ANALISE,
NUMERO_LINHA,
DT_PREV_RETORNO,
DATA_PUBLIC
FROM ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO
WHERE DATA_CARGA = (select max (a.DATA_CARGA)
                            from ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO a
												    where a.codigo = SUGESP_SANEAMENTO_MOVIMENTACAO.codigo and
                                  a.codigo_empresa = SUGESP_SANEAMENTO_MOVIMENTACAO.codigo_empresa and
                                  a.tipo_contrato = SUGESP_SANEAMENTO_MOVIMENTACAO.tipo_contrato AND
                                  A.COD_MOVIMENTACAO = SUGESP_SANEAMENTO_MOVIMENTACAO.COD_MOVIMENTACAO AND
                                  A.DT_ALT_UNID_CUSTO = TRUNC(SUGESP_SANEAMENTO_MOVIMENTACAO.DT_ALT_UNID_CUSTO))
                                  AND FAZER NOT IN ('N')
ORDER BY FAZER ASC)

LOOP
Dbms_output.put_line(c2.CODIGO||'-'||c2.TIPO_CONTRATO||'-'||C2.CODIGO_EMPRESA||'-'||C2.DATA_CARGA);
REC_RETORNO := VERIFICA_LOCAL(c2.CODIGO, c2.TIPO_CONTRATO, C2.CODIGO_EMPRESA);
REC_VERIFICA := VERIFICA_DATAS (c2.CODIGO, c2.TIPO_CONTRATO, C2.CODIGO_EMPRESA,C2.DATA_CARGA);

Dbms_output.put_line('--VARIAVEL DE RETORNO FUNÃ‡Ã‚O: '||REC_RETORNO||' REC_VERIFICA DATA: '||REC_VERIFICA);




 --SE O REGISTRO NÃƒO APRESENTAR ERROS E O CAMPO IMPORT_DADOS ESTIVER EM BRANCO IRÃ? ENTRAR NA PROCEDURE E IMPORTAR A MOVIMENTAÃ‡ÃƒO PARA A TABELA OFICIAL DO ARTE RHCGED_TRANSFERENC
if  REC_RETORNO = 0 AND REC_VERIFICA = 0  THEN

IMPORTA(C2.FAZER,C2.CODIGO_EMPRESA,C2.TIPO_CONTRATO,C2.CODIGO,C2.DT_ALT_UNID_CUSTO,C2.COD_MOVIMENTACAO,C2.COD_LOTACAO_ATUAL1,C2.COD_LOTACAO_ATUAL2,C2.COD_LOTACAO_ATUAL3,C2.COD_LOTACAO_ATUAL4,C2.COD_LOTACAO_ATUAL5,C2.COD_LOTACAO_ATUAL6,
C2.COD_UNIDADE_ATUAL1,C2.COD_UNIDADE_ATUAL2,C2.COD_UNIDADE_ATUAL3,C2.COD_UNIDADE_ATUAL4,C2.COD_UNIDADE_ATUAL5,C2.COD_UNIDADE_ATUAL6,C2.COD_CCONTAB_ATUAL1,C2.COD_CCONTAB_ATUAL2,C2.COD_CCONTAB_ATUAL3,C2.COD_CCONTAB_ATUAL4,C2.COD_CCONTAB_ATUAL5,C2.COD_CCONTAB_ATUAL6,
C2.COD_CGERENC_ATUAL1,C2.COD_CGERENC_ATUAL2,C2.COD_CGERENC_ATUAL3,C2.COD_CGERENC_ATUAL4,C2.COD_CGERENC_ATUAL5,C2.COD_CGERENC_ATUAL6,C2.TEXTO_ASSOCIADO,C2.LOGIN_USUARIO,C2.DT_ULT_ALTER_USUA,C2.MOTIVO_ALTERACAO,C2.DT_FIM_TEMP,C2.C_LIVRE_DESCR01,C2.C_LIVRE_DATA01,
C2.DOCUMENTO_PUBLIC,C2.ASSINATURA_01,C2.ASSINATURA_02,C2.ASSINATURA_03,C2.C_LIVRE_DESCR02,C2.C_LIVRE_SELEC01,C2.C_LIVRE_VALOR01,C2.DT_REF_ALT_RETRO,C2.C_LIVRE_DATA02,C2.C_LIVRE_SELEC02,C2.C_LIVRE_VALOR02,C2.C_LIVRE_OPCAO01,C2.C_LIVRE_OPCAO02,C2.ID_LEI,C2.DATA_PROCESSAMENTO,
C2.STATUS_PROCESSAMENTO, C2.DATA_CARGA, C2.DT_PREV_RETORNO, C2.DATA_PUBLIC);

ELSIF ((REC_RETORNO = 1) OR (REC_VERIFICA = 1)) THEN
UPDATE ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO SET STATUS_PROCESSAMENTO = 'N', DATA_PROCESSAMENTO = SYSDATE WHERE CODIGO=C2.CODIGO AND CODIGO_EMPRESA=C2.CODIGO_EMPRESA AND TIPO_CONTRATO=C2.TIPO_CONTRATO AND DATA_PROCESSAMENTO IS NULL AND STATUS_PROCESSAMENTO IS NULL AND DATA_CARGA = TRUNC(C2.DATA_CARGA) AND NUMERO_LINHA = C2.NUMERO_LINHA;
COMMIT WORK;
END IF;


END LOOP;
update ARTERH.SUGESP_SANEAMENTO_MOVIMENTACAO set DATA_PROCESSAMENTO = sysdate, STATUS_PROCESSAMENTO = 'N' WHERE DATA_PROCESSAMENTO IS NULL AND STATUS_PROCESSAMENTO IS NULL ;

END;
END SANEAMENTO_MOVIMENTACAO;